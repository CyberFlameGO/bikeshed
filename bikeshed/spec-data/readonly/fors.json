{
  "-webkit-background-clip": [
    "border-box",
    "content-box",
    "padding-box",
    "text"
  ],
  "/": [
    "",
    "!",
    "\"@charset\"",
    "\"aborterror\"",
    "\"absolute-url\"",
    "\"all\"-named elements",
    "\"already started\"",
    "\"audio\"",
    "\"camera\"",
    "\"coep\" report type",
    "\"datacloneerror\"",
    "\"detail\"",
    "\"display-capture\"",
    "\"empty\"",
    "\"encodingerror\"",
    "\"english-linear\"",
    "\"english-rotation\"",
    "\"hierarchyrequesterror\"",
    "\"indexsizeerror\"",
    "\"invalidaccesserror\"",
    "\"invalidcharactererror\"",
    "\"invalidstateerror\"",
    "\"is origin potentially trustworthy?\"",
    "\"microphone\"",
    "\"mime\"",
    "\"motion\"",
    "\"music\"",
    "\"networkerror\"",
    "\"no-referrer\"",
    "\"no-referrer-when-downgrade\"",
    "\"nomodificationallowederror\"",
    "\"non-blocking\"",
    "\"none\"",
    "\"notallowederror\"",
    "\"notfounderror\"",
    "\"notsupportederror\"",
    "\"origin\"",
    "\"origin-when-cross-origin\"",
    "\"quotaexceedederror\"",
    "\"ready to be parser-executed\"",
    "\"reserved\"",
    "\"same-origin\"",
    "\"securityerror\"",
    "\"si-linear\"",
    "\"si-rotation\"",
    "\"smart-poster\"",
    "\"speaker-selection\"",
    "\"speech\"",
    "\"speech-recognition\"",
    "\"standard\"",
    "\"strict-origin\"",
    "\"strict-origin-when-cross-origin\"",
    "\"syntaxerror\"",
    "\"text\"",
    "\"unknown\"",
    "\"unsafe-url\"",
    "\"url\"",
    "\"vendor-defined\"",
    "\"video\"",
    "\"xr-standard\"",
    "\"xr-standard\" gamepad mapping",
    "#",
    "%array.prototype%",
    "%error.prototype%",
    "%evalerror.prototype%",
    "%function.prototype%",
    "%json.parse%",
    "%object.prototype%",
    "%object.prototype.valueof%",
    "%rangeerror.prototype%",
    "%referenceerror.prototype%",
    "%syntaxerror.prototype%",
    "%typeerror.prototype%",
    "%urierror.prototype%",
    "&",
    "&&",
    "'::file-selector-button'",
    "'align-content'",
    "'align-items'",
    "'align-self'",
    "'all' media group",
    "'all-petite-caps'",
    "'all-small-caps'",
    "'appearance'",
    "'aspect-ratio'",
    "'attr()'",
    "'audio' media group",
    "'background-color'",
    "'background-image'",
    "'bitmap' media group",
    "'block-size'",
    "'border-block-start-width'",
    "'border-bottom-color'",
    "'border-bottom-style'",
    "'border-bottom-width'",
    "'border-collapse'",
    "'border-left-color'",
    "'border-left-style'",
    "'border-left-width'",
    "'border-radius'",
    "'border-right-color'",
    "'border-right-style'",
    "'border-right-width'",
    "'border-spacing'",
    "'border-top-color'",
    "'border-top-style'",
    "'border-top-width'",
    "'bottom'",
    "'clear'",
    "'color'",
    "'color-scheme'",
    "'column-count'",
    "'column-fill'",
    "'column-gap'",
    "'column-rule'",
    "'column-width'",
    "'condensed'",
    "'conic-gradient'",
    "'content'",
    "'continuous' media group",
    "'counter-reset'",
    "'counter-set'",
    "'currentcolor'",
    "'cursor'",
    "'direction'",
    "'display'",
    "'display-p3'",
    "'em'",
    "'ex'",
    "'expanded'",
    "'extra-condensed'",
    "'extra-expanded'",
    "'flex-direction'",
    "'flex-wrap'",
    "'float'",
    "'font'",
    "'font-family'",
    "'font-kerning'",
    "'font-size'",
    "'font-stretch'",
    "'font-variant-caps'",
    "'font-weight'",
    "'grid' media group",
    "'grid-auto-columns'",
    "'grid-auto-flow'",
    "'grid-auto-rows'",
    "'grid-column-gap'",
    "'grid-row-gap'",
    "'grid-template-areas'",
    "'grid-template-columns'",
    "'grid-template-rows'",
    "'height'",
    "'hidden'",
    "'image-orientation'",
    "'in'",
    "'inline-block'",
    "'inline-size'",
    "'inset-block-end'",
    "'inset-block-start'",
    "'interactive media group",
    "'justify-content'",
    "'justify-items'",
    "'justify-self'",
    "'left'",
    "'letter-spacing'",
    "'line-height'",
    "'list-style-type'",
    "'margin-block-end'",
    "'margin-block-start'",
    "'margin-bottom'",
    "'margin-inline-end'",
    "'margin-inline-start'",
    "'margin-left'",
    "'margin-right'",
    "'margin-top'",
    "'max-height'",
    "'max-width'",
    "'none'",
    "'object-fit'",
    "'outline'",
    "'overflow'",
    "'padding-block-end'",
    "'padding-block-start'",
    "'padding-bottom'",
    "'padding-inline-end'",
    "'padding-inline-start'",
    "'padding-left'",
    "'padding-right'",
    "'padding-top'",
    "'paged' media group",
    "'petite-caps'",
    "'position'",
    "'pt'",
    "'px'",
    "'relative-colorimetric'",
    "'report-sample'",
    "'right'",
    "'ruby-base'",
    "'self'",
    "'semi-condensed'",
    "'semi-expanded'",
    "'small-caps'",
    "'speech' media group",
    "'srgb'",
    "'static'",
    "'static' media group",
    "'strict-dynamic'",
    "'table'",
    "'table-caption'",
    "'table-cell'",
    "'table-row'",
    "'tactile' media group",
    "'text-align'",
    "'text-overflow'",
    "'text-transform'",
    "'titling-caps'",
    "'top'",
    "'ultra-condensed'",
    "'ultra-expanded'",
    "'unicase'",
    "'unicode-bidi'",
    "'unsafe-allow-redirects'",
    "'unsafe-eval'",
    "'unsafe-hashes'",
    "'unsafe-inline'",
    "'vertical-align'",
    "'visibility'",
    "'visual' media group",
    "'vw'",
    "'white-space'",
    "'width'",
    "'word-spacing'",
    "*",
    "+",
    ",",
    "--*",
    "-webkit-align-content",
    "-webkit-align-items",
    "-webkit-align-self",
    "-webkit-animation",
    "-webkit-animation-delay",
    "-webkit-animation-direction",
    "-webkit-animation-duration",
    "-webkit-animation-fill-mode",
    "-webkit-animation-iteration-count",
    "-webkit-animation-name",
    "-webkit-animation-play-state",
    "-webkit-animation-timing-function",
    "-webkit-appearance",
    "-webkit-backface-visibility",
    "-webkit-background-clip",
    "-webkit-background-origin",
    "-webkit-background-size",
    "-webkit-border-bottom-left-radius",
    "-webkit-border-bottom-right-radius",
    "-webkit-border-radius",
    "-webkit-border-top-left-radius",
    "-webkit-border-top-right-radius",
    "-webkit-box-align",
    "-webkit-box-flex",
    "-webkit-box-ordinal-group",
    "-webkit-box-orient",
    "-webkit-box-pack",
    "-webkit-box-shadow",
    "-webkit-box-sizing",
    "-webkit-filter",
    "-webkit-flex",
    "-webkit-flex-basis",
    "-webkit-flex-direction",
    "-webkit-flex-flow",
    "-webkit-flex-grow",
    "-webkit-flex-shrink",
    "-webkit-flex-wrap",
    "-webkit-image-set()",
    "-webkit-justify-content",
    "-webkit-line-clamp",
    "-webkit-linear-gradient()",
    "-webkit-mask",
    "-webkit-mask-box-image",
    "-webkit-mask-box-image-outset",
    "-webkit-mask-box-image-repeat",
    "-webkit-mask-box-image-slice",
    "-webkit-mask-box-image-source",
    "-webkit-mask-box-image-width",
    "-webkit-mask-clip",
    "-webkit-mask-composite",
    "-webkit-mask-image",
    "-webkit-mask-origin",
    "-webkit-mask-position",
    "-webkit-mask-repeat",
    "-webkit-mask-size",
    "-webkit-order",
    "-webkit-perspective",
    "-webkit-perspective-origin",
    "-webkit-radial-gradient()",
    "-webkit-repeating-linear-gradient()",
    "-webkit-repeating-radial-gradient()",
    "-webkit-text-fill-color",
    "-webkit-text-size-adjust",
    "-webkit-text-stroke",
    "-webkit-text-stroke-color",
    "-webkit-text-stroke-width",
    "-webkit-transform",
    "-webkit-transform-origin",
    "-webkit-transform-style",
    "-webkit-transition",
    "-webkit-transition-delay",
    "-webkit-transition-duration",
    "-webkit-transition-property",
    "-webkit-transition-timing-function",
    "-webkit-user-select",
    "/deep/",
    "1-ua",
    "1-ua mode",
    "1st <length>",
    "2-ua",
    "2-ua mode",
    "200 response",
    "200 status code",
    "2d",
    "2d context creation algorithm",
    "2d matrix",
    "2nd <length>",
    "3d matrix",
    "3d point cloud rendering",
    "3d rendering context",
    "3d transform functions",
    "3d transformed element",
    "3dof",
    "3rd <length [0,∞]>",
    "4th <length>",
    "4x4 abstract matrix",
    "4xx",
    "4xx status code",
    "5.4 generate a network error report",
    "5.5 deliver a network report",
    "5xx",
    "5xx status code",
    "6dof",
    ":-webkit-autofill",
    "::after",
    "::attr()",
    "::backdrop",
    "::before",
    "::content",
    "::cue",
    "::cue(selector)",
    "::cue-region",
    "::cue-region(selector)",
    "::file-selector-button",
    "::first-letter",
    "::first-line",
    "::grammar-error",
    "::highlight(<custom-highlight-name>)",
    "::highlight(<highlight-name>)",
    "::marker",
    "::nth-fragment()",
    "::part()",
    "::placeholder",
    "::selection",
    "::shadow",
    "::slotted()",
    "::spelling-error",
    "::target-text",
    ":active",
    ":after",
    ":any-link",
    ":autofill",
    ":before",
    ":blank",
    ":buffering",
    ":checked",
    ":current",
    ":current()",
    ":default",
    ":defined",
    ":dir()",
    ":dir(ltr)",
    ":dir(rtl)",
    ":disabled",
    ":empty",
    ":enabled",
    ":first",
    ":first-child",
    ":first-letter",
    ":first-line",
    ":first-of-page",
    ":first-of-type",
    ":focus",
    ":focus-visible",
    ":focus-within",
    ":fullscreen",
    ":future",
    ":has()",
    ":host",
    ":host()",
    ":host-context()",
    ":hover",
    ":in-range",
    ":indeterminate",
    ":invalid",
    ":is()",
    ":lang",
    ":lang()",
    ":last-child",
    ":last-of-page",
    ":last-of-type",
    ":left",
    ":link",
    ":local-link",
    ":matches()",
    ":muted",
    ":not()",
    ":nth-child()",
    ":nth-col()",
    ":nth-last-child()",
    ":nth-last-col()",
    ":nth-last-of-type()",
    ":nth-of-page(n)",
    ":nth-of-type()",
    ":only-child",
    ":only-of-type",
    ":optional",
    ":out-of-range",
    ":past",
    ":paused",
    ":placeholder-shown",
    ":playing",
    ":read-only",
    ":read-write",
    ":required",
    ":right",
    ":root",
    ":scope",
    ":scope element",
    ":seeking",
    ":stalled",
    ":start-of-page",
    ":target",
    ":target-within",
    ":user-invalid",
    ":user-valid",
    ":valid",
    ":visited",
    ":volume-locked",
    ":where()",
    ":xr-overlay",
    "<(-token>",
    "<)-token>",
    "<?xml-stylesheet?>",
    "<[-token>",
    "<]-token>",
    "<absolute-size>",
    "<alpha-value>",
    "<an+b>",
    "<angle-percentage>",
    "<angle>",
    "<angular-color-hint>",
    "<angular-color-stop-list>",
    "<angular-color-stop>",
    "<animateable-feature>",
    "<annotation-xml>",
    "<annotation>",
    "<any-value>",
    "<at-keyword-token>",
    "<attachment>",
    "<attr-fallback>",
    "<attr-matcher>",
    "<attr-modifier>",
    "<attr-name>",
    "<attr-type>",
    "<attribute-selector>",
    "<auto-repeat>",
    "<auto-track-list>",
    "<bad-string-token>",
    "<bad-url-token>",
    "<baseline-position>",
    "<basic-shape>",
    "<bg-clip>",
    "<bg-image>",
    "<bg-layer>",
    "<bg-position>",
    "<bg-size>",
    "<blend-mode>",
    "<border-style>",
    "<border-width>",
    "<bottom>",
    "<box>",
    "<calc-constant>",
    "<calc-number-product>",
    "<calc-number-sum>",
    "<calc-number-value>",
    "<calc-product>",
    "<calc-sum>",
    "<calc-value>",
    "<cdc-token>",
    "<cdo-token>",
    "<cf-image>",
    "<class-selector>",
    "<clip-source>",
    "<cmyk-component>",
    "<colon-token>",
    "<color-adjuster>",
    "<color-font-technology>",
    "<color-space>",
    "<color-stop-angle>",
    "<color-stop-length>",
    "<color-stop-list>",
    "<color-stop>",
    "<color>",
    "<combinator>",
    "<comma-token>",
    "<common-lig-values>",
    "<complex-selector-list>",
    "<complex-selector>",
    "<composite-mode>",
    "<compositing-operator>",
    "<compound-selector-list>",
    "<compound-selector>",
    "<content-distribution>",
    "<content-position>",
    "<contextual-alt-values>",
    "<control-point>",
    "<coord-box>",
    "<counter-name>",
    "<counter-style-name>",
    "<counter-style>",
    "<counter>",
    "<cubic-bezier-easing-function>",
    "<custom-arg>",
    "<custom-highlight-name>",
    "<custom-ident>",
    "<custom-property-name>",
    "<custom-selector>",
    "<dasharray>",
    "<dashed-ident>",
    "<dashndashdigit-ident>",
    "<declaration-list>",
    "<declaration-value>",
    "<declaration>",
    "<delim-token>",
    "<deprecated-colors>",
    "<dimension-token>",
    "<dimension-unit>",
    "<dimension>",
    "<discretionary-lig-values>",
    "<display-box>",
    "<display-inside>",
    "<display-internal>",
    "<display-legacy>",
    "<display-listitem>",
    "<display-outside>",
    "<easing-function>",
    "<east-asian-variant-values>",
    "<east-asian-width-values>",
    "<element-offset-edge>",
    "<element-offset>",
    "<eof-token>",
    "<explicit-track-list>",
    "<extension-name>",
    "<extent-keyword>",
    "<family-name>",
    "<feature-value-name>",
    "<fill-rule>",
    "<filter-function>",
    "<filter-value-list>",
    "<final-bg-layer>",
    "<fixed-breadth>",
    "<fixed-repeat>",
    "<fixed-size>",
    "<flex>",
    "<font-format>",
    "<font-stretch-css3>",
    "<font-technology>",
    "<font-variant-css2>",
    "<font-weight-absolute>",
    "<forgiving-relative-selector-list>",
    "<forgiving-selector-list>",
    "<frequency-percentage>",
    "<frequency>",
    "<function-token>",
    "<general-enclosed>",
    "<generic-family>",
    "<generic-voice>",
    "<geometry-box>",
    "<gradient>",
    "<hash-token>",
    "<hex-color>",
    "<highlight-name>",
    "<historical-lig-values>",
    "<hsl-adjuster>",
    "<hue-adjuster>",
    "<hue>",
    "<hwb-adjuster>",
    "<id-selector>",
    "<id>",
    "<ident-token>",
    "<ident>",
    "<identifier>",
    "<image-set-option>",
    "<image-src>",
    "<image-tags>",
    "<image>",
    "<inflexible-breadth>",
    "<integer>",
    "<isolation-mode>",
    "<keyframe-block>",
    "<keyframe-selector>",
    "<keyframes-name>",
    "<lab-adjuster>",
    "<layer-name>",
    "<layout-box>",
    "<lch-adjuster>",
    "<leader-type>",
    "<left>",
    "<length-percentage>",
    "<length>",
    "<line-name-list>",
    "<line-names>",
    "<line-style>",
    "<line-width>",
    "<linear-color-hint>",
    "<linear-color-stop>",
    "<maction>",
    "<margin-width>",
    "<marker-ref>",
    "<mask-layer>",
    "<mask-reference>",
    "<mask-source>",
    "<masking-mode>",
    "<math>",
    "<media-and>",
    "<media-condition-without-or>",
    "<media-condition>",
    "<media-feature>",
    "<media-in-parens>",
    "<media-not>",
    "<media-or>",
    "<media-query-list>",
    "<media-query>",
    "<media-type>",
    "<merror>",
    "<mf-boolean>",
    "<mf-comparison>",
    "<mf-eq>",
    "<mf-gt>",
    "<mf-lt>",
    "<mf-name>",
    "<mf-plain>",
    "<mf-range>",
    "<mf-value>",
    "<mfrac>",
    "<mi>",
    "<mmultiscripts>",
    "<mn>",
    "<mo>",
    "<mover>",
    "<mpadded>",
    "<mphantom>",
    "<mprescripts>",
    "<mq-boolean>",
    "<mroot>",
    "<mrow>",
    "<ms>",
    "<mspace>",
    "<msqrt>",
    "<mstyle>",
    "<msub>",
    "<msubsup>",
    "<msup>",
    "<mtable>",
    "<mtd>",
    "<mtext>",
    "<mtr>",
    "<munder>",
    "<munderover>",
    "<n-dimension>",
    "<na-name>",
    "<na-prefix>",
    "<name-repeat>",
    "<named-color>",
    "<namespace-attr>",
    "<namespace-prefix>",
    "<ndash-dimension>",
    "<ndashdigit-dimension>",
    "<ndashdigit-ident>",
    "<none>",
    "<ns-prefix>",
    "<number-optional-number>",
    "<number-percentage>",
    "<number-token>",
    "<number>",
    "<numeric-figure-values>",
    "<numeric-fraction-values>",
    "<numeric-spacing-values>",
    "<outline-line-style>",
    "<overflow-position>",
    "<padding-width>",
    "<page-selector-list>",
    "<page-selector>",
    "<paint-box>",
    "<paint>",
    "<percentage-token>",
    "<percentage>",
    "<points>",
    "<position>",
    "<pseudo-class-selector>",
    "<pseudo-element-selector>",
    "<pseudo-page>",
    "<quirky-color>",
    "<quirky-length>",
    "<quote>",
    "<ratio>",
    "<relative-selector-list>",
    "<relative-selector>",
    "<relative-size>",
    "<repeat-style>",
    "<resolution>",
    "<reversed-counter-name>",
    "<right>",
    "<rounding-strategy>",
    "<rule-list>",
    "<scroll-timeline-offset>",
    "<selector-list>",
    "<self-position>",
    "<semantics>",
    "<semicolon-token>",
    "<shadow>",
    "<shape-arg>",
    "<shape-box>",
    "<shape-command>",
    "<shape-radius>",
    "<shape>",
    "<side-or-corner>",
    "<signed-integer>",
    "<signless-integer>",
    "<simple-selector-list>",
    "<simple-selector>",
    "<single-animation-composition>",
    "<single-animation-direction>",
    "<single-animation-fill-mode>",
    "<single-animation-iteration-count>",
    "<single-animation-play-state>",
    "<single-animation-timeline>",
    "<single-animation>",
    "<single-transition-property>",
    "<single-transition>",
    "<size>",
    "<source-size-list>",
    "<source-size-value>",
    "<source-size>",
    "<srgb-adjuster>",
    "<step-easing-function>",
    "<step-position>",
    "<string-token>",
    "<string>",
    "<stylesheet>",
    "<subclass-selector>",
    "<supports-condition>",
    "<supports-decl>",
    "<supports-feature>",
    "<supports-in-parens>",
    "<supports-selector-fn>",
    "<svg-paint>",
    "<symbol>",
    "<symbols-type>",
    "<system-color>",
    "<target-name>",
    "<target>",
    "<time-percentage>",
    "<time>",
    "<timeline-name>",
    "<toggle-value>",
    "<top>",
    "<track-breadth>",
    "<track-list>",
    "<track-repeat>",
    "<track-size>",
    "<transform-function>",
    "<transform-list>",
    "<type-or-unit>",
    "<type-selector>",
    "<urange>",
    "<uri>",
    "<url-modifier>",
    "<url-token>",
    "<url>",
    "<viewport-length>",
    "<visual-box>",
    "<whitespace-token>",
    "<wq-name>",
    "<xyz-adjuster>",
    "<zero>",
    "<{-token>",
    "<}-token>",
    ">",
    "?",
    "@-webkit-keyframes",
    "@@hasinstance",
    "@@isconcatspreadable",
    "@@toprimitive",
    "@@tostringtag",
    "@bottom-center",
    "@bottom-left",
    "@bottom-left-corner",
    "@bottom-right",
    "@bottom-right-corner",
    "@charset",
    "@color-profile",
    "@counter-style",
    "@custom-media",
    "@custom-selector",
    "@font-face",
    "@font-feature-values",
    "@font-palette-values",
    "@import",
    "@keyframes",
    "@layer",
    "@left-bottom",
    "@left-middle",
    "@left-top",
    "@media",
    "@nest",
    "@page",
    "@property",
    "@right-bottom",
    "@right-middle",
    "@right-top",
    "@scope",
    "@scroll-timeline",
    "@supports",
    "@top-center",
    "@top-left",
    "@top-left-corner",
    "@top-right",
    "@top-right-corner",
    "@viewport",
    "ARIAMixin",
    "AbortController",
    "AbortError",
    "AbortSignal",
    "AbsoluteOrientationReadingValues",
    "AbsoluteOrientationSensor",
    "AbstractRange",
    "AbstractWorker",
    "Accelerometer",
    "AccelerometerLocalCoordinateSystem",
    "AccelerometerReadingValues",
    "AccelerometerSensorOptions",
    "AccessibilityRole",
    "AcquireReadableStreamBYOBReader",
    "AcquireReadableStreamDefaultReader",
    "AcquireWritableStreamDefaultWriter",
    "AddEventListenerOptions",
    "AesCbcParams",
    "AesCtrParams",
    "AesDerivedKeyParams",
    "AesGcmParams",
    "AesKeyAlgorithm",
    "AesKeyGenParams",
    "Algorithm",
    "AlignSetting",
    "AllowShared",
    "AllowedBluetoothDevice",
    "AllowedUSBDevice",
    "AmbientLightReadingValues",
    "AmbientLightSensor",
    "AnalyserNode",
    "AnalyserOptions",
    "Animatable",
    "Animation",
    "AnimationEffect",
    "AnimationEvent",
    "AnimationEventInit",
    "AnimationFrameProvider",
    "AnimationNodeList",
    "AnimationPlayState",
    "AnimationPlaybackEvent",
    "AnimationPlaybackEventInit",
    "AnimationReplaceState",
    "AnimationTimeline",
    "AnimationWorkletGlobalScope",
    "AnimatorInstanceConstructor",
    "AriaAttributes",
    "ArrayBuffer",
    "ArrayBufferView",
    "AssignedNodesOptions",
    "AttestationConveyancePreference",
    "Attr",
    "AttributeMatchList",
    "AudioBuffer",
    "AudioBufferOptions",
    "AudioBufferSourceNode",
    "AudioBufferSourceOptions",
    "AudioConfiguration",
    "AudioContext",
    "AudioContextLatencyCategory",
    "AudioContextOptions",
    "AudioContextState",
    "AudioData",
    "AudioDataCopyToOptions",
    "AudioDataInit",
    "AudioDataOutputCallback",
    "AudioDecoder",
    "AudioDecoderConfig",
    "AudioDecoderInit",
    "AudioDecoderSupport",
    "AudioDestinationNode",
    "AudioEncoder",
    "AudioEncoderConfig",
    "AudioEncoderInit",
    "AudioEncoderSupport",
    "AudioListener",
    "AudioNode",
    "AudioNodeOptions",
    "AudioOutputOptions",
    "AudioParam",
    "AudioParamDescriptor",
    "AudioParamMap",
    "AudioProcessingEvent",
    "AudioProcessingEventInit",
    "AudioSampleFormat",
    "AudioScheduledSourceNode",
    "AudioTimestamp",
    "AudioTrack",
    "AudioTrackList",
    "AudioWorklet",
    "AudioWorkletGlobalScope",
    "AudioWorkletNode",
    "AudioWorkletNodeOptions",
    "AudioWorkletProcessCallback",
    "AudioWorkletProcessCallback()",
    "AudioWorkletProcessor",
    "AudioWorkletProcessorConstructor",
    "AuthenticationExtensionsClientInputs",
    "AuthenticationExtensionsClientOutputs",
    "AuthenticationExtensionsLargeBlobInputs",
    "AuthenticationExtensionsLargeBlobOutputs",
    "AuthenticatorAssertionResponse",
    "AuthenticatorAttachment",
    "AuthenticatorAttestationResponse",
    "AuthenticatorResponse",
    "AuthenticatorSelectionCriteria",
    "AuthenticatorTransport",
    "AutoKeyword",
    "AutomationRate",
    "BackgroundFetchEvent",
    "BackgroundFetchEventInit",
    "BackgroundFetchFailureReason",
    "BackgroundFetchManager",
    "BackgroundFetchOptions",
    "BackgroundFetchRecord",
    "BackgroundFetchRegistration",
    "BackgroundFetchResult",
    "BackgroundFetchUIOptions",
    "BackgroundFetchUpdateUIEvent",
    "BackgroundSyncOptions",
    "BarProp",
    "BarcodeDetector",
    "BarcodeDetectorOptions",
    "BarcodeFormat",
    "BaseAudioContext",
    "BaseComputedKeyframe",
    "BaseKeyframe",
    "BasePropertyIndexedKeyframe",
    "Baseline",
    "BasicCardChangeDetails",
    "BasicCardErrors",
    "BasicCardRequest",
    "BasicCardResponse",
    "BatteryManager",
    "BeforeUnloadEvent",
    "BidirectionalStream",
    "BidirectionalStreamsTransport",
    "BigInt64Array",
    "BigInteger",
    "BigUint64Array",
    "BinaryData",
    "BinaryType",
    "BiquadFilterNode",
    "BiquadFilterOptions",
    "BiquadFilterType",
    "BitrateMode",
    "Blob",
    "BlobCallback",
    "BlobEvent",
    "BlobEventInit",
    "BlobPart",
    "BlobPropertyBag",
    "BlockFragmentationType",
    "Bluetooth",
    "BluetoothAdvertisingEvent",
    "BluetoothAdvertisingEventInit",
    "BluetoothCharacteristicProperties",
    "BluetoothCharacteristicUUID",
    "BluetoothDataFilterInit",
    "BluetoothDescriptorUUID",
    "BluetoothDevice",
    "BluetoothDeviceEventHandlers",
    "BluetoothLEScanFilterInit",
    "BluetoothManufacturerDataFilterInit",
    "BluetoothManufacturerDataMap",
    "BluetoothPermissionDescriptor",
    "BluetoothPermissionResult",
    "BluetoothPermissionStorage",
    "BluetoothRemoteGATTCharacteristic",
    "BluetoothRemoteGATTDescriptor",
    "BluetoothRemoteGATTServer",
    "BluetoothRemoteGATTService",
    "BluetoothServiceDataFilterInit",
    "BluetoothServiceDataMap",
    "BluetoothServiceUUID",
    "BluetoothUUID",
    "Body",
    "BodyInit",
    "BoxQuadOptions",
    "BreakToken",
    "BreakTokenOptions",
    "BreakType",
    "BroadcastChannel",
    "BufferSource",
    "ByteLengthQueuingStrategy",
    "ByteString",
    "CDATASection",
    "CEReactions",
    "COSEAlgorithmIdentifier",
    "CSPViolationReportBody",
    "CSS",
    "CSSAnimation",
    "CSSBoxType",
    "CSSColor",
    "CSSColorValue",
    "CSSConditionRule",
    "CSSCounterStyleRule",
    "CSSDeviceCMYK",
    "CSSFontFaceLoadEvent",
    "CSSFontFaceLoadEventInit",
    "CSSFontFaceRule",
    "CSSFontFeatureValuesMap",
    "CSSFontFeatureValuesRule",
    "CSSFontPaletteValuesRule",
    "CSSGroupingRule",
    "CSSHSL",
    "CSSHWB",
    "CSSImageValue",
    "CSSImportRule",
    "CSSKeyframeRule",
    "CSSKeyframesRule",
    "CSSKeywordValue",
    "CSSKeywordish",
    "CSSLCH",
    "CSSLab",
    "CSSMarginRule",
    "CSSMathClamp",
    "CSSMathInvert",
    "CSSMathMax",
    "CSSMathMin",
    "CSSMathNegate",
    "CSSMathOperator",
    "CSSMathProduct",
    "CSSMathSum",
    "CSSMathValue",
    "CSSMatrixComponent",
    "CSSMatrixComponentOptions",
    "CSSMediaRule",
    "CSSNamespaceRule",
    "CSSNestingRule",
    "CSSNumberish",
    "CSSNumericArray",
    "CSSNumericBaseType",
    "CSSNumericType",
    "CSSNumericValue",
    "CSSOMString",
    "CSSPageRule",
    "CSSParserAtRule",
    "CSSParserBlock",
    "CSSParserDeclaration",
    "CSSParserFunction",
    "CSSParserOptions",
    "CSSParserQualifiedRule",
    "CSSParserRule",
    "CSSParserValue",
    "CSSPerspective",
    "CSSPositionValue",
    "CSSPropertyRule",
    "CSSPseudoElement",
    "CSSRGB",
    "CSSRotate",
    "CSSRule",
    "CSSRuleList",
    "CSSScale",
    "CSSScrollTimelineRule",
    "CSSSkew",
    "CSSSkewX",
    "CSSSkewY",
    "CSSStringSource",
    "CSSStyleDeclaration",
    "CSSStyleRule",
    "CSSStyleSheet",
    "CSSStyleSheetInit",
    "CSSStyleValue",
    "CSSSupportsRule",
    "CSSToken",
    "CSSTransformComponent",
    "CSSTransformValue",
    "CSSTransition",
    "CSSTranslate",
    "CSSUnitValue",
    "CSSUnparsedSegment",
    "CSSUnparsedValue",
    "CSSVariableReferenceValue",
    "CSSViewportRule",
    "Cache",
    "CacheQueryOptions",
    "CacheStorage",
    "CameraDevicePermissionDescriptor",
    "CanMakePaymentEvent",
    "CanMakePaymentEventInit",
    "CanPlayTypeResult",
    "CanTransferArrayBuffer",
    "CanvasCaptureMediaStreamTrack",
    "CanvasCompositing",
    "CanvasDirection",
    "CanvasDrawImage",
    "CanvasDrawPath",
    "CanvasFillRule",
    "CanvasFillStrokeStyles",
    "CanvasFilters",
    "CanvasFontKerning",
    "CanvasFontStretch",
    "CanvasFontVariantCaps",
    "CanvasGradient",
    "CanvasImageData",
    "CanvasImageSmoothing",
    "CanvasImageSource",
    "CanvasLineCap",
    "CanvasLineJoin",
    "CanvasPath",
    "CanvasPathDrawingStyles",
    "CanvasPattern",
    "CanvasRect",
    "CanvasRenderingContext2D",
    "CanvasRenderingContext2DSettings",
    "CanvasShadowStyles",
    "CanvasState",
    "CanvasText",
    "CanvasTextAlign",
    "CanvasTextBaseline",
    "CanvasTextDrawingStyles",
    "CanvasTextRendering",
    "CanvasTransform",
    "CanvasUserInterface",
    "Capabilities",
    "CaretPosition",
    "ChannelCountMode",
    "ChannelInterpretation",
    "ChannelMergerNode",
    "ChannelMergerOptions",
    "ChannelSplitterNode",
    "ChannelSplitterOptions",
    "CharacterData",
    "CharacteristicEventHandlers",
    "ChildBreakToken",
    "ChildDisplayType",
    "ChildNode",
    "Clamp",
    "Client",
    "ClientLifecycleState",
    "ClientQueryOptions",
    "ClientType",
    "Clients",
    "Clipboard",
    "ClipboardEvent",
    "ClipboardEventInit",
    "ClipboardItem",
    "ClipboardItemData",
    "ClipboardItemDataType",
    "ClipboardItemDelayedCallback",
    "ClipboardItemOptions",
    "ClipboardItems",
    "ClipboardPermissionDescriptor",
    "CloneAsUint8Array",
    "CloseEvent",
    "CloseEventInit",
    "CodecState",
    "CollectedClientData",
    "ColorGamut",
    "ColorSpaceConversion",
    "Comment",
    "CompileError",
    "CompositeOperation",
    "CompositeOperationOrAuto",
    "CompositionEvent",
    "CompositionEventInit",
    "CompressionStream",
    "ComputedEffectTiming",
    "ConnectionType",
    "ConstantSourceNode",
    "ConstantSourceOptions",
    "ConstrainBoolean",
    "ConstrainBooleanParameters",
    "ConstrainDOMString",
    "ConstrainDOMStringParameters",
    "ConstrainDouble",
    "ConstrainDoubleRange",
    "ConstrainPoint2D",
    "ConstrainPoint2DParameters",
    "ConstrainULong",
    "ConstrainULongRange",
    "ConstrainablePattern",
    "ConstraintError",
    "ConstraintSet",
    "Constraints",
    "ContactAddress",
    "ContactInfo",
    "ContactProperty",
    "ContactsManager",
    "ContactsSelectOptions",
    "ContainerBasedOffset",
    "ContentCategory",
    "ContentDescription",
    "ContentIndex",
    "ContentIndexEvent",
    "ContentIndexEventInit",
    "ConvertCoordinateOptions",
    "ConvertToInt",
    "ConvolverNode",
    "ConvolverOptions",
    "CookieChangeEvent",
    "CookieChangeEventInit",
    "CookieInit",
    "CookieList",
    "CookieListItem",
    "CookieSameSite",
    "CookieStore",
    "CookieStoreDeleteOptions",
    "CookieStoreGetOptions",
    "CookieStoreManager",
    "CountQueuingStrategy",
    "CrashReportBody",
    "Create a Credential",
    "Create a FederatedCredential from FederatedCredentialInit",
    "Create a PasswordCredential from PasswordCredentialData",
    "Create a PasswordCredential from an HTMLFormElement",
    "Create a Trusted Type",
    "Create a Trusted Type Policy",
    "CreateHTMLCallback",
    "CreateReadableByteStream",
    "CreateReadableStream",
    "CreateScriptCallback",
    "CreateScriptURLCallback",
    "CreateWritableStream",
    "Credential",
    "CredentialCreationOptions",
    "CredentialData",
    "CredentialMediationRequirement",
    "CredentialPropertiesOutput",
    "CredentialRequestOptions",
    "CredentialUserData",
    "CredentialsContainer",
    "CrossOriginIsolated",
    "CrossRealmTransformSendError",
    "Crypto",
    "CryptoKey",
    "CryptoKeyID",
    "CryptoKeyPair",
    "CursorCaptureConstraint",
    "CustomElementConstructor",
    "CustomElementRegistry",
    "CustomEvent",
    "CustomEventInit",
    "CustomStateSet",
    "DOMConfiguration",
    "DOMError",
    "DOMErrorHandler",
    "DOMException",
    "DOMHighResTimeStamp",
    "DOMImplementation",
    "DOMImplementationList",
    "DOMImplementationSource",
    "DOMLocator",
    "DOMMatrix",
    "DOMMatrix2DInit",
    "DOMMatrixInit",
    "DOMMatrixReadOnly",
    "DOMObject",
    "DOMParser",
    "DOMParserSupportedType",
    "DOMPoint",
    "DOMPointInit",
    "DOMPointReadOnly",
    "DOMQuad",
    "DOMQuadInit",
    "DOMRect",
    "DOMRectInit",
    "DOMRectList",
    "DOMRectReadOnly",
    "DOMString",
    "DOMStringList",
    "DOMStringMap",
    "DOMTimeStamp",
    "DOMTokenList",
    "DOMUserData",
    "DataCloneError",
    "DataCue",
    "DataError",
    "DataTransfer",
    "DataTransferItem",
    "DataTransferItemList",
    "DataView",
    "DatagramDuplexStream",
    "DatagramTransport",
    "DecodeErrorCallback",
    "DecodeErrorCallback()",
    "DecodeSuccessCallback",
    "DecodeSuccessCallback()",
    "DecompressionStream",
    "DedicatedWorkerGlobalScope",
    "Default",
    "DelayNode",
    "DelayOptions",
    "DeprecationReportBody",
    "DequeueValue",
    "DetectedBarcode",
    "DetectedFace",
    "DetectedText",
    "DeviceMotionEvent",
    "DeviceMotionEventAcceleration",
    "DeviceMotionEventAccelerationInit",
    "DeviceMotionEventInit",
    "DeviceMotionEventRotationRate",
    "DeviceMotionEventRotationRateInit",
    "DeviceOrientationEvent",
    "DeviceOrientationEventInit",
    "DevicePermissionDescriptor",
    "DevicePosture",
    "DirectionSetting",
    "DirectoryPickerOptions",
    "DisplayCaptureSurfaceType",
    "DisplayMediaStreamConstraints",
    "DistanceModelType",
    "Document",
    "DocumentAndElementEventHandlers",
    "DocumentFragment",
    "DocumentOrShadowRoot",
    "DocumentReadyState",
    "DocumentTimeline",
    "DocumentTimelineOptions",
    "DocumentType",
    "DoubleRange",
    "DragEvent",
    "DragEventInit",
    "DynamicsCompressorNode",
    "DynamicsCompressorOptions",
    "EcKeyAlgorithm",
    "EcKeyGenParams",
    "EcKeyImportParams",
    "EcdhKeyDeriveParams",
    "EcdsaParams",
    "Edge",
    "EffectCallback",
    "EffectTiming",
    "EffectiveConnectionType",
    "Element",
    "ElementBasedOffset",
    "ElementCSSInlineStyle",
    "ElementContentEditable",
    "ElementCreationOptions",
    "ElementDefinitionOptions",
    "ElementInternals",
    "EncodedAudioChunk",
    "EncodedAudioChunkInit",
    "EncodedAudioChunkMetadata",
    "EncodedAudioChunkOutputCallback",
    "EncodedAudioChunkType",
    "EncodedVideoChunk",
    "EncodedVideoChunkInit",
    "EncodedVideoChunkMetadata",
    "EncodedVideoChunkOutputCallback",
    "EncodedVideoChunkType",
    "EncodingError",
    "EndingType",
    "EnforceRange",
    "EnqueueValueWithSize",
    "Entity",
    "EntityReference",
    "ErrorCallback",
    "ErrorEvent",
    "ErrorEventInit",
    "EvalError",
    "Event",
    "EventCounts",
    "EventHandler",
    "EventHandlerNonNull",
    "EventInit",
    "EventListener",
    "EventListenerOptions",
    "EventModifierInit",
    "EventSource",
    "EventSourceInit",
    "EventTarget",
    "Exposed",
    "ExtendableCookieChangeEvent",
    "ExtendableCookieChangeEventInit",
    "ExtendableEvent",
    "ExtendableEventInit",
    "ExtendableMessageEvent",
    "ExtendableMessageEventInit",
    "External",
    "ExtractHighWaterMark",
    "ExtractSizeAlgorithm",
    "FaceDetector",
    "FaceDetectorOptions",
    "FakeWorkletGlobalScope",
    "FederatedCredential",
    "FederatedCredentialInit",
    "FederatedCredentialRequestOptions",
    "FetchEvent",
    "FetchEventInit",
    "File",
    "FileCallback",
    "FileList",
    "FilePickerAcceptType",
    "FilePickerOptions",
    "FilePropertyBag",
    "FileReader",
    "FileReaderSync",
    "FileSystem",
    "FileSystemCreateWritableOptions",
    "FileSystemDirectoryEntry",
    "FileSystemDirectoryHandle",
    "FileSystemDirectoryReader",
    "FileSystemEntriesCallback",
    "FileSystemEntry",
    "FileSystemEntryCallback",
    "FileSystemFileEntry",
    "FileSystemFileHandle",
    "FileSystemFlags",
    "FileSystemGetDirectoryOptions",
    "FileSystemGetFileOptions",
    "FileSystemHandle",
    "FileSystemHandleKind",
    "FileSystemHandlePermissionDescriptor",
    "FileSystemPermissionDescriptor",
    "FileSystemPermissionMode",
    "FileSystemRemoveOptions",
    "FileSystemWritableFileStream",
    "FileSystemWriteChunkType",
    "FillLightMode",
    "FillMode",
    "Float32Array",
    "Float64Array",
    "FlowControlType",
    "FocusEvent",
    "FocusEventInit",
    "FocusOptions",
    "FocusableAreaSearchMode",
    "FocusableAreasOption",
    "Font",
    "FontFace",
    "FontFaceDescriptors",
    "FontFaceLoadStatus",
    "FontFaceSet",
    "FontFaceSetLoadEvent",
    "FontFaceSetLoadEventInit",
    "FontFaceSetLoadStatus",
    "FontFaceSource",
    "FontManager",
    "FontMetadata",
    "FontMetrics",
    "FormData",
    "FormDataEntryValue",
    "FormDataEvent",
    "FormDataEventInit",
    "Formatter",
    "FragmentDirective",
    "FragmentResult",
    "FragmentResultOptions",
    "FrameRequestCallback",
    "FrameType",
    "FrozenArray",
    "FrozenArray<T>",
    "FullscreenNavigationUI",
    "FullscreenOptions",
    "Function",
    "FunctionStringCallback",
    "GPU",
    "GPUAdapter",
    "GPUAddressMode",
    "GPUBindGroup",
    "GPUBindGroupDescriptor",
    "GPUBindGroupEntry",
    "GPUBindGroupLayout",
    "GPUBindGroupLayoutDescriptor",
    "GPUBindGroupLayoutEntry",
    "GPUBindingResource",
    "GPUBlendComponent",
    "GPUBlendFactor",
    "GPUBlendOperation",
    "GPUBlendState",
    "GPUBuffer",
    "GPUBufferBinding",
    "GPUBufferBindingLayout",
    "GPUBufferBindingType",
    "GPUBufferDescriptor",
    "GPUBufferDynamicOffset",
    "GPUBufferUsage",
    "GPUBufferUsageFlags",
    "GPUCanvasCompositingAlphaMode",
    "GPUColor",
    "GPUColorDict",
    "GPUColorTargetState",
    "GPUColorWrite",
    "GPUColorWriteFlags",
    "GPUCommandBuffer",
    "GPUCommandBufferDescriptor",
    "GPUCommandEncoder",
    "GPUCommandEncoderDescriptor",
    "GPUCompareFunction",
    "GPUCompilationInfo",
    "GPUCompilationMessage",
    "GPUCompilationMessageType",
    "GPUComputePassDescriptor",
    "GPUComputePassEncoder",
    "GPUComputePipeline",
    "GPUComputePipelineDescriptor",
    "GPUCullMode",
    "GPUDepthBias",
    "GPUDepthStencilState",
    "GPUDevice",
    "GPUDeviceDescriptor",
    "GPUDeviceLostInfo",
    "GPUDeviceLostReason",
    "GPUError",
    "GPUErrorFilter",
    "GPUExtent3D",
    "GPUExtent3DDict",
    "GPUExternalTexture",
    "GPUExternalTextureBindingLayout",
    "GPUExternalTextureDescriptor",
    "GPUFeatureName",
    "GPUFilterMode",
    "GPUFlagsConstant",
    "GPUFragmentState",
    "GPUFrontFace",
    "GPUImageCopyBuffer",
    "GPUImageCopyExternalImage",
    "GPUImageCopyTexture",
    "GPUImageCopyTextureTagged",
    "GPUImageDataLayout",
    "GPUIndex32",
    "GPUIndexFormat",
    "GPUInputStepMode",
    "GPUIntegerCoordinate",
    "GPULoadOp",
    "GPUMapMode",
    "GPUMapModeFlags",
    "GPUMultisampleState",
    "GPUObjectBase",
    "GPUObjectDescriptorBase",
    "GPUOrigin2D",
    "GPUOrigin2DDict",
    "GPUOrigin3D",
    "GPUOrigin3DDict",
    "GPUOutOfMemoryError",
    "GPUPipelineBase",
    "GPUPipelineConstantValue",
    "GPUPipelineDescriptorBase",
    "GPUPipelineLayout",
    "GPUPipelineLayoutDescriptor",
    "GPUPipelineStatisticName",
    "GPUPowerPreference",
    "GPUPredefinedColorSpace",
    "GPUPresentationConfiguration",
    "GPUPresentationContext",
    "GPUPrimitiveState",
    "GPUPrimitiveTopology",
    "GPUProgrammablePassEncoder",
    "GPUProgrammableStage",
    "GPUQuerySet",
    "GPUQuerySetDescriptor",
    "GPUQueryType",
    "GPUQueue",
    "GPURenderBundle",
    "GPURenderBundleDescriptor",
    "GPURenderBundleEncoder",
    "GPURenderBundleEncoderDescriptor",
    "GPURenderEncoderBase",
    "GPURenderPassColorAttachment",
    "GPURenderPassDepthStencilAttachment",
    "GPURenderPassDescriptor",
    "GPURenderPassEncoder",
    "GPURenderPipeline",
    "GPURenderPipelineDescriptor",
    "GPURequestAdapterOptions",
    "GPUSampleMask",
    "GPUSampler",
    "GPUSamplerBindingLayout",
    "GPUSamplerBindingType",
    "GPUSamplerDescriptor",
    "GPUShaderModule",
    "GPUShaderModuleDescriptor",
    "GPUShaderStage",
    "GPUShaderStageFlags",
    "GPUSignedOffset32",
    "GPUSize32",
    "GPUSize64",
    "GPUStencilFaceState",
    "GPUStencilOperation",
    "GPUStencilValue",
    "GPUStorageTextureAccess",
    "GPUStorageTextureBindingLayout",
    "GPUStoreOp",
    "GPUSupportedFeatures",
    "GPUSupportedLimits",
    "GPUTexture",
    "GPUTextureAspect",
    "GPUTextureBindingLayout",
    "GPUTextureDescriptor",
    "GPUTextureDimension",
    "GPUTextureFormat",
    "GPUTextureSampleType",
    "GPUTextureUsage",
    "GPUTextureUsageFlags",
    "GPUTextureView",
    "GPUTextureViewDescriptor",
    "GPUTextureViewDimension",
    "GPUUncapturedErrorEvent",
    "GPUUncapturedErrorEventInit",
    "GPUValidationError",
    "GPUVertexAttribute",
    "GPUVertexBufferLayout",
    "GPUVertexFormat",
    "GPUVertexState",
    "GainNode",
    "GainOptions",
    "Gamepad",
    "GamepadButton",
    "GamepadEvent",
    "GamepadEventInit",
    "GamepadHand",
    "GamepadHapticActuator",
    "GamepadHapticActuatorType",
    "GamepadMappingType",
    "GamepadPose",
    "GamepadTouch",
    "GenerateTestReportParameters",
    "GenericTransformStream",
    "GeolocationCoordinates",
    "GeolocationPositionError",
    "GeolocationReadingValues",
    "GeolocationSensor",
    "GeolocationSensorOptions",
    "GeolocationSensorReading",
    "GeometryNode",
    "GeometryUtils",
    "Get Trusted Type compliant string",
    "GetAnimationsOptions",
    "GetNotificationOptions",
    "GetRootNodeOptions",
    "GetSVGDocument",
    "Global",
    "GlobalDescriptor",
    "GlobalEventHandlers",
    "GravityReadingValues",
    "GravitySensor",
    "GroupEffect",
    "Gyroscope",
    "GyroscopeLocalCoordinateSystem",
    "GyroscopeReadingValues",
    "GyroscopeSensorOptions",
    "HIDDeviceFilter",
    "HIDDeviceRequestOptions",
    "HIDUnitSystem",
    "HTMLAllCollection",
    "HTMLAnchorElement",
    "HTMLAreaElement",
    "HTMLAudioElement",
    "HTMLBRElement",
    "HTMLBaseElement",
    "HTMLBodyElement",
    "HTMLButtonElement",
    "HTMLCanvasElement",
    "HTMLCollection",
    "HTMLConstructor",
    "HTMLDListElement",
    "HTMLDataElement",
    "HTMLDataListElement",
    "HTMLDetailsElement",
    "HTMLDialogElement",
    "HTMLDirectoryElement",
    "HTMLDivElement",
    "HTMLElement",
    "HTMLEmbedElement",
    "HTMLFieldSetElement",
    "HTMLFontElement",
    "HTMLFormControlsCollection",
    "HTMLFormElement",
    "HTMLFrameElement",
    "HTMLFrameSetElement",
    "HTMLHRElement",
    "HTMLHeadElement",
    "HTMLHeadingElement",
    "HTMLHtmlElement",
    "HTMLHyperlinkElementUtils",
    "HTMLIFrameElement",
    "HTMLImageElement",
    "HTMLInputElement",
    "HTMLLIElement",
    "HTMLLabelElement",
    "HTMLLegendElement",
    "HTMLLinkElement",
    "HTMLMapElement",
    "HTMLMarqueeElement",
    "HTMLMediaElement",
    "HTMLMenuElement",
    "HTMLMetaElement",
    "HTMLMeterElement",
    "HTMLModElement",
    "HTMLOListElement",
    "HTMLObjectElement",
    "HTMLOptGroupElement",
    "HTMLOptionElement",
    "HTMLOptionsCollection",
    "HTMLOrSVGElement",
    "HTMLOrSVGImageElement",
    "HTMLOrSVGScriptElement",
    "HTMLOutputElement",
    "HTMLParagraphElement",
    "HTMLParamElement",
    "HTMLPictureElement",
    "HTMLPortalElement",
    "HTMLPreElement",
    "HTMLProgressElement",
    "HTMLQuoteElement",
    "HTMLScriptElement",
    "HTMLSelectElement",
    "HTMLSlotElement",
    "HTMLSourceElement",
    "HTMLSpanElement",
    "HTMLString",
    "HTMLStyleElement",
    "HTMLTableCaptionElement",
    "HTMLTableCellElement",
    "HTMLTableColElement",
    "HTMLTableElement",
    "HTMLTableRowElement",
    "HTMLTableSectionElement",
    "HTMLTemplateElement",
    "HTMLTextAreaElement",
    "HTMLTimeElement",
    "HTMLTitleElement",
    "HTMLTrackElement",
    "HTMLUListElement",
    "HTMLUnknownElement",
    "HTMLVideoElement",
    "HardwareAcceleration",
    "HashChangeEvent",
    "HashChangeEventInit",
    "HdrMetadataType",
    "Headers",
    "HeadersInit",
    "HierarchyRequestError",
    "Highlight",
    "HighlightRegistry",
    "HighlightsRegister",
    "History",
    "HkdfParams",
    "HmacImportParams",
    "HmacKeyAlgorithm",
    "HmacKeyGenParams",
    "IDBCursor",
    "IDBCursorDirection",
    "IDBCursorWithValue",
    "IDBDatabase",
    "IDBDatabaseInfo",
    "IDBFactory",
    "IDBIndex",
    "IDBIndexParameters",
    "IDBKeyRange",
    "IDBObjectStore",
    "IDBObjectStoreParameters",
    "IDBOpenDBRequest",
    "IDBRequest",
    "IDBRequestReadyState",
    "IDBTransaction",
    "IDBTransactionDurability",
    "IDBTransactionMode",
    "IDBTransactionOptions",
    "IDBVersionChangeEvent",
    "IDBVersionChangeEventInit",
    "IIRFilterNode",
    "IIRFilterOptions",
    "IdleDeadline",
    "IdleDetector",
    "IdleOptions",
    "IdleRequestCallback",
    "IdleRequestOptions",
    "ImageBitmap",
    "ImageBitmapOptions",
    "ImageBitmapRenderingContext",
    "ImageBitmapRenderingContextSettings",
    "ImageBitmapSource",
    "ImageBufferSource",
    "ImageCapture",
    "ImageData",
    "ImageDataSettings",
    "ImageDecodeOptions",
    "ImageDecodeResult",
    "ImageDecoder",
    "ImageDecoderInit",
    "ImageEncodeOptions",
    "ImageObject",
    "ImageOrientation",
    "ImageResource",
    "ImageSmoothingQuality",
    "ImageTrack",
    "ImageTrackList",
    "ImportExportKind",
    "InUseAttributeError",
    "Inactivate the recorder",
    "IndexSizeError",
    "InitializeReadableStream",
    "InitializeTransformStream",
    "InitializeWritableStream",
    "InnerHTML",
    "InputDeviceCapabilities",
    "InputDeviceInfo",
    "InputEvent",
    "InputEventInit",
    "Instance",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "IntegerPart",
    "InterestCohort",
    "IntersectionObserver",
    "IntersectionObserverCallback",
    "IntersectionObserverEntry",
    "IntersectionObserverEntryInit",
    "IntersectionObserverInit",
    "IntersectionObserverRegistration",
    "InterventionReportBody",
    "IntrinsicSizes",
    "IntrinsicSizesRequest",
    "IntrinsicSizesResultOptions",
    "InvalidAccessError",
    "InvalidCharacterError",
    "InvalidModificationError",
    "InvalidNodeTypeError",
    "InvalidStateError",
    "IsInputPendingOptions",
    "IsNonNegativeNumber",
    "IsReadableStreamLocked",
    "IsWritableStreamLocked",
    "Iterate over each dynamic binding offset",
    "IterationCompositeOperation",
    "JsonWebKey",
    "KeyAlgorithm",
    "KeyFormat",
    "KeySystemTrackConfiguration",
    "KeyType",
    "KeyUsage",
    "Keyboard",
    "KeyboardEvent",
    "KeyboardEventInit",
    "KeyboardLayoutMap",
    "KeyframeAnimationOptions",
    "KeyframeEffect",
    "KeyframeEffectOptions",
    "Landmark",
    "LandmarkType",
    "LargeBlobSupport",
    "LargestContentfulPaint",
    "LayoutChild",
    "LayoutConstraints",
    "LayoutConstraintsOptions",
    "LayoutEdgeSizes",
    "LayoutEdges",
    "LayoutFragment",
    "LayoutFragmentRequest",
    "LayoutFragmentRequestOrIntrinsicSizesRequest",
    "LayoutOptions",
    "LayoutShift",
    "LayoutShiftAttribution",
    "LayoutSizingMode",
    "LayoutWorkletGlobalScope",
    "LegacyFactoryFunction",
    "LegacyLenientSetter",
    "LegacyLenientThis",
    "LegacyNamespace",
    "LegacyNoInterfaceObject",
    "LegacyNullToEmptyString",
    "LegacyOverrideBuiltIns",
    "LegacyPlatformObjectGetOwnProperty",
    "LegacyTreatNonObjectAsNull",
    "LegacyUnenumerableNamedProperties",
    "LegacyUnforgeable",
    "LegacyWindowAlias",
    "LineAlignSetting",
    "LineAndPositionSetting",
    "LinearAccelerationReadingValues",
    "LinearAccelerationSensor",
    "LinkError",
    "LinkStyle",
    "Location",
    "Lock",
    "LockGrantedCallback",
    "LockInfo",
    "LockManager",
    "LockManagerSnapshot",
    "LockMode",
    "LockOptions",
    "Logger",
    "MIDIAccess",
    "MIDIConnectionEvent",
    "MIDIConnectionEventInit",
    "MIDIInput",
    "MIDIInputMap",
    "MIDIMessageEvent",
    "MIDIMessageEventInit",
    "MIDIOptions",
    "MIDIOutput",
    "MIDIOutputMap",
    "MIDIPort",
    "MIDIPortConnectionState",
    "MIDIPortDeviceState",
    "MIDIPortType",
    "ML",
    "MLAutoPad",
    "MLBatchNormalizationOptions",
    "MLBufferResourceView",
    "MLBufferView",
    "MLClampOptions",
    "MLContext",
    "MLContextOptions",
    "MLConv2dOptions",
    "MLDevicePreference",
    "MLFilterOperandLayout",
    "MLGemmOptions",
    "MLGraph",
    "MLGraphBuilder",
    "MLGruCellOptions",
    "MLGruOptions",
    "MLInput",
    "MLInputOperandLayout",
    "MLInstanceNormalizationOptions",
    "MLInterpolationMode",
    "MLLeakyReluOptions",
    "MLNamedInputs",
    "MLNamedOperands",
    "MLNamedOutputs",
    "MLOperand",
    "MLOperandDescriptor",
    "MLOperandType",
    "MLPadOptions",
    "MLPaddingMode",
    "MLPool2dOptions",
    "MLPowerPreference",
    "MLRecurrentNetworkActivation",
    "MLRecurrentNetworkDirection",
    "MLRecurrentNetworkWeightLayout",
    "MLReduceOptions",
    "MLResampleOptions",
    "MLResource",
    "MLSliceOptions",
    "MLSplitOptions",
    "MLSqueezeOptions",
    "MLTransposeOptions",
    "Magnetometer",
    "MagnetometerLocalCoordinateSystem",
    "MagnetometerReadingValues",
    "MagnetometerSensorOptions",
    "MathMLElement",
    "MediaCapabilities",
    "MediaCapabilitiesDecodingInfo",
    "MediaCapabilitiesEncodingInfo",
    "MediaCapabilitiesInfo",
    "MediaCapabilitiesKeySystemConfiguration",
    "MediaConfiguration",
    "MediaDecodingConfiguration",
    "MediaDecodingType",
    "MediaDeviceInfo",
    "MediaDeviceKind",
    "MediaDevices",
    "MediaElementAudioSourceNode",
    "MediaElementAudioSourceOptions",
    "MediaEncodingConfiguration",
    "MediaEncodingType",
    "MediaEncryptedEvent",
    "MediaEncryptedEventInit",
    "MediaError",
    "MediaImage",
    "MediaKeyMessageEvent",
    "MediaKeyMessageEventInit",
    "MediaKeyMessageType",
    "MediaKeySession",
    "MediaKeySessionClosedReason",
    "MediaKeySessionType",
    "MediaKeyStatus",
    "MediaKeyStatusMap",
    "MediaKeySystemAccess",
    "MediaKeySystemConfiguration",
    "MediaKeySystemMediaCapability",
    "MediaKeys",
    "MediaKeysRequirement",
    "MediaList",
    "MediaMetadata",
    "MediaMetadataInit",
    "MediaPositionState",
    "MediaProvider",
    "MediaQueryList",
    "MediaQueryListEvent",
    "MediaQueryListEventInit",
    "MediaRecorder",
    "MediaRecorderErrorEvent",
    "MediaRecorderErrorEventInit",
    "MediaRecorderOptions",
    "MediaSession",
    "MediaSessionAction",
    "MediaSessionActionDetails",
    "MediaSessionActionHandler",
    "MediaSessionPlaybackState",
    "MediaSettingsRange",
    "MediaSource",
    "MediaStream",
    "MediaStreamAudioDestinationNode",
    "MediaStreamAudioSourceNode",
    "MediaStreamAudioSourceOptions",
    "MediaStreamConstraints",
    "MediaStreamTrack",
    "MediaStreamTrackAudioSourceNode",
    "MediaStreamTrackAudioSourceOptions",
    "MediaStreamTrackEventInit",
    "MediaStreamTrackState",
    "MediaTrackCapabilities",
    "MediaTrackConstraintSet",
    "MediaTrackConstraints",
    "MediaTrackSettings",
    "MediaTrackSupportedConstraints",
    "Memory",
    "MemoryAttribution",
    "MemoryAttributionContainer",
    "MemoryBreakdownEntry",
    "MemoryDescriptor",
    "MemoryMeasurement",
    "MessageChannel",
    "MessageEvent",
    "MessageEventInit",
    "MessageEventSource",
    "MessagePort",
    "MeteringMode",
    "MidiPermissionDescriptor",
    "MimeType",
    "MimeTypeArray",
    "MockCameraConfiguration",
    "MockCaptureDeviceConfiguration",
    "MockCapturePromptResultConfiguration",
    "MockMicrophoneConfiguration",
    "MockSensor",
    "MockSensorConfiguration",
    "MockSensorReadingValues",
    "MockSensorType",
    "Module",
    "ModuleExportDescriptor",
    "ModuleImportDescriptor",
    "MouseEvent",
    "MouseEventInit",
    "MultiCacheQueryOptions",
    "MutationCallback",
    "MutationEvent",
    "MutationNameEvent",
    "MutationObserver",
    "MutationObserverInit",
    "MutationRecord",
    "NDEFMessage",
    "NDEFMessageInit",
    "NDEFMessageSource",
    "NDEFReader",
    "NDEFReadingEvent",
    "NDEFReadingEventInit",
    "NDEFRecord",
    "NDEFRecordInit",
    "NDEFScanOptions",
    "NDEFWriteOptions",
    "NameList",
    "NamedCurve",
    "NamedFlow",
    "NamedFlowMap",
    "NamedNodeMap",
    "NamespaceError",
    "NavigationEvent",
    "NavigationEventInit",
    "NavigationPreloadManager",
    "NavigationPreloadState",
    "NavigationType",
    "Navigator",
    "NavigatorConcurrentHardware",
    "NavigatorContentUtils",
    "NavigatorCookies",
    "NavigatorDeviceClass",
    "NavigatorDeviceMemory",
    "NavigatorFonts",
    "NavigatorGPU",
    "NavigatorID",
    "NavigatorLanguage",
    "NavigatorLocks",
    "NavigatorML",
    "NavigatorNetworkInformation",
    "NavigatorOnLine",
    "NavigatorPlugins",
    "NavigatorStorage",
    "NavigatorUA",
    "NavigatorUABrandVersion",
    "NavigatorUAData",
    "NavigatorUserMediaErrorCallback",
    "NavigatorUserMediaSuccessCallback",
    "NetworkError",
    "NetworkInformation",
    "NewObject",
    "NoModificationAllowedError",
    "Node",
    "NodeFilter",
    "NodeIterator",
    "NodeList",
    "NonDocumentTypeChildNode",
    "NonElementParentNode",
    "NotAllowedError",
    "NotFoundError",
    "NotReadableError",
    "NotSupportedError",
    "Notation",
    "Notification",
    "NotificationAction",
    "NotificationDirection",
    "NotificationEvent",
    "NotificationEventInit",
    "NotificationOptions",
    "NotificationPermission",
    "NotificationPermissionCallback",
    "OTPCredential",
    "OTPCredentialRequestOptions",
    "OTPCredentialTransportType",
    "ObservableArray",
    "ObservableArray<T>",
    "OfflineAudioCompletionEvent",
    "OfflineAudioCompletionEventInit",
    "OfflineAudioContext",
    "OfflineAudioContextOptions",
    "OffscreenCanvas",
    "OffscreenCanvasRenderingContext2D",
    "OffscreenRenderingContext",
    "OffscreenRenderingContextId",
    "OnBeforeUnloadEventHandler",
    "OnBeforeUnloadEventHandlerNonNull",
    "OnErrorEventHandler",
    "OnErrorEventHandlerNonNull",
    "OpenFilePickerOptions",
    "OperationError",
    "OptionalEffectTiming",
    "OrientationLockType",
    "OrientationSensor",
    "OrientationSensorLocalCoordinateSystem",
    "OrientationSensorOptions",
    "OrientationType",
    "OscillatorNode",
    "OscillatorOptions",
    "OscillatorType",
    "OverSampleType",
    "OverconstrainedError",
    "PackAndPostMessage",
    "PackAndPostMessageHandlingError",
    "PageTransitionEvent",
    "PageTransitionEventInit",
    "PaintRenderingContext2D",
    "PaintRenderingContext2DSettings",
    "PaintSize",
    "PaintWorkletGlobalScope",
    "PannerNode",
    "PannerOptions",
    "PanningModelType",
    "ParentNode",
    "ParityType",
    "PasswordCredential",
    "PasswordCredentialData",
    "PasswordCredentialInit",
    "Path2D",
    "PaymentComplete",
    "PaymentCurrencyAmount",
    "PaymentDetailsBase",
    "PaymentDetailsInit",
    "PaymentDetailsModifier",
    "PaymentDetailsUpdate",
    "PaymentHandlerResponse",
    "PaymentInstrument",
    "PaymentInstruments",
    "PaymentItem",
    "PaymentManager",
    "PaymentMethodChangeEvent",
    "PaymentMethodChangeEventInit",
    "PaymentMethodData",
    "PaymentRequest",
    "PaymentRequestDetailsUpdate",
    "PaymentRequestEvent",
    "PaymentRequestEventInit",
    "PaymentRequestUpdateEvent",
    "PaymentRequestUpdateEventInit",
    "PaymentResponse",
    "PaymentValidationErrors",
    "Pbkdf2Params",
    "PeekQueueValue",
    "Performance",
    "PerformanceElementTiming",
    "PerformanceEntry",
    "PerformanceEntryList",
    "PerformanceEventTiming",
    "PerformanceFrameTiming",
    "PerformanceLongTaskTiming",
    "PerformanceMark",
    "PerformanceMarkOptions",
    "PerformanceMeasure",
    "PerformanceMeasureOptions",
    "PerformanceNavigation",
    "PerformanceNavigationTiming",
    "PerformanceObserver",
    "PerformanceObserverCallback",
    "PerformanceObserverCallbackOptions",
    "PerformanceObserverEntryList",
    "PerformanceObserverInit",
    "PerformancePaintTiming",
    "PerformanceResourceTiming",
    "PerformanceServerTiming",
    "PerformanceTiming",
    "PeriodicSyncEvent",
    "PeriodicSyncEventInit",
    "PeriodicSyncManager",
    "PeriodicWave",
    "PeriodicWaveConstraints",
    "PeriodicWaveOptions",
    "PermissionDescriptor",
    "PermissionName",
    "PermissionSetParameters",
    "PermissionState",
    "PermissionStatus",
    "Permissions",
    "PermissionsPolicy",
    "PermissionsPolicyViolationReportBody",
    "PhotoCapabilities",
    "PhotoSettings",
    "PictureInPictureEvent",
    "PictureInPictureEventInit",
    "PictureInPictureWindow",
    "PixelFormat",
    "PlaneInit",
    "PlaneLayout",
    "PlaybackDirection",
    "Plugin",
    "PluginArray",
    "Point2D",
    "PointerEvent",
    "PointerEventInit",
    "PopStateEvent",
    "PopStateEventInit",
    "PortalActivateEvent",
    "PortalActivateEventInit",
    "PortalActivateOptions",
    "PortalHost",
    "PositionAlignSetting",
    "PositionOptions",
    "PostMessageOptions",
    "PredefinedColorSpace",
    "PremultiplyAlpha",
    "Prepare the script URL and text",
    "Presentation",
    "PresentationAvailability",
    "PresentationConnection",
    "PresentationConnectionAvailableEvent",
    "PresentationConnectionAvailableEventInit",
    "PresentationConnectionCloseEvent",
    "PresentationConnectionCloseEventInit",
    "PresentationConnectionCloseReason",
    "PresentationConnectionList",
    "PresentationConnectionState",
    "PresentationReceiver",
    "PresentationRequest",
    "PresentationStyle",
    "Prevent Silent Access",
    "Printer",
    "Process value with a default policy",
    "ProcessingInstruction",
    "Profiler",
    "ProfilerFrame",
    "ProfilerInitOptions",
    "ProfilerResource",
    "ProfilerSample",
    "ProfilerStack",
    "ProfilerTrace",
    "ProgressEvent",
    "ProgressEventInit",
    "Promise",
    "Promise<T>",
    "PromiseRejectionEvent",
    "PromiseRejectionEventInit",
    "Promises",
    "PropertyDefinition",
    "ProximityReadingValues",
    "ProximitySensor",
    "PublicKeyCredential",
    "PublicKeyCredentialCreationOptions",
    "PublicKeyCredentialDescriptor",
    "PublicKeyCredentialEntity",
    "PublicKeyCredentialParameters",
    "PublicKeyCredentialRequestOptions",
    "PublicKeyCredentialRpEntity",
    "PublicKeyCredentialType",
    "PublicKeyCredentialUserEntity",
    "PushEncryptionKeyName",
    "PushEvent",
    "PushEventInit",
    "PushManager",
    "PushMessageData",
    "PushPermissionDescriptor",
    "PushPermissionState",
    "PushSubscription",
    "PushSubscriptionChangeEvent",
    "PushSubscriptionChangeEventInit",
    "PushSubscriptionJSON",
    "PushSubscriptionOptions",
    "PushSubscriptionOptionsInit",
    "PutForwards",
    "QueryOptions",
    "QueuingStrategy",
    "QueuingStrategyInit",
    "QueuingStrategySize",
    "QuotaExceededError",
    "RTCAnswerOptions",
    "RTCAudioHandlerStats",
    "RTCAudioReceiverStats",
    "RTCAudioSenderStats",
    "RTCAudioSourceStats",
    "RTCBundlePolicy",
    "RTCCertificate",
    "RTCCertificateExpiration",
    "RTCCertificateStats",
    "RTCCodecStats",
    "RTCCodecType",
    "RTCConfiguration",
    "RTCDTMFSender",
    "RTCDTMFToneChangeEvent",
    "RTCDTMFToneChangeEventInit",
    "RTCDataChannel",
    "RTCDataChannelEvent",
    "RTCDataChannelEventInit",
    "RTCDataChannelInit",
    "RTCDataChannelState",
    "RTCDataChannelStats",
    "RTCDtlsFingerprint",
    "RTCDtlsTransport",
    "RTCDtlsTransportState",
    "RTCEncodedAudioFrame",
    "RTCEncodedAudioFrameMetadata",
    "RTCEncodedVideoFrame",
    "RTCEncodedVideoFrameMetadata",
    "RTCEncodedVideoFrameType",
    "RTCError",
    "RTCErrorDetailType",
    "RTCErrorEvent",
    "RTCErrorEventInit",
    "RTCErrorInit",
    "RTCIceCandidate",
    "RTCIceCandidateInit",
    "RTCIceCandidatePair",
    "RTCIceCandidatePairStats",
    "RTCIceCandidateStats",
    "RTCIceCandidateType",
    "RTCIceComponent",
    "RTCIceConnectionState",
    "RTCIceCredentialType",
    "RTCIceGatherOptions",
    "RTCIceGathererState",
    "RTCIceGatheringState",
    "RTCIceParameters",
    "RTCIceProtocol",
    "RTCIceRole",
    "RTCIceServer",
    "RTCIceServerStats",
    "RTCIceTcpCandidateType",
    "RTCIceTransport",
    "RTCIceTransportPolicy",
    "RTCIceTransportState",
    "RTCInboundRtpStreamStats",
    "RTCInsertableStreams",
    "RTCLocalSessionDescriptionInit",
    "RTCMediaHandlerStats",
    "RTCMediaSourceStats",
    "RTCMediaStreamStats",
    "RTCOfferAnswerOptions",
    "RTCOfferOptions",
    "RTCOutboundRtpStreamStats",
    "RTCPeerConnection",
    "RTCPeerConnectionErrorCallback",
    "RTCPeerConnectionIceErrorEvent",
    "RTCPeerConnectionIceErrorEventInit",
    "RTCPeerConnectionIceEvent",
    "RTCPeerConnectionIceEventInit",
    "RTCPeerConnectionState",
    "RTCPeerConnectionStats",
    "RTCPriorityType",
    "RTCQualityLimitationReason",
    "RTCReceivedRtpStreamStats",
    "RTCReceiverAudioTrackAttachmentStats",
    "RTCReceiverVideoTrackAttachmentStats",
    "RTCRemoteInboundRtpStreamStats",
    "RTCRemoteOutboundRtpStreamStats",
    "RTCRtcpMuxPolicy",
    "RTCRtcpParameters",
    "RTCRtpCapabilities",
    "RTCRtpCodecCapability",
    "RTCRtpCodecParameters",
    "RTCRtpCodingParameters",
    "RTCRtpContributingSource",
    "RTCRtpContributingSourceStats",
    "RTCRtpDecodingParameters",
    "RTCRtpEncodingParameters",
    "RTCRtpHeaderExtensionCapability",
    "RTCRtpHeaderExtensionParameters",
    "RTCRtpParameters",
    "RTCRtpReceiveParameters",
    "RTCRtpReceiver",
    "RTCRtpScriptTransform",
    "RTCRtpScriptTransformer",
    "RTCRtpSendParameters",
    "RTCRtpSender",
    "RTCRtpStreamStats",
    "RTCRtpSynchronizationSource",
    "RTCRtpTransceiver",
    "RTCRtpTransceiverDirection",
    "RTCRtpTransceiverInit",
    "RTCRtpTransceiverStats",
    "RTCRtpTransform",
    "RTCSctpTransport",
    "RTCSctpTransportState",
    "RTCSctpTransportStats",
    "RTCSdpType",
    "RTCSenderAudioTrackAttachmentStats",
    "RTCSenderVideoTrackAttachmentStats",
    "RTCSentRtpStreamStats",
    "RTCSessionDescription",
    "RTCSessionDescriptionCallback",
    "RTCSessionDescriptionInit",
    "RTCSignalingState",
    "RTCStats",
    "RTCStatsIceCandidatePairState",
    "RTCStatsReport",
    "RTCStatsType",
    "RTCTrackEvent",
    "RTCTrackEventInit",
    "RTCTransformEvent",
    "RTCTransportStats",
    "RTCVideoHandlerStats",
    "RTCVideoReceiverStats",
    "RTCVideoSenderStats",
    "RTCVideoSourceStats",
    "RadioNodeList",
    "Range",
    "RangeError",
    "RangeException",
    "ReadOnlyError",
    "ReadOptions",
    "ReadableByteStreamController",
    "ReadableByteStreamControllerCallPullIfNeeded",
    "ReadableByteStreamControllerClearAlgorithms",
    "ReadableByteStreamControllerClearPendingPullIntos",
    "ReadableByteStreamControllerClose",
    "ReadableByteStreamControllerCommitPullIntoDescriptor",
    "ReadableByteStreamControllerConvertPullIntoDescriptor",
    "ReadableByteStreamControllerEnqueue",
    "ReadableByteStreamControllerEnqueueChunkToQueue",
    "ReadableByteStreamControllerError",
    "ReadableByteStreamControllerFillHeadPullIntoDescriptor",
    "ReadableByteStreamControllerFillPullIntoDescriptorFromQueue",
    "ReadableByteStreamControllerGetBYOBRequest",
    "ReadableByteStreamControllerGetDesiredSize",
    "ReadableByteStreamControllerHandleQueueDrain",
    "ReadableByteStreamControllerInvalidateBYOBRequest",
    "ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue",
    "ReadableByteStreamControllerPullInto",
    "ReadableByteStreamControllerRespond",
    "ReadableByteStreamControllerRespondInClosedState",
    "ReadableByteStreamControllerRespondInReadableState",
    "ReadableByteStreamControllerRespondInternal",
    "ReadableByteStreamControllerRespondWithNewView",
    "ReadableByteStreamControllerShiftPendingPullInto",
    "ReadableByteStreamControllerShouldCallPull",
    "ReadableByteStreamTee",
    "ReadableStream",
    "ReadableStreamAddReadIntoRequest",
    "ReadableStreamAddReadRequest",
    "ReadableStreamBYOBReadResult",
    "ReadableStreamBYOBReader",
    "ReadableStreamBYOBReaderRead",
    "ReadableStreamBYOBRequest",
    "ReadableStreamCancel",
    "ReadableStreamClose",
    "ReadableStreamController",
    "ReadableStreamDefaultController",
    "ReadableStreamDefaultControllerCallPullIfNeeded",
    "ReadableStreamDefaultControllerCanCloseOrEnqueue",
    "ReadableStreamDefaultControllerClearAlgorithms",
    "ReadableStreamDefaultControllerClose",
    "ReadableStreamDefaultControllerEnqueue",
    "ReadableStreamDefaultControllerError",
    "ReadableStreamDefaultControllerGetDesiredSize",
    "ReadableStreamDefaultControllerHasBackpressure",
    "ReadableStreamDefaultControllerShouldCallPull",
    "ReadableStreamDefaultReadResult",
    "ReadableStreamDefaultReader",
    "ReadableStreamDefaultReaderRead",
    "ReadableStreamDefaultTee",
    "ReadableStreamError",
    "ReadableStreamFulfillReadIntoRequest",
    "ReadableStreamFulfillReadRequest",
    "ReadableStreamGenericReader",
    "ReadableStreamGetNumReadIntoRequests",
    "ReadableStreamGetNumReadRequests",
    "ReadableStreamGetReaderOptions",
    "ReadableStreamHasBYOBReader",
    "ReadableStreamHasDefaultReader",
    "ReadableStreamIteratorOptions",
    "ReadableStreamPipeTo",
    "ReadableStreamReader",
    "ReadableStreamReaderGenericCancel",
    "ReadableStreamReaderGenericInitialize",
    "ReadableStreamReaderGenericRelease",
    "ReadableStreamReaderMode",
    "ReadableStreamTee",
    "ReadableStreamType",
    "ReadableWritablePair",
    "ReceiveStream",
    "RecordingState",
    "RedEyeReduction",
    "ReferenceError",
    "ReferrerPolicy",
    "Region",
    "RegistrationOptions",
    "RelatedApplication",
    "RelativeOrientationReadingValues",
    "RelativeOrientationSensor",
    "RemotePlayback",
    "RemotePlaybackAvailabilityCallback",
    "RemotePlaybackState",
    "RenderingContext",
    "Replaceable",
    "Report",
    "ReportBody",
    "ReportList",
    "ReportingObserver",
    "ReportingObserverCallback",
    "ReportingObserverOptions",
    "Request",
    "Request a Credential",
    "RequestCache",
    "RequestCredentials",
    "RequestDestination",
    "RequestDeviceOptions",
    "RequestInfo",
    "RequestInit",
    "RequestMode",
    "RequestRedirect",
    "ResetQueue",
    "ResidentKeyRequirement",
    "ResizeObservation",
    "ResizeObserver",
    "ResizeObserverBoxOptions",
    "ResizeObserverCallback",
    "ResizeObserverEntry",
    "ResizeObserverOptions",
    "ResizeObserverSize",
    "ResizeQuality",
    "Response",
    "ResponseInit",
    "ResponseType",
    "RotationMatrixType",
    "RsaHashedImportParams",
    "RsaHashedKeyAlgorithm",
    "RsaHashedKeyGenParams",
    "RsaKeyAlgorithm",
    "RsaKeyGenParams",
    "RsaOaepParams",
    "RsaOtherPrimesInfo",
    "RsaPssParams",
    "RuntimeError",
    "SFrameTransform",
    "SFrameTransformErrorEvent",
    "SFrameTransformErrorEventInit",
    "SFrameTransformErrorEventType",
    "SFrameTransformOptions",
    "SFrameTransformRole",
    "SVGAElement",
    "SVGAngle",
    "SVGAnimatedAngle",
    "SVGAnimatedBoolean",
    "SVGAnimatedEnumeration",
    "SVGAnimatedInteger",
    "SVGAnimatedLength",
    "SVGAnimatedLengthList",
    "SVGAnimatedNumber",
    "SVGAnimatedNumberList",
    "SVGAnimatedPoints",
    "SVGAnimatedPreserveAspectRatio",
    "SVGAnimatedRect",
    "SVGAnimatedString",
    "SVGAnimatedTransformList",
    "SVGBoundingBoxOptions",
    "SVGCircleElement",
    "SVGClipPathElement",
    "SVGComponentTransferFunctionElement",
    "SVGDefsElement",
    "SVGDescElement",
    "SVGElement",
    "SVGElementInstance",
    "SVGEllipseElement",
    "SVGFEBlendElement",
    "SVGFEColorMatrixElement",
    "SVGFEComponentTransferElement",
    "SVGFECompositeElement",
    "SVGFEConvolveMatrixElement",
    "SVGFEDiffuseLightingElement",
    "SVGFEDisplacementMapElement",
    "SVGFEDistantLightElement",
    "SVGFEDropShadowElement",
    "SVGFEFloodElement",
    "SVGFEFuncAElement",
    "SVGFEFuncBElement",
    "SVGFEFuncGElement",
    "SVGFEFuncRElement",
    "SVGFEGaussianBlurElement",
    "SVGFEImageElement",
    "SVGFEMergeElement",
    "SVGFEMergeNodeElement",
    "SVGFEMorphologyElement",
    "SVGFEOffsetElement",
    "SVGFEPointLightElement",
    "SVGFESpecularLightingElement",
    "SVGFESpotLightElement",
    "SVGFETileElement",
    "SVGFETurbulenceElement",
    "SVGFilterElement",
    "SVGFilterPrimitiveStandardAttributes",
    "SVGFitToViewBox",
    "SVGForeignObjectElement",
    "SVGGElement",
    "SVGGeometryElement",
    "SVGGradientElement",
    "SVGGraphicsElement",
    "SVGImageElement",
    "SVGLength",
    "SVGLengthList",
    "SVGLineElement",
    "SVGLinearGradientElement",
    "SVGMarkerElement",
    "SVGMaskElement",
    "SVGMatrix",
    "SVGMetadataElement",
    "SVGNumber",
    "SVGNumberList",
    "SVGPathElement",
    "SVGPatternElement",
    "SVGPoint",
    "SVGPointList",
    "SVGPolygonElement",
    "SVGPolylineElement",
    "SVGPreserveAspectRatio",
    "SVGRadialGradientElement",
    "SVGRect",
    "SVGRectElement",
    "SVGSVGElement",
    "SVGScriptElement",
    "SVGStopElement",
    "SVGStringList",
    "SVGStyleElement",
    "SVGSwitchElement",
    "SVGSymbolElement",
    "SVGTSpanElement",
    "SVGTests",
    "SVGTextContentElement",
    "SVGTextElement",
    "SVGTextPathElement",
    "SVGTextPositioningElement",
    "SVGTitleElement",
    "SVGTransform",
    "SVGTransformList",
    "SVGURIReference",
    "SVGUnitTypes",
    "SVGUnknownElement",
    "SVGUseElement",
    "SVGUseElementShadowRoot",
    "SVGViewElement",
    "SVGZoomAndPan",
    "SameObject",
    "Sanitizer",
    "SanitizerConfig",
    "SanitizerInput",
    "SaveFilePickerOptions",
    "Scheduler",
    "SchedulerPostTaskCallback",
    "SchedulerPostTaskOptions",
    "Scheduling",
    "Screen",
    "ScreenIdleState",
    "ScreenOrientation",
    "ScriptProcessorNode",
    "ScriptString",
    "ScriptURLString",
    "ScrollBehavior",
    "ScrollDirection",
    "ScrollIntoViewOptions",
    "ScrollLogicalPosition",
    "ScrollOptions",
    "ScrollRestoration",
    "ScrollSetting",
    "ScrollTimeline",
    "ScrollTimelineAutoKeyword",
    "ScrollTimelineOffset",
    "ScrollTimelineOptions",
    "ScrollToOptions",
    "SecureContext",
    "SecurityError",
    "SecurityPolicyViolationEvent",
    "SecurityPolicyViolationEventDisposition",
    "SecurityPolicyViolationEventInit",
    "SelectionMode",
    "SendStream",
    "SendStreamParameters",
    "Sensor",
    "SensorErrorEvent",
    "SensorErrorEventInit",
    "SensorOptions",
    "SequenceEffect",
    "SerialInputSignals",
    "SerialOptions",
    "SerialOutputSignals",
    "SerialPort",
    "SerialPortFilter",
    "SerialPortInfo",
    "SerialPortRequestOptions",
    "Serializable",
    "ServiceEventHandlers",
    "ServiceWorker",
    "ServiceWorkerContainer",
    "ServiceWorkerGlobalScope",
    "ServiceWorkerRegistration",
    "ServiceWorkerState",
    "ServiceWorkerUpdateViaCache",
    "SetUpCrossRealmTransformReadable",
    "SetUpCrossRealmTransformWritable",
    "SetUpReadableByteStreamController",
    "SetUpReadableByteStreamControllerFromUnderlyingSource",
    "SetUpReadableStreamBYOBReader",
    "SetUpReadableStreamDefaultController",
    "SetUpReadableStreamDefaultControllerFromUnderlyingSource",
    "SetUpReadableStreamDefaultReader",
    "SetUpTransformStreamDefaultController",
    "SetUpTransformStreamDefaultControllerFromTransformer",
    "SetUpWritableStreamDefaultController",
    "SetUpWritableStreamDefaultControllerFromUnderlyingSink",
    "SetUpWritableStreamDefaultWriter",
    "Settings",
    "ShadowAnimation",
    "ShadowRoot",
    "ShadowRootInit",
    "ShadowRootMode",
    "ShareData",
    "ShareTarget",
    "ShareTargetParams",
    "SharedWorker",
    "SharedWorkerGlobalScope",
    "Should Trusted Type policy creation be blocked by Content Security Policy?",
    "Should sink type mismatch violation be blocked by Content Security Policy?",
    "SlotAssignmentMode",
    "Slottable",
    "SmallCryptoKeyID",
    "SourceBuffer",
    "SourceBufferList",
    "SpatialNavigationDirection",
    "SpatialNavigationSearchOptions",
    "SpeechGrammar",
    "SpeechGrammarList",
    "SpeechRecognition",
    "SpeechRecognitionAlternative",
    "SpeechRecognitionErrorCode",
    "SpeechRecognitionErrorEvent",
    "SpeechRecognitionErrorEventInit",
    "SpeechRecognitionEvent",
    "SpeechRecognitionEventInit",
    "SpeechRecognitionResult",
    "SpeechRecognitionResultList",
    "SpeechSynthesis",
    "SpeechSynthesisErrorCode",
    "SpeechSynthesisErrorEvent",
    "SpeechSynthesisErrorEventInit",
    "SpeechSynthesisEvent",
    "SpeechSynthesisEventInit",
    "SpeechSynthesisUtterance",
    "SpeechSynthesisVoice",
    "StartInDirectory",
    "StatefulAnimator",
    "StatelessAnimator",
    "StaticRange",
    "StaticRangeInit",
    "StereoPannerNode",
    "StereoPannerOptions",
    "Storage",
    "StorageEstimate",
    "StorageEvent",
    "StorageEventInit",
    "StorageManager",
    "Store a Credential",
    "StreamAbortInfo",
    "StreamPipeOptions",
    "StringContext",
    "StructuredClone",
    "StructuredDeserialize",
    "StructuredDeserializeWithTransfer",
    "StructuredSerialize",
    "StructuredSerializeForStorage",
    "StructuredSerializeInternal",
    "StructuredSerializeWithTransfer",
    "StylePropertyMap",
    "StylePropertyMapReadOnly",
    "StyleSheet",
    "StyleSheetList",
    "SubmitEvent",
    "SubmitEventInit",
    "SubtleCrypto",
    "SvcOutputMetadata",
    "SyncEvent",
    "SyncEventInit",
    "SyncManager",
    "SyntaxError",
    "Table",
    "TableDescriptor",
    "TableKind",
    "TaskAttributionTiming",
    "TaskController",
    "TaskPriority",
    "TaskPriorityChangeEvent",
    "TaskPriorityChangeEventInit",
    "TaskSignal",
    "Text",
    "TextDecodeOptions",
    "TextDecoder",
    "TextDecoderCommon",
    "TextDecoderOptions",
    "TextDecoderStream",
    "TextDetector",
    "TextEncoder",
    "TextEncoderCommon",
    "TextEncoderEncodeIntoResult",
    "TextEncoderStream",
    "TextMetrics",
    "TextTrack",
    "TextTrackCue",
    "TextTrackCueList",
    "TextTrackKind",
    "TextTrackList",
    "TextTrackMode",
    "The steps to deserialize a GPUDevice object",
    "The steps to serialize a GPUDevice object",
    "TimeRanges",
    "TimelinePhase",
    "TimeoutError",
    "TimerHandler",
    "TokenBinding",
    "TokenBindingStatus",
    "Touch",
    "TouchEvent",
    "TouchEventInit",
    "TouchList",
    "TouchType",
    "TrackEvent",
    "TrackEventInit",
    "TrackingExData",
    "TrackingExResult",
    "TransactionInactiveError",
    "TransferArrayBuffer",
    "TransferFunction",
    "Transferable",
    "TransformStream",
    "TransformStreamDefaultController",
    "TransformStreamDefaultControllerClearAlgorithms",
    "TransformStreamDefaultControllerEnqueue",
    "TransformStreamDefaultControllerError",
    "TransformStreamDefaultControllerPerformTransform",
    "TransformStreamDefaultControllerTerminate",
    "TransformStreamDefaultSinkAbortAlgorithm",
    "TransformStreamDefaultSinkCloseAlgorithm",
    "TransformStreamDefaultSinkWriteAlgorithm",
    "TransformStreamDefaultSourcePullAlgorithm",
    "TransformStreamError",
    "TransformStreamErrorWritableAndUnblockWrite",
    "TransformStreamSetBackpressure",
    "Transformer",
    "TransformerFlushCallback",
    "TransformerStartCallback",
    "TransformerTransformCallback",
    "TransitionEvent",
    "TransitionEventInit",
    "TreeWalker",
    "TrustedHTML",
    "TrustedScript",
    "TrustedScriptURL",
    "TrustedTimerHandler",
    "TrustedType",
    "TrustedTypePolicy",
    "TrustedTypePolicyFactory",
    "TrustedTypePolicyOptions",
    "TypeError",
    "TypeInfo",
    "TypeMismatchError",
    "UADataValues",
    "UALowEntropyJSON",
    "UIEvent",
    "UIEventInit",
    "ULongRange",
    "URIError",
    "URL",
    "URLMismatchError",
    "URLSearchParams",
    "USB",
    "USBAlternateInterface",
    "USBConfiguration",
    "USBConnectionEvent",
    "USBConnectionEventInit",
    "USBControlTransferParameters",
    "USBDevice",
    "USBDeviceFilter",
    "USBDeviceRequestOptions",
    "USBDirection",
    "USBEndpoint",
    "USBEndpointType",
    "USBInTransferResult",
    "USBInterface",
    "USBIsochronousInTransferPacket",
    "USBIsochronousInTransferResult",
    "USBIsochronousOutTransferPacket",
    "USBIsochronousOutTransferResult",
    "USBOutTransferResult",
    "USBPermissionDescriptor",
    "USBPermissionResult",
    "USBPermissionStorage",
    "USBRecipient",
    "USBRequestType",
    "USBTransferStatus",
    "USVString",
    "UUID",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "UncalibratedMagnetometer",
    "UncalibratedMagnetometerReadingValues",
    "UnderlyingSink",
    "UnderlyingSinkAbortCallback",
    "UnderlyingSinkCloseCallback",
    "UnderlyingSinkStartCallback",
    "UnderlyingSinkWriteCallback",
    "UnderlyingSource",
    "UnderlyingSourceCancelCallback",
    "UnderlyingSourcePullCallback",
    "UnderlyingSourceStartCallback",
    "UnidirectionalStreamsTransport",
    "UnknownError",
    "Unscopable",
    "UserDataHandler",
    "UserIdleState",
    "UserVerificationRequirement",
    "UvmEntries",
    "UvmEntry",
    "VTTCue",
    "VTTRegion",
    "Validate encoder bind groups",
    "ValidityState",
    "ValidityStateFlags",
    "ValueEvent",
    "ValueEventInit",
    "ValueType",
    "VersionError",
    "VibratePattern",
    "VideoConfiguration",
    "VideoDecoder",
    "VideoDecoderConfig",
    "VideoDecoderInit",
    "VideoDecoderSupport",
    "VideoEncoder",
    "VideoEncoderConfig",
    "VideoEncoderEncodeOptions",
    "VideoEncoderInit",
    "VideoEncoderSupport",
    "VideoFacingModeEnum",
    "VideoFrame",
    "VideoFrameCopyToOptions",
    "VideoFrameInit",
    "VideoFrameMetadata",
    "VideoFrameOutputCallback",
    "VideoFramePlaneInit",
    "VideoFrameRect",
    "VideoFrameRequestCallback",
    "VideoKindEnum",
    "VideoResizeModeEnum",
    "VideoTrack",
    "VideoTrackList",
    "VisibilityState",
    "VisualViewport",
    "VoidFunction",
    "WakeLock",
    "WakeLockSentinel",
    "WakeLockType",
    "WatchAdvertisementsOptions",
    "WaveShaperNode",
    "WaveShaperOptions",
    "WebAssembly",
    "WebAssemblyInstantiatedSource",
    "WebCodecsErrorCallback",
    "WebKitCSSMatrix",
    "WebSocket",
    "WebTransport",
    "WebTransportCloseInfo",
    "WebTransportOptions",
    "WebTransportState",
    "WebTransportStats",
    "WellKnownDirectory",
    "WheelEvent",
    "WheelEventInit",
    "Window",
    "WindowClient",
    "WindowEventHandlers",
    "WindowLocalStorage",
    "WindowOrWorkerGlobalScope",
    "WindowPostMessageOptions",
    "WindowProxy",
    "WindowSessionStorage",
    "Worker",
    "WorkerGlobalScope",
    "WorkerLocation",
    "WorkerNavigator",
    "WorkerOptions",
    "WorkerType",
    "Worklet",
    "WorkletAnimation",
    "WorkletAnimationEffect",
    "WorkletGlobalScope",
    "WorkletGroupEffect",
    "WorkletOptions",
    "WritableStream",
    "WritableStreamAbort",
    "WritableStreamAddWriteRequest",
    "WritableStreamClose",
    "WritableStreamCloseQueuedOrInFlight",
    "WritableStreamDealWithRejection",
    "WritableStreamDefaultController",
    "WritableStreamDefaultControllerAdvanceQueueIfNeeded",
    "WritableStreamDefaultControllerClearAlgorithms",
    "WritableStreamDefaultControllerClose",
    "WritableStreamDefaultControllerError",
    "WritableStreamDefaultControllerErrorIfNeeded",
    "WritableStreamDefaultControllerGetBackpressure",
    "WritableStreamDefaultControllerGetChunkSize",
    "WritableStreamDefaultControllerGetDesiredSize",
    "WritableStreamDefaultControllerProcessClose",
    "WritableStreamDefaultControllerProcessWrite",
    "WritableStreamDefaultControllerWrite",
    "WritableStreamDefaultWriter",
    "WritableStreamDefaultWriterAbort",
    "WritableStreamDefaultWriterClose",
    "WritableStreamDefaultWriterCloseWithErrorPropagation",
    "WritableStreamDefaultWriterEnsureClosedPromiseRejected",
    "WritableStreamDefaultWriterEnsureReadyPromiseRejected",
    "WritableStreamDefaultWriterGetDesiredSize",
    "WritableStreamDefaultWriterRelease",
    "WritableStreamDefaultWriterWrite",
    "WritableStreamFinishErroring",
    "WritableStreamFinishInFlightClose",
    "WritableStreamFinishInFlightCloseWithError",
    "WritableStreamFinishInFlightWrite",
    "WritableStreamFinishInFlightWriteWithError",
    "WritableStreamHasOperationMarkedInFlight",
    "WritableStreamMarkCloseRequestInFlight",
    "WritableStreamMarkFirstWriteRequestInFlight",
    "WritableStreamRejectCloseAndClosedPromiseIfNeeded",
    "WritableStreamStartErroring",
    "WritableStreamUpdateBackpressure",
    "WriteCommandType",
    "WriteParams",
    "WrongDocumentError",
    "XMLDocument",
    "XMLHttpRequest",
    "XMLHttpRequestBodyInit",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestResponseType",
    "XMLHttpRequestUpload",
    "XMLSerializer",
    "XPathEvaluator",
    "XPathEvaluatorBase",
    "XPathExpression",
    "XPathNSResolver",
    "XPathResult",
    "XRAnchor",
    "XRAnchorSet",
    "XRBoundedReferenceSpace",
    "XRCPUDepthInformation",
    "XRCompositionLayer",
    "XRCubeLayer",
    "XRCubeLayerInit",
    "XRCylinderLayer",
    "XRCylinderLayerInit",
    "XRDOMOverlayInit",
    "XRDOMOverlayState",
    "XRDOMOverlayType",
    "XRDepthDataFormat",
    "XRDepthInformation",
    "XRDepthStateInit",
    "XRDepthUsage",
    "XREnvironmentBlendMode",
    "XREquirectLayer",
    "XREquirectLayerInit",
    "XREye",
    "XRFrame",
    "XRFrameRequestCallback",
    "XRHand",
    "XRHandJoint",
    "XRHandedness",
    "XRHitTestOptionsInit",
    "XRHitTestResult",
    "XRHitTestSource",
    "XRHitTestTrackableType",
    "XRInputSource",
    "XRInputSourceArray",
    "XRInputSourceEvent",
    "XRInputSourceEventInit",
    "XRInputSourcesChangeEvent",
    "XRInputSourcesChangeEventInit",
    "XRInteractionMode",
    "XRJointPose",
    "XRJointSpace",
    "XRLayer",
    "XRLayerEvent",
    "XRLayerEventInit",
    "XRLayerInit",
    "XRLayerLayout",
    "XRLightEstimate",
    "XRLightProbe",
    "XRLightProbeInit",
    "XRMediaBinding",
    "XRMediaCylinderLayerInit",
    "XRMediaEquirectLayerInit",
    "XRMediaLayerInit",
    "XRMediaQuadLayerInit",
    "XRPermissionDescriptor",
    "XRPermissionStatus",
    "XRPose",
    "XRProjectionLayer",
    "XRProjectionLayerInit",
    "XRQuadLayer",
    "XRQuadLayerInit",
    "XRRay",
    "XRRayDirectionInit",
    "XRReferenceSpace",
    "XRReferenceSpaceEvent",
    "XRReferenceSpaceEventInit",
    "XRReferenceSpaceType",
    "XRReflectionFormat",
    "XRRenderState",
    "XRRenderStateInit",
    "XRRigidTransform",
    "XRSession",
    "XRSessionEvent",
    "XRSessionEventInit",
    "XRSessionInit",
    "XRSessionMode",
    "XRSessionSupportedPermissionDescriptor",
    "XRSpace",
    "XRSubImage",
    "XRSystem",
    "XRTargetRayMode",
    "XRTextureType",
    "XRTransientInputHitTestOptionsInit",
    "XRTransientInputHitTestResult",
    "XRTransientInputHitTestSource",
    "XRView",
    "XRViewerPose",
    "XRViewport",
    "XRVisibilityState",
    "XRWebGLBinding",
    "XRWebGLDepthInformation",
    "XRWebGLLayer",
    "XRWebGLLayerInit",
    "XRWebGLRenderingContext",
    "XRWebGLSubImage",
    "XSLTProcessor",
    "[[ActivatedReaderList]]",
    "[[AssociatedMediaStreamIds]]",
    "[[AssociatedRemoteMediaStreams]]",
    "[[BufferedAmount]]",
    "[[Capabilities]]",
    "[[Certificate]]",
    "[[Class]]",
    "[[Configuration]]",
    "[[Constraints]]",
    "[[CurrentDirection]]",
    "[[CurrentLocalDescription]]",
    "[[CurrentPosture]]",
    "[[CurrentRemoteDescription]]",
    "[[DataChannelId]]",
    "[[DataChannelLabel]]",
    "[[DataChannelProtocol]]",
    "[[Direction]]",
    "[[DocumentOrigin]]",
    "[[DtlsTransportState]]",
    "[[Dtmf]]",
    "[[Duration]]",
    "[[EarlyCandidates]]",
    "[[FiredDirection]]",
    "[[GetOwnProperty]]",
    "[[GetProperty]]",
    "[[IceGathererState]]",
    "[[IceRole]]",
    "[[IceTransportState]]",
    "[[InterToneGap]]",
    "[[IsClosed]]",
    "[[JsepMid]]",
    "[[KeyingMaterialHandle]]",
    "[[LastCreatedAnswer]]",
    "[[LastCreatedOffer]]",
    "[[LastReturnedParameters]]",
    "[[LastStableStateAssociatedRemoteMediaStreams]]",
    "[[LastStableStateReceiveCodecs]]",
    "[[LastStableStateReceiverTransport]]",
    "[[LastStableStateSenderTransport]]",
    "[[LocalIceCredentialsToReplace]]",
    "[[MaxChannels]]",
    "[[MaxMessageSize]]",
    "[[MaxPacketLifeTime]]",
    "[[MaxRetransmits]]",
    "[[Mid]]",
    "[[Negotiated]]",
    "[[NegotiationNeeded]]",
    "[[Operations]]",
    "[[Ordered]]",
    "[[Origin]]",
    "[[Parse]]",
    "[[PendingLocalDescription]]",
    "[[PendingRemoteDescription]]",
    "[[PendingWrite]]",
    "[[PreferredCodecs]]",
    "[[Put]]",
    "[[ReadyState]]",
    "[[ReceiveCodecs]]",
    "[[ReceiverTrack]]",
    "[[ReceiverTransport]]",
    "[[Receiver]]",
    "[[Receptive]]",
    "[[RemoteCertificates]]",
    "[[SctpTransportState]]",
    "[[SctpTransport]]",
    "[[SelectedCandidatePair]]",
    "[[SendCodecs]]",
    "[[SendEncodings]]",
    "[[SenderTrack]]",
    "[[SenderTransport]]",
    "[[Sender]]",
    "[[Settings]]",
    "[[SinkId]]",
    "[[Stopped]]",
    "[[Stopping]]",
    "[[Stringify]]",
    "[[Suspended]]",
    "[[ToneBuffer]]",
    "[[UpdateNegotiationNeededFlagOnEmptyChain]]",
    "[[WriteMessage]]",
    "[[WriteOptions]]",
    "[[algorithm]]",
    "[[bufferSize]]",
    "[[canExposeCameraInfo]]",
    "[[canExposeMicrophoneInfo]]",
    "[[class]]",
    "[[constrainedbitspersecond]]",
    "[[constrainedmimetype]]",
    "[[crossoriginpropertydescriptormap]]",
    "[[datachannelpriority]]",
    "[[defaultOrientation]]",
    "[[defaultproperties]]",
    "[[devicesAccessibleMap]]",
    "[[devicesLiveMap]]",
    "[[explicitelyGrantedAudioOutputDevices]]",
    "[[extractable]]",
    "[[fetchedImage]]",
    "[[frameCaptureRequested]]",
    "[[getownproperty]]",
    "[[getownproperty]] of a window object",
    "[[getproperty]]",
    "[[handle]]",
    "[[ishtmldda]]",
    "[[kindsAccessibleMap]]",
    "[[orientationLock]]",
    "[[orientationPendingPromise]]",
    "[[parse]]",
    "[[pendingClosePromise]]",
    "[[put]]",
    "[[readFatal]]",
    "[[readable]]",
    "[[realm]] field of a platform object",
    "[[respondWithCalled]]",
    "[[sharePromise]]",
    "[[state]]",
    "[[storedDeviceList]]",
    "[[stringify]]",
    "[[supportedalgorithms]]",
    "[[type]]",
    "[[usages]]",
    "[[windowClient]]",
    "[[window]]",
    "[[writable]]",
    "[[writeFatal]]",
    "[algorithm_cached]",
    "[cereactions]",
    "[legacyfactoryfunction]",
    "[legacylenientthis]",
    "[legacynulltoemptystring]",
    "[legacyoverridebuiltins]",
    "[legacytreatnonobjectasnull]",
    "[legacyunenumerablenamedproperties]",
    "[legacyunforgeable]",
    "[usages_cached]",
    "_charset_",
    "a",
    "a browsing context is discarded",
    "a element",
    "a elements",
    "a known definite encoding",
    "a label",
    "a language",
    "a list of zero or more cues",
    "a mode",
    "a new device",
    "a new exported function",
    "a new gamepad",
    "a new geolocationposition",
    "a new promise",
    "a new shadow root reference",
    "a pause-on-exit flag",
    "a plausible language",
    "a priori authenticated url",
    "a promise rejected with",
    "a promise resolved with",
    "a readiness state",
    "a serialization of the bitmap as a file",
    "a serialization of the canvas element’s bitmap as a file",
    "a start time",
    "a type that the user agent knows it cannot render",
    "a websocket message has been received",
    "a-rate",
    "aaguid",
    "abbr",
    "abnf",
    "abort",
    "abort a parser",
    "abort a pending write operation",
    "abort a running script",
    "abort a transaction",
    "abort a writable stream",
    "abort all active watchadvertisements",
    "abort an upgrade transaction",
    "abort fetch",
    "abort the image request",
    "abort the request",
    "abort the update",
    "abort watchadvertisements",
    "abort when",
    "aborted network error",
    "about-to-be-notified rejected promises list",
    "about:",
    "about:blank",
    "about:html-kind",
    "about:legacy-compat",
    "about:srcdoc",
    "abrupt-closing-of-empty-comment",
    "abrupt-doctype-public-identifier",
    "abrupt-doctype-system-identifier",
    "abs()",
    "absence-of-digits-in-numeric-character-reference",
    "absolute length",
    "absolute path",
    "absolute position",
    "absolute positioning containing block",
    "absolute positioning layout",
    "absolute positioning layout model",
    "absolute postioning layout model",
    "absolute url",
    "absolute url with fragment",
    "absolute-url",
    "absolute-url record",
    "absolute-url string",
    "absolute-url-with-fragment string",
    "absolutely position",
    "absolutely positioned box",
    "absolutely positioned element",
    "absolutely-positioned",
    "absolutize a relative selector",
    "absolutize a relative selector list",
    "abstract closure",
    "abstract dimensions",
    "abstract equality comparison",
    "acceleration",
    "accelerometer",
    "accent",
    "accent color",
    "accent-color",
    "accentbaseheight",
    "accentunder",
    "accept",
    "accept alert",
    "accept and notify state",
    "accept insecure tls certificates",
    "accept state",
    "accept-ch",
    "accept-ch cache",
    "accept-ch state",
    "accept-language",
    "accepted",
    "accepting",
    "accepts",
    "access key",
    "access mode",
    "access-control-allow-credentials",
    "access-control-allow-headers",
    "access-control-allow-methods",
    "access-control-allow-origin",
    "access-control-allow-private-network",
    "access-control-expose-headers",
    "access-control-max-age",
    "access-control-request-headers",
    "access-control-request-method",
    "access-control-request-private-network",
    "accessibility api",
    "accessibility apis",
    "accessibility considerations",
    "accessibility subtree",
    "accessibility tree",
    "accessible description",
    "accessible name",
    "accessible name and description computation",
    "accessible names",
    "accessible object",
    "accessible objects",
    "accessor is openee",
    "accessor is opener",
    "accessor-accessed relationship",
    "accumulated 3d transformation matrix",
    "accumulation for one-based values",
    "accumulation procedure",
    "acknowledged",
    "acos()",
    "acquaintance",
    "acquire a position",
    "acquire a wake lock",
    "acquire position",
    "acquire the content",
    "acquire the contents of an audiobuffer",
    "acquire the wake lock",
    "acquire wake lock",
    "acquired",
    "acquires the wake lock",
    "acquiring a position",
    "acquiring system resources",
    "acronym",
    "action",
    "action object",
    "action record",
    "actions",
    "actiontype",
    "activate",
    "activate a content index entry",
    "activate a portal browsing context",
    "activate a sensor object",
    "activate an event handler",
    "activated reader objects",
    "activated sensor objects",
    "activation behavior",
    "activation notification",
    "activation trigger",
    "activation triggering input event",
    "active",
    "active buttons state",
    "active configuration",
    "active document",
    "active duration",
    "active element",
    "active fingerprinting",
    "active flag",
    "active flag was set when the script started",
    "active frame element",
    "active function object",
    "active immersive session",
    "active input sources",
    "active interval",
    "active listeners",
    "active match",
    "active media session",
    "active needed worker",
    "active notification context set",
    "active orientation lock",
    "active parser",
    "active parser was aborted",
    "active periodic sync registrations",
    "active phase",
    "active pointer",
    "active range",
    "active reader",
    "active render state",
    "active replace state",
    "active script",
    "active script or module",
    "active session",
    "active sessions",
    "active shadow tree",
    "active source",
    "active time",
    "active touch point",
    "active track buffers",
    "active user consent",
    "active worker",
    "active writer",
    "active-after boundary time",
    "activeborder",
    "activecaption",
    "actively processing",
    "actual playback rate",
    "actual playback state",
    "actual value",
    "actual values",
    "actual viewport",
    "actually disabled",
    "ad structure",
    "adapter",
    "add",
    "add a css style sheet",
    "add a new accept-ch cache entry",
    "add a performanceresourcetiming entry",
    "add a track",
    "add a vcard line",
    "add an event listener",
    "add an icalendar line",
    "add cookie",
    "add credential",
    "add device to storage",
    "add mock camera",
    "add mock microphone",
    "add or put",
    "add the track",
    "add two types",
    "add virtual authenticator",
    "add-ons",
    "added modules list",
    "addeventlistener()",
    "adding a cookie",
    "addition procedure",
    "additional capability deserialization algorithm",
    "additional webdriver capabilities",
    "additional webdriver capability",
    "additional-name",
    "additionaldata",
    "additive color space",
    "additive environment blending",
    "additive light",
    "additive tuple",
    "address",
    "address type strings",
    "address-of",
    "addressable character",
    "addsourcebuffer",
    "addtrack",
    "adjoining",
    "adjoining margins",
    "adjust foreign attributes",
    "adjust mathml attributes",
    "adjust svg attributes",
    "adjusted current node",
    "adjustedradicalkernafterdegree",
    "adjustedradicalkernbeforedegree",
    "administratively prohibited",
    "adopt",
    "adopt the predecessor browsing context",
    "adopted stylesheets",
    "adopting steps",
    "adoption agency algorithm",
    "adr",
    "advanced constraints",
    "advanced to the next child of the table",
    "advertising agent",
    "advertising data",
    "advertising event",
    "advertising events",
    "advisory information",
    "aescbcparams",
    "aesctrparams",
    "aesderivedkeyparams",
    "aesgcmparams",
    "aeskeyalgorithm",
    "aeskeygenparams",
    "affected by a base url change",
    "after after body",
    "after after frameset",
    "after attribute name state",
    "after attribute value (quoted) state",
    "after body",
    "after doctype name state",
    "after doctype public identifier state",
    "after doctype public keyword state",
    "after doctype system identifier state",
    "after doctype system keyword state",
    "after frameset",
    "after head",
    "after phase",
    "after-change style",
    "agent",
    "agent certificate",
    "agent cluster",
    "agent cluster key",
    "agent cluster map",
    "agent fingerprint",
    "agent record",
    "agent-info",
    "agent-info-event",
    "agent-info-request",
    "agent-info-response",
    "agent-status-request",
    "agent-status-response",
    "alert",
    "alert steps",
    "algorithm",
    "algorithm for assigning header cells",
    "algorithm for determining the form of an embellished operator",
    "algorithm for determining the properties of an embellished operator",
    "algorithm for ending a row group",
    "algorithm for extracting a character encoding from a meta element",
    "algorithm for growing downward-growing cells",
    "algorithm for processing row groups",
    "algorithm for processing rows",
    "algorithm for stretching operators along the block axis",
    "algorithm for stretching operators along the inline axis",
    "algorithm normalization",
    "algorithm queue",
    "algorithm to close a midiport",
    "algorithm to convert a date object to a string",
    "algorithm to convert a number to a string",
    "algorithm to convert a string to a date object",
    "algorithm to convert a string to a number",
    "algorithm to map depth pixels to color pixels",
    "algorithm to open a midiport",
    "algorithm to request midi access",
    "algorithm_cached",
    "algorithmidentifier",
    "align descendants",
    "align-content",
    "align-items",
    "align-self",
    "align-tracks",
    "aligned subtree",
    "alignment baseline",
    "alignment container",
    "alignment context",
    "alignment point",
    "alignment subject",
    "alignment-baseline",
    "alignof",
    "all",
    "all associated cookies",
    "allocate color textures",
    "allocate color textures for projection layers",
    "allocate depth textures",
    "allocate depth textures for projection layers",
    "allocate the color textures for the secondary views",
    "allocate the depth textures for the secondary views",
    "allocating a new presentation context texture",
    "allow custom elements option",
    "allow-csp-from",
    "allow-list",
    "allow-list-value",
    "allowed in non-secure contexts",
    "allowed in the body",
    "allowed required constraints for device selection",
    "allowed signed exchange link info",
    "allowed to download",
    "allowed to modify the clipboard",
    "allowed to navigate",
    "allowed to play",
    "allowed to read from clipboard",
    "allowed to resize and move",
    "allowed to show a popup",
    "allowed to start",
    "allowed to use",
    "allowed value step",
    "allowed values",
    "allowlist",
    "allowlists",
    "alpha",
    "alpha channel",
    "alpha component",
    "alpha-blend environment blending",
    "alpha-to-coverage mask",
    "alphabetic baseline",
    "alphanumeric section",
    "already constructed marker",
    "alternate",
    "alternate flag",
    "alternate signed exchange",
    "alternate signed exchange link",
    "alternate signed exchange link info",
    "alternate signed exchange preload info",
    "alternative",
    "ambient light sensor",
    "ambiguous ampersand",
    "ambiguous ampersand state",
    "an end time",
    "an exception was thrown",
    "an html document is to be loaded",
    "an identifier",
    "an iframe srcdoc document",
    "an in-band metadata track dispatch type",
    "an overridden reload",
    "an unstyled document view",
    "an+b",
    "analysernode",
    "analyseroptions",
    "ancestor",
    "ancestor browsing context",
    "ancestor origins list",
    "ancestor-source",
    "ancestor-source-list",
    "anchor",
    "anchor node selection algorithm",
    "anchor point",
    "anchor unit",
    "anchors",
    "android key attestation certificate extension data",
    "angular velocity",
    "animatable",
    "animate",
    "animate function",
    "animated image document",
    "animatemotion",
    "animatetransform",
    "animation",
    "animation addition attributes",
    "animation animator name",
    "animation class",
    "animation composite order",
    "animation direction",
    "animation effect",
    "animation effect playback rate",
    "animation effect start time",
    "animation element",
    "animation event attribute",
    "animation events",
    "animation frame",
    "animation frame callback identifier",
    "animation frame task",
    "animation origin",
    "animation playback events",
    "animation property name to idl attribute name",
    "animation requested flag",
    "animation time to origin-relative time",
    "animation time to timeline time",
    "animation timing attributes",
    "animation type",
    "animation value attributes",
    "animation worklet",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-tainted",
    "animation-timeline",
    "animation-timing-function",
    "animationevent()",
    "animator",
    "animator current time",
    "animator definition",
    "animator definitions",
    "animator effect",
    "animator instance",
    "animator instance set",
    "animator name",
    "animator name to animator definition map",
    "animator serialized options",
    "animator timeline",
    "anniversary",
    "annotated types",
    "annotated unexpected alert open error",
    "annotation",
    "annotation box",
    "annotation level",
    "announce an rtcdatachannel as open",
    "announce the connection",
    "announce the rtcdatachannel as open",
    "anonca",
    "anonymization ca",
    "anonymous",
    "anonymous button content box",
    "anonymous fieldset content box",
    "anonymous inline boxes",
    "answerer's system state",
    "any",
    "any role",
    "api base url",
    "api referrer source",
    "api value",
    "appearance",
    "appearance of a cross-fade()",
    "append",
    "append a request `origin` header",
    "append an attribute",
    "append an entry",
    "append client hints to request",
    "append error",
    "append state",
    "append the Fetch metadata headers for a request",
    "append to an event path",
    "append window",
    "appendchild()",
    "appid",
    "applet",
    "applicability",
    "applicable",
    "applicable constraint",
    "applicable specification",
    "applicable wake lock",
    "application",
    "application context",
    "application manifest",
    "application manifest media type",
    "application server",
    "application's name",
    "application-set content hint",
    "application/atom+xml",
    "application/ecmascript",
    "application/javascript",
    "application/json",
    "application/manifest+json",
    "application/microdata+json",
    "application/octet-stream",
    "application/originpolicy+json",
    "application/rss+xml",
    "application/tracking-status+json",
    "application/x-ecmascript",
    "application/x-javascript",
    "application/x-www-form-urlencoded",
    "application/x-www-form-urlencoded percent-encode set",
    "application/x-www-form-urlencoded serializer",
    "application/xhtml+xml",
    "application/xml",
    "applied",
    "applies to",
    "apply",
    "apply a default",
    "apply an orientation lock",
    "apply any pending playback rate",
    "apply the modifiers",
    "apply the pending render state",
    "apply the percent hint",
    "apply to",
    "apply webvtt cue settings",
    "applyconstraints algorithm",
    "applyconstraints template method",
    "applying",
    "applying a blackman window",
    "applying a fourier transform",
    "appropriate end tag token",
    "appropriate place for inserting a node",
    "appropriate template contents owner document",
    "appropriate times",
    "appworkspace",
    "archive mime type",
    "archive type pattern matching algorithm",
    "arcs linejoin",
    "are a valid escape",
    "area",
    "area element",
    "arguments exotic object",
    "aria attributes",
    "aria-*",
    "aria-checked",
    "aria-describedby",
    "aria-disabled",
    "aria-label",
    "ariamixin",
    "ariamixin getter steps",
    "ariamixin setter steps",
    "array",
    "array exotic object",
    "array index",
    "array index property name",
    "array key",
    "array layer",
    "array layer count",
    "array size",
    "arraybuffer",
    "arraybufferview",
    "arraycreate",
    "arrayed texture",
    "arrow pad",
    "art direction",
    "article",
    "as a download",
    "as a timestamp",
    "ascending",
    "ascent metric",
    "ascii alpha",
    "ascii alphanumeric",
    "ascii byte",
    "ascii case-insensitive",
    "ascii code point",
    "ascii decode",
    "ascii digit",
    "ascii encode",
    "ascii hex digit",
    "ascii lower alpha",
    "ascii lower hex digit",
    "ascii lowercase",
    "ascii serialization of an origin",
    "ascii string",
    "ascii tab or newline",
    "ascii tabs or newlines",
    "ascii upper alpha",
    "ascii upper hex digit",
    "ascii uppercase",
    "ascii whitespace",
    "ascii-capable",
    "aside",
    "asin()",
    "ask the user to choose a Credential",
    "asks for a reset",
    "aspect",
    "aspect value",
    "aspect-ratio",
    "aspectratio",
    "aspects",
    "assemble primitives",
    "assemblyglyphcount",
    "assembysize",
    "assert",
    "assertion",
    "assertion signature",
    "assign a slot",
    "assign slottables",
    "assign slottables for a tree",
    "assignable table width",
    "assigned access key",
    "assigned media provider object",
    "assigned nodes",
    "assigned slot",
    "assignment statement",
    "assistive technologies",
    "assistive technology",
    "associable",
    "associable by an entity",
    "associable by the application",
    "associate animator instance of worklet animation",
    "associated",
    "associated animation of an animation effect",
    "associated background image requests",
    "associated baseaudiocontext",
    "associated bone",
    "associated cookies",
    "associated css style sheet",
    "associated document",
    "associated effect",
    "associated effect end",
    "associated element",
    "associated focus navigation owner",
    "associated image request",
    "associated inert template document",
    "associated interface",
    "associated navigator",
    "associated node",
    "associated offscreencanvas object",
    "associated option object",
    "associated realm",
    "associated sensors",
    "associated session",
    "associated store",
    "associated video element",
    "associated window",
    "associated with a timeline",
    "associated with an animation",
    "async",
    "asynchronous iterator initialization steps",
    "asynchronous iterator prototype object",
    "asynchronous iterator return",
    "asynchronous read method",
    "asynchronous waits",
    "asynchronously compile a webassembly module",
    "asynchronously execute a request",
    "asynchronously instantiate a webassembly module",
    "asynchronously iterable declaration",
    "asynchronously wait",
    "at-keyword",
    "at-risk",
    "at-rule",
    "at-rules",
    "atan()",
    "atan2()",
    "atomic http redirect handling",
    "atomic initial letter",
    "atomic initial letter box",
    "atomic inline",
    "atomic inline box",
    "atomic inline-level boxes",
    "atomic modification",
    "atomic type",
    "atomically",
    "atomics",
    "att bearer",
    "attach",
    "attach a webvtt internal node object",
    "attached",
    "attached internals",
    "attaching to a media element",
    "attachshadow()",
    "attca",
    "attempting to access the depth buffer",
    "attestation",
    "attestation ca",
    "attestation certificate",
    "attestation conveyance",
    "attestation key pair",
    "attestation object",
    "attestation private key",
    "attestation public key",
    "attestation signature",
    "attestation statement",
    "attestation statement format",
    "attestation statement format identifier",
    "attestation trust path",
    "attestation type",
    "attested credential data",
    "attestedcredentialdata",
    "attr",
    "attr localname",
    "attr()",
    "attr.localname",
    "attr.namespaceuri",
    "attr.prefix",
    "attr.value",
    "attribute",
    "attribute allow list",
    "attribute caching",
    "attribute change steps",
    "attribute drop list",
    "attribute getter",
    "attribute handle",
    "attribute kind",
    "attribute list",
    "attribute match list",
    "attribute name state",
    "attribute names",
    "attribute node selector",
    "attribute selector",
    "attribute setter",
    "attribute type",
    "attribute validation steps",
    "attribute value (double-quoted) state",
    "attribute value (single-quoted) state",
    "attribute value (unquoted) state",
    "attribute values",
    "attribute's serialized name",
    "attributes",
    "attributes for form submission",
    "attribution",
    "attribution destination website",
    "attribution report",
    "attribution source id",
    "attvalue",
    "audience segmentation",
    "audio",
    "audio focus",
    "audio or video mime type",
    "audio or video type pattern matching algorithm",
    "audio sample",
    "audio sample type",
    "audio splice frame",
    "audio splice rendering",
    "audio(src)",
    "audio-encoding-offer",
    "audio-frame",
    "audiobuffer",
    "audiobufferoptions",
    "audiobuffersourcenode",
    "audiobuffersourceoptions",
    "audiocontext",
    "audiocontextoptions",
    "audiodestinationnode",
    "audiolistener",
    "audionode",
    "audionodeoptions",
    "audioparam",
    "audioparamdescriptor",
    "audioprocessingevent",
    "audioprocessingeventinit",
    "audioscheduledsourcenode",
    "audiotimestamp",
    "audioworklet",
    "audioworkletglobalscope",
    "audioworkletnode",
    "audioworkletnodeoptions",
    "audioworkletprocessor",
    "audit",
    "augmented certificate",
    "augmented grid",
    "aural \"box\" model",
    "aural box model",
    "auth-capabilities",
    "auth-initiation-token",
    "auth-spake2-confirmation",
    "auth-spake2-handshake",
    "auth-spake2-need-psk",
    "auth-status",
    "authdataextensions",
    "authenticating",
    "authentication",
    "authentication assertion",
    "authentication ceremony",
    "authentication entry",
    "authentication extension",
    "authentication factor capability",
    "authenticator",
    "authenticator attachment modality",
    "authenticator configuration",
    "authenticator data",
    "authenticator data claimed to have been used for the attestation",
    "authenticator data for the attestation",
    "authenticator extension",
    "authenticator extension capabilities",
    "authenticator extension input",
    "authenticator extension output",
    "authenticator extension processing",
    "authenticator model",
    "authenticator operations",
    "authenticator session",
    "authenticator type",
    "authenticatorcancel",
    "authenticatorgetassertion",
    "authenticatorid",
    "authenticatormakecredential",
    "author",
    "author origin",
    "author request headers",
    "author style sheet",
    "author-origin",
    "authoring tool",
    "authority",
    "authority state",
    "authorization gesture",
    "authorization server",
    "auto",
    "auto-column",
    "auto-hidden",
    "auto-hide",
    "auto-placement",
    "auto-placement cursor",
    "auto-releasing wake locks",
    "autocapitalization hints",
    "autocapitalize-inheriting elements",
    "autofill anchor mantle",
    "autofill detail tokens",
    "autofill expectation mantle",
    "autofill field",
    "autofill field name",
    "autofill hint set",
    "autofill scope",
    "autofills form controls",
    "autofocus candidates",
    "autofocus processed flag",
    "autogaincontrol",
    "automatic",
    "automatic block size",
    "automatic column position",
    "automatic grid position",
    "automatic inline size",
    "automatic minimum size",
    "automatic numbering",
    "automatic placement",
    "automatic position",
    "automatic row position",
    "automatic semicolon insertion",
    "automatic size",
    "automation event time",
    "automation events",
    "automation method",
    "autonomous custom element",
    "autopictureinpictureelement",
    "autoplay",
    "auxclick",
    "auxiliary action",
    "auxiliary browsing context",
    "auxiliary input source",
    "availability",
    "availability sources set",
    "available",
    "available block space",
    "available font faces",
    "available grid space",
    "available height",
    "available inline space",
    "available presentation display",
    "available presentation displays",
    "available space",
    "available to element internals",
    "available width",
    "availablefromtimeline",
    "avoid break values",
    "await a stable state",
    "axis value",
    "axis-lock",
    "axisheight",
    "azimuth",
    "b",
    "back",
    "back-facing",
    "back_forward",
    "backdrop",
    "backdrop root",
    "backdrop root image",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background fetch",
    "background fetch click",
    "background fetch record",
    "background fetch response",
    "background fetch task source",
    "background painting area",
    "background positioning area",
    "background suitability",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-block",
    "background-position-inline",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "backing observable array exotic object",
    "backpressure",
    "backslash escapes",
    "backup element queue",
    "backup incumbent settings object stack",
    "backwards",
    "bad import script response",
    "bad port",
    "badge",
    "barred the element from constraint validation",
    "base",
    "base box",
    "base direction",
    "base level",
    "base size",
    "base text level",
    "base url",
    "base url change steps",
    "base-uri",
    "base64 encode",
    "base64 encoding",
    "base64-value",
    "base64url encoding",
    "baseaudiocontext",
    "basefont",
    "baseline",
    "baseline alignment",
    "baseline alignment preference",
    "baseline attribute allow list",
    "baseline content-alignment",
    "baseline element allow list",
    "baseline of a cell",
    "baseline of a table-root",
    "baseline of the row",
    "baseline self-alignment",
    "baseline set",
    "baseline table",
    "baseline-relative shift values",
    "baseline-relative values",
    "baseline-sharing group",
    "baseline-shift",
    "baseline-source",
    "baseline-table",
    "baselines",
    "basic",
    "basic attestation",
    "basic filtered response",
    "basic shape",
    "basic url parser",
    "basic-card",
    "batch attestation",
    "batch cache operations",
    "battery manager",
    "battery promise",
    "bd_addr",
    "bday",
    "bdi",
    "bdo",
    "be directionally scrolled",
    "bearing angle",
    "become browsing-context connected",
    "become browsing-context disconnected",
    "become disconnected",
    "becomes connected",
    "before attribute name state",
    "before attribute value state",
    "before doctype name state",
    "before doctype public identifier state",
    "before doctype system identifier state",
    "before flag",
    "before head",
    "before html",
    "before phase",
    "before-active boundary time",
    "before-change style",
    "beforeinput",
    "beforeunload",
    "beforexrselect",
    "begin",
    "begin offline rendering",
    "beginning edges",
    "behave as auto",
    "behaves as auto",
    "behaving as auto",
    "being activated",
    "being actively pointed at",
    "being rendered",
    "being used as relevant canvas fallback content",
    "best representation of the number n as a floating-point number",
    "between doctype public and system identifiers state",
    "between zero and b",
    "bfc",
    "bgsound",
    "bi-orientational",
    "bi-orientational transform",
    "bias value",
    "biaxial",
    "bidi formatting characters",
    "bidi isolation",
    "bidi paragraph",
    "bidi-isolate",
    "bidi-isolated",
    "bidirectionality",
    "bidirectionality (bidi)",
    "big",
    "big5",
    "big5 decoder",
    "big5 encoder",
    "big5 lead",
    "bigint",
    "biginteger",
    "billing address",
    "binary data byte",
    "binary object store",
    "binding edge",
    "binding member",
    "binding resource type",
    "binding type",
    "binding usage",
    "biometric authenticator",
    "biometric recognition",
    "biquadfilternode",
    "biquadfilteroptions",
    "bitmap",
    "bitmap data",
    "bitmap mode",
    "bitmaprenderer",
    "blank",
    "bleed area",
    "blend technique",
    "blink",
    "blob",
    "blob url",
    "blob url entry",
    "blob url store",
    "blob:",
    "block",
    "block access",
    "block at-rule",
    "block axis",
    "block bad port",
    "block box",
    "block boxes",
    "block container",
    "block container box",
    "block dimension",
    "block end",
    "block flow direction",
    "block formatting context",
    "block formatting context root",
    "block layout",
    "block offset",
    "block overflow ellipsis",
    "block row",
    "block scripts",
    "block size",
    "block start",
    "block stretch size constraint",
    "block-all-mixed-content",
    "block-axis",
    "block-ellipsis",
    "block-end",
    "block-flow direction",
    "block-level",
    "block-level box",
    "block-level boxes",
    "block-level content",
    "block-level elements",
    "block-size",
    "block-start",
    "block-step",
    "block-step-align",
    "block-step-insert",
    "block-step-round",
    "block-step-size",
    "blockable",
    "blockable mixed content",
    "blocked by a blocklist rule",
    "blocked by a modal dialog",
    "blocked by content security policy",
    "blocked media element",
    "blocked report",
    "blocked-on-parser",
    "blockification",
    "blockify",
    "blocklist",
    "blocklisted",
    "blocklisted for reads",
    "blocklisted for writes",
    "blockquote",
    "bluetooth device",
    "bluetooth device name",
    "blur",
    "blur radius",
    "body",
    "body element",
    "body-ok",
    "bodyinit",
    "bogus comment state",
    "bogus doctype state",
    "bom sniff",
    "bond",
    "bookmark-label",
    "bookmark-level",
    "bookmark-state",
    "bookmarks",
    "bool",
    "boolean",
    "boolean attribute",
    "boolean attributes",
    "boolean context",
    "boolean feature",
    "boolean permission query algorithm",
    "boolean permission request algorithm",
    "bopomofo",
    "bopomofo tone marks",
    "border",
    "border (of a box)",
    "border area",
    "border box",
    "border edge",
    "border image area",
    "border properties",
    "border radius",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-boundary",
    "border-box",
    "border-clip",
    "border-clip-bottom",
    "border-clip-left",
    "border-clip-right",
    "border-clip-top",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-limit",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bot.dom.getvisibletext",
    "bot.dom.isshown",
    "bottle map",
    "bottom",
    "bound credential",
    "bound function exotic object",
    "boundary box",
    "boundary default action",
    "boundary point",
    "bounded reference spaces are supported",
    "bounding box",
    "bounding rectangle",
    "box alignment properties",
    "box edge",
    "box fragment",
    "box metrics of the radical glyph",
    "box-corner",
    "box-decoration-break",
    "box-shadow",
    "box-sizing",
    "box-snap",
    "br",
    "br/edr bonding procedure",
    "branches of a readable stream tee",
    "break",
    "break-after",
    "break-before",
    "break-inside",
    "breaking text into extended grapheme clusters",
    "brightness",
    "broadcast",
    "broadcast active observations",
    "broadcaster",
    "broadcasting to other browsing contexts",
    "broken",
    "browser",
    "browser chrome",
    "browser chrome element",
    "browser chrome elements",
    "browser fingerprinting",
    "browser initiated remote playback",
    "browser name",
    "browser version",
    "browsing context",
    "browsing context container",
    "browsing context group",
    "browsing context group set",
    "browsing context id",
    "browsing context name",
    "browsing context scope origin",
    "browsing context set",
    "browsing context tree discarded",
    "browsing contexts",
    "browsing session",
    "browsing-context connected",
    "bsize field",
    "bubble phase",
    "bubbles",
    "bubbling phase",
    "bucket map",
    "buffer",
    "buffer a log event",
    "buffer append",
    "buffer full flag",
    "buffer source types",
    "buffer state",
    "bufferedamountlow",
    "buffersource",
    "built-in functions",
    "built-in input variable",
    "built-in output variable",
    "bulk transfers",
    "bundle",
    "bundle-only",
    "bundle-policy",
    "button",
    "button layout",
    "button press threshold",
    "buttonhighlight",
    "buttons",
    "buttonshadow",
    "by",
    "by computed value",
    "byob readers",
    "byte",
    "byte length queuing strategy size function",
    "byte less than",
    "byte pattern",
    "byte sequence",
    "byte stream format specifications",
    "byte stream formats",
    "byte-case-insensitive",
    "byte-lowercase",
    "byte-serializing a request origin",
    "byte-uppercase",
    "bytes",
    "c",
    "c0 control",
    "c0 control or space",
    "c0 control percent-encode set",
    "c0 controls or spaces",
    "cache",
    "cache batch operation",
    "cache entry",
    "cache entry match",
    "cache mode",
    "cache-control",
    "cacheable",
    "cached ecmascript object",
    "calc()",
    "calcmode",
    "calculate box size",
    "calculate depth for node",
    "calculate depth map value",
    "calculate scroll timeline progress",
    "calculate the absolute position",
    "calculate the aspect ratio",
    "calculate the part element map",
    "calculated global key state",
    "calculation tree",
    "calibrated",
    "calibrated magnetic field",
    "calibration",
    "call",
    "call a user object’s operation",
    "call an exported function",
    "call back with error",
    "call site",
    "callback",
    "callback context",
    "callback function",
    "callback function types",
    "callback interface",
    "callback interface member",
    "callback interface types",
    "callback reaction",
    "callback this value",
    "camera",
    "camera information can be exposed",
    "camera-information-can-be-exposed",
    "can add resource timing entry",
    "can autoplay flag",
    "can be displayed",
    "can be manually scrolled",
    "can be scrolled manually",
    "can expose sensor readings",
    "can make payment algorithm",
    "cancel a hit test source",
    "cancel a hit test source for transient input",
    "cancel a readable stream",
    "cancel an animation",
    "cancel event",
    "cancelable",
    "cancelalgorithm",
    "canceled",
    "canceled event",
    "canceled flag",
    "candidate event handlers",
    "candidate event listeners",
    "candidate examination algorithm",
    "candidate execution",
    "candidate for constraint validation",
    "candidate-attribute",
    "canmakepayment()",
    "cannot be manually scrolled",
    "cannot be scrolled manually",
    "cannot be used together",
    "cannot have a username/password/port",
    "cannot navigate",
    "cannot show simple dialogs",
    "cannot-be-a-base-url",
    "cannot-be-a-base-url path state",
    "canonical index",
    "canonical keyword",
    "canonical unit",
    "canvas",
    "canvas background",
    "canvas blob serialization task source",
    "canvas context mode",
    "canvas element",
    "canvas height attribute",
    "canvas pixel arraybuffer",
    "canvas surface",
    "canvas width attribute",
    "canvasimagesource",
    "canvas’ width attribute",
    "canvas’s height attribute",
    "can’t be displayed",
    "cap shapes",
    "cap-height baseline",
    "capabilities",
    "capabilities processing",
    "capability",
    "capability name",
    "capable of supporting",
    "caption",
    "caption width minimum (capmin)",
    "caption-side",
    "captions",
    "captiontext",
    "capture control type",
    "capture phase",
    "captures snap positions",
    "card",
    "card holder's name",
    "card's",
    "caret",
    "caret node",
    "caret offset",
    "caret position",
    "caret range",
    "caret-color",
    "caret-shape",
    "cascade",
    "cascade layers",
    "cascade origin",
    "cascaded value",
    "case-insensitive",
    "case-sensitive",
    "categories",
    "cbcs",
    "cbcs-1-9",
    "cbor",
    "ccdtostring",
    "cdata section bracket state",
    "cdata section end state",
    "cdata section state",
    "cdata sections",
    "cdata-in-html-content",
    "cddl",
    "ceiling expression",
    "cell",
    "cell intrinsic offsets",
    "cenc",
    "center",
    "center point",
    "central",
    "central baseline",
    "cereactions",
    "ceremony",
    "certificate chain",
    "cf field",
    "ch-device-memory",
    "ch-downlink",
    "ch-dpr",
    "ch-ect",
    "ch-rtt",
    "ch-save-data",
    "ch-sec-prefers-color-scheme",
    "ch-sec-prefers-contrast",
    "ch-sec-prefers-forced-colors",
    "ch-sec-prefers-reduced-data",
    "ch-sec-prefers-reduced-motion",
    "ch-sec-prefers-reduced-transparency",
    "ch-ua",
    "ch-ua-arch",
    "ch-ua-bitness",
    "ch-ua-full-version",
    "ch-ua-mobile",
    "ch-ua-model",
    "ch-ua-platform",
    "ch-ua-platform-version",
    "ch-viewport-height",
    "ch-viewport-width",
    "ch-width",
    "chain",
    "chain an operation",
    "chain transform algorithm",
    "chaining",
    "change",
    "change an attribute",
    "change password url",
    "change payment method algorithm",
    "change remote playback state",
    "change the encoding",
    "change the frozenness of a document",
    "change the frozenness of a top-level document",
    "change the preferred css style sheet set name",
    "changes to selected/enabled track state",
    "channel format",
    "channel formats",
    "channel keyword",
    "channel messaging",
    "channel name",
    "channel transfer function",
    "channelcount",
    "channelmergernode",
    "channelmergeroptions",
    "channels",
    "channelsplitternode",
    "channelsplitteroptions",
    "chapters",
    "chapters metadata",
    "char",
    "character",
    "character encoding",
    "character encoding declaration",
    "character height",
    "character map",
    "character reference code",
    "character reference state",
    "character references",
    "character value",
    "character width",
    "character-reference-outside-unicode-range",
    "characteristic",
    "characteristic descriptor discovery",
    "characteristic descriptors",
    "characteristic discovery",
    "characteristic extended properties",
    "characteristic properties",
    "characteristic value indications",
    "characteristic value notification",
    "characteristic value read",
    "characteristic value write",
    "characterized",
    "characters",
    "characterstring",
    "chargingchange",
    "chargingtimechange",
    "charwidth",
    "check a global object's embedder policy",
    "check a navigation response's adherence to `x-frame-options`",
    "check a navigation response's adherence to its embedder policy",
    "check and canonicalize amount",
    "check and canonicalize total amount",
    "check clipboard read permission",
    "check clipboard write permission",
    "check configuration support",
    "check created records",
    "check encrypted decoding support",
    "check if an access between two browsing contexts should be reported",
    "check if coop values require a browsing context group switch",
    "check if enforcing report-only coop would require a browsing context group switch",
    "check if negotiation is needed",
    "check if three code points would start a number",
    "check if three code points would start an identifier",
    "check if two code points are a valid escape",
    "check if we can run script",
    "check parsed records",
    "check permission",
    "check permissions for device",
    "check sensor policy-controlled features",
    "check that a key could be injected into a value",
    "check the completion record",
    "check the layers state",
    "check the usability of the image argument",
    "check the validity of the control transfer parameters",
    "check validity steps",
    "check-for-apache-bug flag",
    "checkbox",
    "checked",
    "checkedness",
    "child",
    "child browsing context",
    "child combinator",
    "child effect",
    "child layout",
    "child nodes",
    "child selector",
    "child text content",
    "child-src",
    "childnode",
    "children",
    "children changed steps",
    "chorded button interactions",
    "chromatic adaptation transform",
    "chromaticity",
    "chunk",
    "chunked",
    "circ",
    "circle",
    "circle()",
    "circled-lower-latin",
    "circular reference",
    "cite",
    "clamp a grid area",
    "clamp and coarsen connection timing info",
    "clamp()",
    "clamped to the range",
    "clamping",
    "class",
    "class constructor",
    "class selector",
    "class string",
    "classes",
    "classic script",
    "classic scrollbar",
    "classic scrollbars",
    "clean up after running a callback",
    "clean up after running a script",
    "clean up after running script",
    "clean up the disconnected device",
    "clean up the pending scan",
    "cleanup indexed database transactions",
    "cleanupfinalizationregistry",
    "clear",
    "clear DOM-accessible storage for origin",
    "clear a content editable element",
    "clear a resettable element",
    "clear algorithm",
    "clear an object store",
    "clear cache entries",
    "clear cache for origin",
    "clear cookies for origin",
    "clear registration",
    "clear site data for response",
    "clear the list of active formatting elements up to the last marker",
    "clear the modifier key state",
    "clear the negotiation-needed flag",
    "clear the stack back to a table body context",
    "clear the stack back to a table context",
    "clear the stack back to a table row context",
    "clear-site-data",
    "clearance",
    "cleared",
    "clearkeptobjects",
    "click",
    "click event",
    "click focusable",
    "click in progress flag",
    "click source website",
    "click source-attribute-on pair",
    "click, auxclick, and contextmenu events",
    "client",
    "client characteristic configuration",
    "client data",
    "client device",
    "client extension",
    "client extension input",
    "client extension output",
    "client extension processing",
    "client hints set",
    "client hints token",
    "client message queue",
    "client platform",
    "client-side",
    "client-side credential storage modality",
    "client-side discoverable credential",
    "client-side discoverable public key credential source",
    "clip",
    "clip position",
    "clip volume",
    "clip-path",
    "clip-rule",
    "clipboardchange",
    "clippath",
    "clippathunits",
    "clipping path",
    "clipping region",
    "clone",
    "clone a node",
    "clone a policy container",
    "clone a track",
    "clone an object",
    "clone audiodata",
    "clone configuration",
    "clone videoframe",
    "clonenode()",
    "cloning steps",
    "close",
    "close a browsing context",
    "close a database connection",
    "close a p element",
    "close a portal element",
    "close a presentation connection",
    "close a worker",
    "close audiodecoder",
    "close audioencoder",
    "close sentinel",
    "close steps",
    "close the cell",
    "close the connection",
    "close the presentation connection",
    "close the session",
    "close the websocket connection",
    "close videodecoder",
    "close videoencoder",
    "close window",
    "close window algorithm",
    "closed",
    "closed flag",
    "closed subpath",
    "closed-shadow-hidden",
    "closes",
    "closest-side",
    "closing",
    "closing procedure",
    "clustered scripts",
    "coalesced and predicted events",
    "coalesced event list",
    "coalesced events",
    "coalesced events list",
    "coalesced events targets dirty",
    "coarsen time",
    "coarsened shared current time",
    "code",
    "code 128",
    "code 39",
    "code elements",
    "code entry-point",
    "code point",
    "code point length",
    "code unit",
    "code unit less than",
    "code unit prefix",
    "code units",
    "codec",
    "codec processing loop",
    "codec processing model",
    "codec string",
    "codec thread",
    "coded frame",
    "coded frame duration",
    "coded frame end timestamp",
    "coded frame eviction",
    "coded frame group",
    "coded frame processing",
    "coded frame removal",
    "col",
    "colgroup",
    "collapse",
    "collapse through",
    "collapsed flex item",
    "collapsed gutter",
    "collapsed margin",
    "collapsed track",
    "collapsible white space",
    "collapsing margin",
    "collapsing margins",
    "colleague",
    "collect Credentials from the credential store",
    "collect a sequence of code points",
    "collect a webvtt block",
    "collect a webvtt timestamp",
    "collect an http quoted string",
    "collect attribute values",
    "collect attribute values of an inheritance stack",
    "collect documents to unfullscreen",
    "collect webvtt cue timings and settings",
    "collect webvtt region settings",
    "collecting a sequence of code points",
    "collecting an http quoted string",
    "collecting the first vcard subproperty",
    "collecting vcard subproperties",
    "collection",
    "collection tag",
    "collection type",
    "collects",
    "collectsenders",
    "collecttransceivers",
    "color",
    "color interpolation hint",
    "color renderable format",
    "color scheme",
    "color space",
    "color state",
    "color stop",
    "color stop list",
    "color stream track",
    "color temperature",
    "color transition hint",
    "color()",
    "color-adjust",
    "color-adjust()",
    "color-contrast()",
    "color-functions",
    "color-interpolation",
    "color-interpolation-filters",
    "color-mix()",
    "color-only stream",
    "color-rendering",
    "color-scheme",
    "colorspace-params",
    "colortextures",
    "column",
    "column box",
    "column break",
    "column combinator",
    "column gap",
    "column group",
    "column group header",
    "column header",
    "column height",
    "column rule",
    "column width",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "columnspan",
    "combinators",
    "combine",
    "combining character",
    "combining shadow lists",
    "command",
    "commands",
    "comment",
    "comment end bang state",
    "comment end dash state",
    "comment end state",
    "comment less-than sign bang dash dash state",
    "comment less-than sign bang dash state",
    "comment less-than sign bang state",
    "comment less-than sign state",
    "comment start dash state",
    "comment start state",
    "comment state",
    "commentary",
    "comments",
    "commit a transaction",
    "commit computed styles",
    "commit()",
    "common writing system keys",
    "compare media queries",
    "compare two keys",
    "comparedocumentposition",
    "compassneedscalibration",
    "compatibility mapping with mouse events",
    "compatibility mouse events",
    "compatible baseline alignment preferences",
    "compatible graphics adapter",
    "compatible remote playback device",
    "compatible units",
    "compatible usage list",
    "compile a potential webassembly response",
    "compile a webassembly module",
    "compiled pattern regular expression",
    "complete a record",
    "completed transition",
    "completely available",
    "completely finish loading",
    "completely loaded",
    "completely loaded time",
    "completion",
    "completion record",
    "complex selector",
    "compliance",
    "component percent-encode set",
    "component type",
    "component value",
    "component-wise",
    "components",
    "composed",
    "composed flag",
    "composite",
    "composite face",
    "composite operation",
    "composite operation accumulate",
    "composite operation add",
    "composite operation replace",
    "composite reference component expression",
    "composited value",
    "compositeoperation",
    "composition",
    "compositionend",
    "compositionstart",
    "compositionupdate",
    "compound parameter",
    "compound selector",
    "compress and enqueue a chunk",
    "compress flush and enqueue",
    "compression context",
    "compression curve",
    "computationally independent",
    "compute",
    "compute a certificate fingerprint",
    "compute a property value",
    "compute all hit test results",
    "compute an mp3 frame size",
    "compute cookie-string",
    "compute copy element count",
    "compute hit test results",
    "compute hit test results for transient input",
    "compute missing keyframe offsets",
    "compute render extent",
    "compute shader grid",
    "compute shader stage",
    "compute the effective overload set",
    "compute the intersection",
    "compute the tick duration",
    "computed <image>",
    "computed color",
    "computed keyframe offset",
    "computed keyframes",
    "computed mime type",
    "computed plane layout",
    "computed repeat notation",
    "computed stylepropertymap",
    "computed track list",
    "computed track size",
    "computed value",
    "computed values",
    "computedfrequency",
    "computednumberofchannels",
    "computedoscfrequency",
    "computedplaybackrate",
    "computedvalue",
    "computing a block of audio",
    "computing device memory value",
    "computing the envelope rate",
    "computing the makeup gain",
    "computing the tick duration",
    "concept namespace",
    "concept-algorithm-exception",
    "concept-context-namespace",
    "concept-fragment-serializing-algorithm",
    "concept-generate-prefix",
    "concept-generated-prefix",
    "concept-namespace-localname-set",
    "concept-namespace-prefix-map",
    "concept-parse-fragment",
    "concept-record-namespace-info",
    "concept-serialize-attr-value",
    "concept-serialize-doctype",
    "concept-serialize-html",
    "concept-serialize-xml",
    "concept-serialize-xml-attributes",
    "concept-well-formed",
    "concept-xml-serialization-algorithm",
    "concrete",
    "concrete object size",
    "conditional group rule",
    "conditional import",
    "conditional processing attribute",
    "conditionally exposed",
    "conditionally hang",
    "conditionally hsts-safe origin",
    "confidence",
    "config",
    "configuration descriptor",
    "configuration object",
    "configuration point",
    "configure the image decoder",
    "confirm",
    "conformance",
    "conformant server",
    "conformant style sheet",
    "conformant user agent",
    "conforming documents",
    "conforming ecmascript implementation",
    "conforming implementation",
    "conforming scripted web animations user agent",
    "conforming set of idl fragments",
    "conforming user agent",
    "conforming-touch-behavior",
    "conforms to an element's touch-action",
    "conic-gradient()",
    "connect",
    "connect to sensor",
    "connect-src",
    "connected",
    "connecting",
    "connection",
    "connection flag",
    "connection pool",
    "connection state",
    "connection timing info",
    "connection type",
    "connection types",
    "connection-checking wrapper",
    "connectionavailable",
    "connectionstatechange",
    "consecutive",
    "considered for event timing",
    "considered text",
    "console",
    "console steps",
    "constant",
    "constantsourcenode",
    "constantsourceoptions",
    "constrainable object",
    "constrainboolean",
    "constraindomstring",
    "constraindouble",
    "constrainedness",
    "constraint",
    "constraint rectangle",
    "constraint validation api",
    "constraints",
    "constraints and constraintset",
    "constraintset",
    "construct",
    "construct a fragment result",
    "construct a geolocation sensor object",
    "construct a gyroscope object",
    "construct a magnetometer object",
    "construct a proximity sensor object",
    "construct a webassembly module object",
    "construct a websocket resource name",
    "construct a websocket url",
    "construct an accelerometer object",
    "construct an ambient light sensor object",
    "construct an orientation sensor object",
    "construct policy from dictionary and origin",
    "constructible",
    "constructing",
    "constructing a websocket resource name",
    "constructing a websocket url",
    "constructing entry list",
    "constructing the entry list",
    "construction stack",
    "constructor",
    "constructor operation",
    "constructor operations",
    "constructor steps",
    "consume a component value",
    "consume a data type name",
    "consume a declaration",
    "consume a function",
    "consume a list of declarations",
    "consume a list of rules",
    "consume a name",
    "consume a number",
    "consume a numeric token",
    "consume a qualified rule",
    "consume a simple block",
    "consume a string token",
    "consume a syntax component",
    "consume a syntax definition",
    "consume a token",
    "consume a url token",
    "consume an at-rule",
    "consume an escaped code point",
    "consume an html character reference",
    "consume an ident-like token",
    "consume an identifier",
    "consume comments",
    "consume the next input token",
    "consume the remnants of a bad url",
    "consume user activation",
    "consumed as part of an attribute",
    "consumer",
    "contact",
    "contact geometry",
    "contact picker is showing flag",
    "contact picker task source",
    "contain",
    "contain constraint",
    "contain-fit sizing",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container element",
    "container frame element",
    "container policy",
    "container-based offset",
    "containing block",
    "containing block chain",
    "containing block for all descendants",
    "containing only",
    "containing service worker registration",
    "containment",
    "contains",
    "contains a gamepad user gesture",
    "contains a header-delivered content security policy",
    "contains background fetch",
    "content",
    "content (of a box)",
    "content area",
    "content attributes",
    "content box",
    "content document",
    "content edge",
    "content editable",
    "content encoding",
    "content height",
    "content index entry",
    "content language",
    "content language state",
    "content model",
    "content models",
    "content rating",
    "content rect",
    "content security policy",
    "content security policy directive",
    "content security policy object",
    "content security policy state",
    "content security policy syntax",
    "content set",
    "content size suggestion",
    "content timeline",
    "content type",
    "content width",
    "content writing system",
    "content()",
    "content-based minimum size",
    "content-box",
    "content-disposition",
    "content-distribution",
    "content-distribution properties",
    "content-empty page",
    "content-encoding",
    "content-language",
    "content-list",
    "content-security-policy",
    "content-security-policy-report-only",
    "content-type metadata",
    "content-visibility",
    "contentful",
    "contentful image",
    "contents",
    "contents of an arraybuffer",
    "context",
    "context element",
    "context mode",
    "context namespace",
    "context object",
    "context type",
    "context-specific sniffing algorithm",
    "contextmenu",
    "contexts in which this element can be used",
    "contiguous exclusive text nodes",
    "contiguous text nodes",
    "continue",
    "continuous event",
    "continuous event task",
    "continuous media",
    "contractee",
    "contrast",
    "contrast ratio",
    "contributes a script-blocking style sheet",
    "control",
    "control message",
    "control message queue",
    "control message steps",
    "control messages",
    "control pad",
    "control thread",
    "control transfer",
    "control's data",
    "control-character-in-input-stream",
    "control-character-reference",
    "controlled",
    "controller",
    "controlling",
    "controlling browsing context",
    "controlling browsing contexts",
    "controlling user agent",
    "controls",
    "conversion to db",
    "convert",
    "convert a cssunitvalue",
    "convert a json-derived javascript value to an infra value",
    "convert a key to a value",
    "convert a list of dimensions to a list of pixel values",
    "convert a mark to a timestamp",
    "convert a name to a timestamp",
    "convert a non-negative integer i to an octet string of length n",
    "convert a string to a number",
    "convert a value to a key",
    "convert a value to a key range",
    "convert a value to a multientry key",
    "convert an infra value to a json-compatible javascript value",
    "convert artwork algorithm",
    "convert code unit to scalar value",
    "convert data to a format suitable for ingestion into the target",
    "convert fetch timestamp",
    "convert from native entity type",
    "convert header names to a sorted-lowercase set",
    "convert image objects",
    "convert line endings to native",
    "convert ndefrecord.data bytes",
    "convert the depth map value to distance",
    "convert to a list of name-value pairs",
    "converted to a numeric type or bigint",
    "converted to an ecmascript value",
    "converted to an idl value",
    "converted to ecmascript values",
    "converted to idl values",
    "converting",
    "converting a character width to pixels",
    "converting a color value from a non-premultiplied representation to a premultiplied one",
    "converting a color value from a premultiplied representation to a non-premultiplied one",
    "converting a json-derived javascript value to an infra value",
    "converting an infra value to a json-compatible javascript value",
    "converting arguments for an asynchronous iterator method",
    "converting line endings to native",
    "converting nodes into a node",
    "convolvernode",
    "convolveroptions",
    "cookie",
    "cookie change",
    "cookie change subscription",
    "cookie change subscription list",
    "cookie domain",
    "cookie expiry time",
    "cookie http only",
    "cookie name",
    "cookie name filter",
    "cookie path",
    "cookie same site",
    "cookie secure only",
    "cookie store",
    "cookie value",
    "cookie-averse document object",
    "cookie-like fingerprinting",
    "cookie-string",
    "cookies",
    "coop enforcement result",
    "coordinated self-alignment preference",
    "copy",
    "copy a namespace prefix map",
    "copy secondary buffer",
    "copy-into",
    "copydatablockbytes",
    "copylink",
    "copymove",
    "corb check",
    "corb-protected mime type",
    "core attributes",
    "core operator",
    "corner diagonal",
    "corner-shape",
    "corners",
    "correctly rounded",
    "corresponding animator instance",
    "corresponding effect",
    "corresponding element",
    "corresponding input source state type",
    "corresponding use element",
    "corrupted video frame count",
    "cors check",
    "cors filtered response",
    "cors non-wildcard request-header name",
    "cors protocol",
    "cors request",
    "cors settings attribute",
    "cors settings attribute credentials mode",
    "cors-cross-origin",
    "cors-preflight cache",
    "cors-preflight fetch",
    "cors-preflight request",
    "cors-safelisted method",
    "cors-safelisted request-header",
    "cors-safelisted response-header name",
    "cors-same-origin",
    "cors-unsafe request-header byte",
    "cors-unsafe request-header names",
    "cos()",
    "count map",
    "count queuing strategy size function",
    "count the records in a range",
    "counter",
    "counter properties",
    "counter scope",
    "counter style",
    "counter symbol",
    "counter()",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "counters",
    "counters()",
    "country subdivision code element",
    "country subdivision name",
    "country subdivision names",
    "country-name",
    "cover constraint",
    "crash reports",
    "create",
    "create a 2d matrix",
    "create a 3d matrix",
    "create a bluetoothcharacteristicproperties instance from the characteristic",
    "create a bluetoothremotegattcharacteristic representing",
    "create a bluetoothremotegattdescriptor representing",
    "create a bluetoothremotegattservice representing",
    "create a classic script",
    "create a connection",
    "create a constructed cssstylesheet",
    "create a cookie",
    "create a cookielistitem",
    "create a cpu depth information instance",
    "create a css style sheet",
    "create a cssunitvalue from a pair",
    "create a cssunitvalue from a sum value item",
    "create a date object",
    "create a document fragment",
    "create a dommatrix from a 2d dictionary",
    "create a dommatrix from a dictionary",
    "create a dommatrix from the 2d dictionary",
    "create a dommatrix from the dictionary",
    "create a dommatrixreadonly from the 2d dictionary",
    "create a dommatrixreadonly from the dictionary",
    "create a dompoint from the dictionary",
    "create a dompointreadonly from the dictionary",
    "create a domquad from the domquadinit dictionary",
    "create a domquad from the domrectinit dictionary",
    "create a domrect from the dictionary",
    "create a domrectreadonly from the dictionary",
    "create a frozen array",
    "create a global object",
    "create a hid report item",
    "create a hit test result",
    "create a hit test result for transient input",
    "create a hit test source",
    "create a hit test source for transient input",
    "create a host function",
    "create a largestcontentfulpaint entry",
    "create a layout api context",
    "create a layout constraints object",
    "create a layout fragment",
    "create a legacy callback interface object",
    "create a legacy factory function",
    "create a mediacapabilitiesdecodinginfo",
    "create a mediacapabilitiesencodinginfo",
    "create a mediaerror",
    "create a medialist object",
    "create a memory buffer",
    "create a memory object",
    "create a module script",
    "create a named properties object",
    "create a namespace object",
    "create a new animator instance",
    "create a new auxiliary browsing context",
    "create a new batterymanager object",
    "create a new browsing context",
    "create a new browsing context group",
    "create a new cache entry",
    "create a new filesystemwritablefilestream",
    "create a new javascript realm",
    "create a new key input state object",
    "create a new memory attribution",
    "create a new memory breakdown entry",
    "create a new memory measurement",
    "create a new nested browsing context",
    "create a new object implementing the interface",
    "create a new pointer input state",
    "create a new signed exchange report",
    "create a new top-level browsing context",
    "create a notification",
    "create a paintrenderingcontext2d object",
    "create a permissions policy for a browsing context",
    "create a permissions policy for a browsing context from response",
    "create a permissionstatus",
    "create a potential-cors request",
    "create a push subscription",
    "create a receiving browsing context",
    "create a reference space",
    "create a scheduler task queue",
    "create a shadow root",
    "create a shadow root reference",
    "create a sorted name list",
    "create a storage bucket",
    "create a storage shelf",
    "create a sum value",
    "create a table object",
    "create a type",
    "create a type from a unit map",
    "create a videoframe",
    "create a web element reference",
    "create a webgl depth information instance",
    "create a worklet global scope",
    "create an agent",
    "create an anchor from frame",
    "create an anchor from hit test result",
    "create an answer",
    "create an arbitrary brand",
    "create an arbitrary version",
    "create an element",
    "create an element for a token",
    "create an entry",
    "create an event",
    "create an exports object",
    "create an identity transformstream",
    "create an import map parse result",
    "create an inheritance stack",
    "create an interface object",
    "create an interface prototype object",
    "create an internal representation",
    "create an intrinsic sizes object",
    "create an offer",
    "create an rtcdatachannel",
    "create an rtcdtmfsender",
    "create an rtcicecandidate",
    "create an rtcrtpreceiver",
    "create an rtcrtpsender",
    "create an rtcrtptransceiver",
    "create an rtcsctptransport",
    "create an underlying value",
    "create and initialize a document object",
    "create and populate a resizeobserverentry",
    "create brands",
    "create client",
    "create job",
    "create mock sensor",
    "create ndef message",
    "create ndef record",
    "create new anchor object",
    "create record objects",
    "create the attribution",
    "create the navigation timing entry",
    "create window client",
    "create-document-policy",
    "create-for-browsingcontext",
    "createanswer",
    "createbytedatablock",
    "created",
    "createdataproperty",
    "createdocument()",
    "createelement()",
    "createelementns()",
    "createhtmldocument()",
    "createoffer",
    "createresolvingfunctions",
    "creating a cookie",
    "creating a device info object",
    "creating a frozen array",
    "creating a frozen array from an iterable",
    "creating a header list from the cbor map",
    "creating a hid report item",
    "creating a new batterymanager object",
    "creating a new browsing context",
    "creating a new memory attribution",
    "creating a new memory breakdown entry",
    "creating a new memory measurement",
    "creating a new session",
    "creating a notification",
    "creating a permissions policy",
    "creating a permissions policy from a response",
    "creating a policy container from a fetch response",
    "creating a scheduler task queue",
    "creating a sequence from an iterable",
    "creating a sum value",
    "creating a type",
    "creating an answer",
    "creating an element",
    "creating an event",
    "creating an identity transformstream",
    "creating an observable array exotic object",
    "creating an offer",
    "creating an operation function",
    "creating an rtcicecandidate",
    "creating record objects",
    "creating-a-device-info-object",
    "creation",
    "creator base url",
    "creator origin",
    "creator url",
    "credential",
    "credential chooser",
    "credential id",
    "credential key pair",
    "credential parameters",
    "credential private key",
    "credential properties",
    "credential public key",
    "credential source",
    "credential storage modality",
    "credential store",
    "credentialid",
    "credentialidlength",
    "credentialpublickey",
    "credentials",
    "credentials mode",
    "credprops",
    "critical subresources",
    "crop bitmap data to the source rectangle with formatting",
    "cross axis",
    "cross dimension",
    "cross size",
    "cross size property",
    "cross-axis",
    "cross-axis baseline set",
    "cross-document messaging",
    "cross-end",
    "cross-fade()",
    "cross-origin",
    "cross-origin accessible window property name",
    "cross-origin credentials",
    "cross-origin isolation mode",
    "cross-origin opener policy",
    "cross-origin opener policy enforcement result",
    "cross-origin opener policy value",
    "cross-origin request",
    "cross-origin resource policy check",
    "cross-origin resource policy internal check",
    "cross-origin-ancestor",
    "cross-origin-descendant",
    "cross-origin-embedder-policy",
    "cross-origin-embedder-policy-report-only",
    "cross-origin-isolated",
    "cross-origin-opener-policy",
    "cross-origin-opener-policy-report-only",
    "cross-origin-referrer request",
    "cross-origin-resource-policy",
    "cross-origin-unreachable",
    "cross-platform attachment",
    "cross-size",
    "cross-start",
    "crossorigin",
    "crossoriginget",
    "crossorigingetownpropertyhelper",
    "crossoriginownpropertykeys",
    "crossoriginproperties",
    "crossoriginpropertyfallback",
    "crossoriginset",
    "crush",
    "crypto",
    "cryptographic nonce",
    "cryptographic nonce metadata",
    "cryptokey",
    "cryptokeypair",
    "csp list",
    "csp violation report",
    "css box",
    "css bracketed range notation",
    "css color profile",
    "css counters set",
    "css declaration",
    "css declaration block",
    "css ident",
    "css identifier",
    "css layout box",
    "css pixels",
    "css property to idl attribute",
    "css qualified name",
    "css region",
    "css rule",
    "css rules",
    "css selector",
    "css style sheet",
    "css style sheet set",
    "css style sheet set name",
    "css style sheets",
    "css-connected",
    "css-wide keywords",
    "cssfontfacerule",
    "cssfontfeaturevaluesrule",
    "cssstyledeclaration",
    "csstext",
    "cubic bézier easing function",
    "cue",
    "cue component class names",
    "cue computed line",
    "cue computed position",
    "cue computed position alignment",
    "cue payload",
    "cue text",
    "cue-after",
    "cue-before",
    "culprit browsing context container",
    "culprit frame",
    "cumulative layout shift (cls) score",
    "current",
    "current battery status information",
    "current browsing context",
    "current composition operator",
    "current context is navigation source",
    "current default path",
    "current dimension value",
    "current document",
    "current document readiness",
    "current drag operation",
    "current element queue",
    "current entry",
    "current entry of the joint session history",
    "current event target",
    "current finished promise",
    "current focus chain of a top-level browsing context",
    "current frequency data",
    "current global object",
    "current high resolution time",
    "current input character",
    "current input code point",
    "current input token",
    "current iteration",
    "current language",
    "current layout",
    "current light level",
    "current navigation was lazy loaded",
    "current node",
    "current orientation angle",
    "current orientation type",
    "current origin",
    "current parent browsing context",
    "current pixel density",
    "current playback position",
    "current posture",
    "current ready promise",
    "current realm",
    "current realm record",
    "current request",
    "current screen orientation",
    "current session",
    "current settings object",
    "current source",
    "current stack trace",
    "current svg document fragment",
    "current target element",
    "current template insertion mode",
    "current text position",
    "current time",
    "current time-domain data",
    "current top-level browsing context",
    "current transformation matrix",
    "current transition generation",
    "current translate point object",
    "current tuple",
    "current url",
    "current user prompt",
    "current value",
    "currently focused area of a top-level browsing context",
    "currently logged in user",
    "currently running task",
    "currentsrc",
    "currenttarget",
    "cursive",
    "cursive script",
    "cursor",
    "custom",
    "custom certificate requirements",
    "custom data attribute",
    "custom effect",
    "custom element",
    "custom element constructor",
    "custom element definition",
    "custom element reaction queue",
    "custom element reactions",
    "custom element reactions stack",
    "custom element state",
    "custom highlight",
    "custom highlight name",
    "custom highlight pseudo-element",
    "custom media query",
    "custom property",
    "custom property name string",
    "custom property registration",
    "custom selector",
    "custom state pseudo class",
    "custom validity error message",
    "custom-params",
    "customized built-in element",
    "cut",
    "cx",
    "cy",
    "cycle",
    "cyclic module record",
    "cyclic percentage size",
    "cylindrical polar color",
    "d",
    "dark color scheme",
    "dash list",
    "dash positions",
    "data",
    "data adjustment",
    "data block",
    "data stage",
    "data state",
    "data transport",
    "data type name",
    "data url",
    "data-",
    "data-*",
    "data-encoding-offer",
    "data-frame",
    "data:",
    "data: url",
    "data: url processor",
    "data: url struct",
    "database",
    "database access task source",
    "datachannel",
    "dataerror",
    "datafld",
    "dataformatas",
    "datalist",
    "datalist element",
    "datasrc",
    "datatransfer",
    "dataview",
    "date",
    "date serialize",
    "date state",
    "date.now()",
    "datetime value",
    "dblclick",
    "dd",
    "deactivate",
    "deactivate a sensor object",
    "deactivate an event handler",
    "deactivated",
    "dead key",
    "decibels to linear gain unit",
    "decimal",
    "decimal character reference start state",
    "decimal character reference state",
    "declaration",
    "declaration block",
    "declarative custom selector",
    "declared",
    "declared document policy",
    "declared origin",
    "declared permissions policy",
    "declared playback state",
    "declared policy",
    "declared stylepropertymap",
    "declared value",
    "declination angle",
    "decode",
    "decode and enqueue a chunk",
    "decode timestamp",
    "decode track metadata",
    "decoder",
    "decoding",
    "decompress and enqueue a chunk",
    "decompress flush and enqueue",
    "decorated bounding box",
    "decorating box",
    "decreasing",
    "decrypt",
    "dedicated media source failure steps",
    "dedicated worker agent",
    "deep link",
    "default",
    "default `user-agent` value",
    "default action",
    "default allowlist",
    "default allowlists",
    "default asynchronous iterator object",
    "default behavior",
    "default button",
    "default classic script fetch options",
    "default configuration",
    "default control pipe",
    "default display mode",
    "default document timeline",
    "default encode set",
    "default endpoint",
    "default face",
    "default fallback constant",
    "default features",
    "default fetch and process the linked resource",
    "default inline xr device",
    "default iterator object",
    "default maximum",
    "default method steps",
    "default microphone",
    "default minimum",
    "default mock microphone",
    "default mock microphone device",
    "default namespace",
    "default object size",
    "default origin",
    "default playback start position",
    "default pointer parameters",
    "default policy",
    "default port",
    "default presentation request",
    "default readers",
    "default referrer policy",
    "default rule thickness",
    "default screen orientation",
    "default sensor",
    "default sizing algorithm",
    "default step",
    "default step base",
    "default style sheet",
    "default style state",
    "default theme color",
    "default tojson steps",
    "default unlock gesture",
    "default value",
    "default value override",
    "default values",
    "default-context",
    "default-src",
    "default/on",
    "defaultcolorspace",
    "defaultvalue",
    "define an algorithm",
    "define an inherited policy for feature in browsing context",
    "define an inherited policy for feature in container at origin",
    "define the asynchronous iteration methods",
    "define the attributes",
    "define the constants",
    "define the global property references",
    "define the iteration methods",
    "define the operations",
    "define the regular attributes",
    "define the regular operations",
    "define the static attributes",
    "define the static operations",
    "define the unforgeable regular attributes",
    "define the unforgeable regular operations",
    "defined",
    "defined property name",
    "defines",
    "defining term",
    "definite",
    "definite column position",
    "definite column span",
    "definite grid position",
    "definite grid span",
    "definite position",
    "definite row position",
    "definite row span",
    "definite size",
    "definite span",
    "definition of keys and values",
    "definitions",
    "defs",
    "degenerate ratio",
    "degradationpreference",
    "del",
    "delay",
    "delay the load event",
    "delaying load events mode",
    "delaying-the-load-event flag",
    "delaynode",
    "delayoptions",
    "delayreader",
    "delays the load event",
    "delaywriter",
    "delegates focus",
    "delete",
    "delete a content index entry",
    "delete a cookie",
    "delete a database",
    "delete all cookies",
    "delete an anchor",
    "delete an existing named property",
    "delete cookie",
    "delete cookies",
    "delete mock camera",
    "delete mock capture device",
    "delete mock sensor",
    "delete records from an object store",
    "delete session",
    "delete the selection",
    "deleted",
    "deleter",
    "deliver resize loop error notification",
    "delta",
    "denies the wake lock",
    "denominator",
    "density-corrected intrinsic width and height",
    "deny a wake lock",
    "deny wake lock",
    "deprecate",
    "deprecated",
    "deprecates",
    "deprecation",
    "deprecation reports",
    "deproject",
    "deprojection distortion coefficients",
    "depth clipping",
    "depth coordinates transformation matrix",
    "depth map",
    "depth map value",
    "depth map values",
    "depth or stencil renderable format",
    "depth stream track",
    "depth+color stream",
    "depth-only stream",
    "depth-sensing",
    "depthstenciltextures",
    "dequeue",
    "derive the accessible name",
    "derivebits",
    "derivekey",
    "deriving the accessible name",
    "desc",
    "descendant",
    "descendant browsing context",
    "descendant combinator",
    "descendant script fetch options",
    "descendant text content",
    "descendant-selectors",
    "descent metric",
    "description",
    "descriptions",
    "descriptive element",
    "descriptor",
    "descriptors",
    "deserialization steps",
    "deserialize a shadow root",
    "deserialize a web element",
    "deserialize as a page load strategy",
    "deserialize as a proxy",
    "deserialize as an unhandled prompt behavior",
    "design mode enabled",
    "designated resource",
    "desired size to fill a stream’s internal queue",
    "desktop focus",
    "desktop focus event",
    "desktop focus events",
    "destination",
    "destination browsing context",
    "destination node",
    "desynchronized",
    "detacharraybuffer",
    "detached",
    "detached shadow root",
    "detaching from a media element",
    "details",
    "details notification task steps",
    "detector curve",
    "determine if a performance entry buffer is full",
    "determine if a site has storage access",
    "determine if dtmf can be sent",
    "determine navigation params policy container",
    "determine nosniff",
    "determine request’s referrer",
    "determine the baseline configuration for an attribute",
    "determine the baseline configuration for an element",
    "determine the creation sandboxing flags",
    "determine the device pixel ratio",
    "determine the effective configuration for an attribute",
    "determine the effective configuration for an element",
    "determine the fallback encoding",
    "determine the http cache partition",
    "determine the intrinsic sizes",
    "determine the ip address space",
    "determine the layout attribute",
    "determine the maximum scalefactor",
    "determine the network partition key",
    "determine the origin",
    "determine the purpose of an image",
    "determine the storage access policy",
    "determine the target of an event handler",
    "determine the type of a calculation",
    "determine the used color scheme",
    "determine the value of a named property",
    "determine the value of an indexed property",
    "determine the visibility state",
    "determine-compatibility",
    "determines the set of origins on which the public key credential may be exercised",
    "determining the http cache partition",
    "determining the matching applications",
    "determining the network partition key",
    "device",
    "device change notification steps",
    "device coordinate system",
    "device descriptor",
    "device discovery procedure",
    "device enumeration can proceed",
    "device information can be exposed",
    "device permission revocation algorithm",
    "device sensor",
    "device timeline",
    "device-cmyk()",
    "device-enumeration-can-proceed",
    "device-information-can-be-exposed",
    "device-pixel-ratio",
    "device-posture",
    "devicechange",
    "deviceid",
    "devicemotion",
    "deviceorientation",
    "deviceorientationabsolute",
    "devicepixelratio",
    "dfn",
    "dial",
    "dialog",
    "dialog focusing steps",
    "dice",
    "dictionary",
    "dictionary members",
    "dictionary types",
    "did-perform-automatic-track-selection",
    "differs significantly",
    "digest",
    "digit",
    "digitizer",
    "dimension",
    "dimension attribute source",
    "dimension attributes",
    "dir",
    "direct manipulation",
    "direct nesting",
    "directed progress",
    "direction",
    "direction at the end of a path segment",
    "direction at the start of a path segment",
    "direction of a path",
    "direction of playback",
    "direction-agnostic size",
    "directional embedding",
    "directional keyword",
    "directional override",
    "directionality of an attribute",
    "directionality-capable attributes",
    "directionally scroll an element",
    "directionally scroll the element",
    "directionless",
    "directive",
    "directive name",
    "directive prologue",
    "directive set",
    "directive-name",
    "directive-value",
    "directives",
    "directly associated with an animation",
    "directly nested",
    "directory",
    "directory entry",
    "directory reader",
    "dirtiness",
    "dirty checkedness",
    "dirty checkedness flag",
    "dirty value flag",
    "disable internals",
    "disable remote playback",
    "disabled",
    "disabled fieldset",
    "disabled flag",
    "disabled state",
    "disassociate animator instance of worklet animation",
    "discard",
    "discard a document",
    "discarded",
    "dischargingtimechange",
    "disconnect",
    "disconnect from a remote playback device",
    "discover all characteristic descriptors",
    "discover characteristics by uuid",
    "discover primary service by service uuid",
    "discoverable credential",
    "discoverable credential capable",
    "discoverable mode",
    "discrete",
    "dismiss",
    "dismiss alert",
    "dismiss and notify state",
    "dismiss state",
    "dismissed",
    "dismisses",
    "disowned",
    "dispatch",
    "dispatch a composition event",
    "dispatch a keydown action",
    "dispatch a keyup action",
    "dispatch a pause action",
    "dispatch a pointercancel action",
    "dispatch a pointerdown action",
    "dispatch a pointermove action",
    "dispatch a pointerup action",
    "dispatch a scroll action",
    "dispatch action algorithms",
    "dispatch actions",
    "dispatch actions for a string",
    "dispatch command",
    "dispatch nfc content",
    "dispatch pending event timing entries",
    "dispatch size",
    "dispatch the event",
    "dispatch the events for a typeable string",
    "dispatch tick actions",
    "dispatches navbeforefocus event",
    "dispatches navnotarget event",
    "dispatching navbeforefocus event",
    "dispatching navnotarget event",
    "display",
    "display a plugin",
    "display mode",
    "display modes values",
    "display name",
    "display no plugin",
    "display property",
    "display size",
    "display state",
    "display surface",
    "display surfaces",
    "display technology",
    "display type",
    "display-capture-feature",
    "displayoperatorminheight",
    "displaystyle",
    "displaysurface",
    "disposition",
    "distance",
    "distance along the ray",
    "distance fraction",
    "distinctive permanent identifier",
    "distinguishable",
    "distinguishing argument index",
    "distortioncoefficients",
    "distribute extra space",
    "distributed alignment",
    "distributed width",
    "distributing excess width to columns",
    "distribution list",
    "div",
    "dl",
    "dns resolution",
    "dns-prefetch",
    "dnt",
    "dnt:0",
    "dnt:1",
    "do bytes match metadatalist?",
    "do not apply",
    "doctype",
    "doctype legacy string",
    "doctype name",
    "doctype name state",
    "doctype public identifier (double-quoted) state",
    "doctype public identifier (single-quoted) state",
    "doctype state",
    "doctype system identifier (double-quoted) state",
    "doctype system identifier (single-quoted) state",
    "doctype.name",
    "document",
    "document address",
    "document animator definition",
    "document animator definitions",
    "document base url",
    "document css style sheets",
    "document cumulative layout shift (dcls) score",
    "document element",
    "document family",
    "document for timing",
    "document fragment host",
    "document language",
    "document layout definition",
    "document layout definitions",
    "document load timing",
    "document load timing info",
    "document open steps",
    "document order",
    "document paint definition",
    "document paint definitions",
    "document policy",
    "document policy directive",
    "document readiness",
    "document timeline",
    "document title",
    "document tree",
    "document type",
    "document unload timing info",
    "document url",
    "document white space",
    "document white space characters",
    "document write steps",
    "document-domain",
    "document-policy",
    "document-policy-report-only",
    "document-tree child browsing context",
    "document-tree child browsing context name property set",
    "document.domain",
    "document_fragment_node",
    "document_position_disconnected",
    "documentandelementeventhandlers",
    "documentelement",
    "documentfragment",
    "documentorshadowroot",
    "documenttype",
    "document’s body element",
    "does not contain background fetch",
    "doesn’t match the stored exchange",
    "dom",
    "dom anchor",
    "dom application",
    "dom client rectangle",
    "dom interface",
    "dom level 0",
    "dom manipulation task source",
    "dom tree accessors",
    "dom-domparser",
    "dom-domparser-parsefromstring",
    "dom-element-innerhtml",
    "dom-element-insertadjacenthtml",
    "dom-element-outerhtml",
    "dom-range-createcontextualfragment",
    "dom-xmlserializer",
    "dom-xmlserializer-serializetostring",
    "domactivate",
    "domain",
    "domain name",
    "domain namespace tree",
    "domain to ascii",
    "domain to unicode",
    "domains",
    "domattrmodified",
    "domcharacterdatamodified",
    "domcontentloaded",
    "domerror",
    "domexception",
    "domfocusin",
    "domfocusout",
    "domhighrestimestamp",
    "domimplementation",
    "dominant baseline",
    "dominant-baseline",
    "dommatrix",
    "dommatrix2dinit",
    "dommatrixinit",
    "domnodeinserted",
    "domnodeinsertedintodocument",
    "domnoderemoved",
    "domnoderemovedfromdocument",
    "domrect",
    "domstring",
    "domsubtreemodified",
    "domtokenlist",
    "done flag",
    "double",
    "double-dot path segment",
    "doublerange",
    "down",
    "down-mixing",
    "downlinkmax for an available interface",
    "download the hyperlink",
    "downstream",
    "downstream node",
    "drag",
    "drag and drop",
    "drag data store",
    "drag data store allowed effects state",
    "drag data store bitmap",
    "drag data store default feedback",
    "drag data store hot spot coordinate",
    "drag data store item list",
    "drag data store mode",
    "draw a bounding box from the framebuffer",
    "draw a paint image",
    "draw command",
    "drawing model",
    "drawing states",
    "dropped entries count",
    "dropped initial",
    "dropped video frame count",
    "dropzone",
    "dt",
    "dtend",
    "dtstart",
    "duplex printing",
    "duplex stream",
    "duplicate-attribute",
    "duration",
    "duration change",
    "duration time component",
    "duration time component scale",
    "dynamic context",
    "dynamic error",
    "dynamic markup insertion",
    "dynamic viewport size",
    "dynamic viewport-percentage units",
    "dynamicscompressornode",
    "dynamicscompressoroptions",
    "eager",
    "eager page loading strategy",
    "ean-13",
    "earliest possible position",
    "earliest possible position when the script started",
    "early error",
    "early error rule",
    "earth’s reference coordinate system",
    "easing function",
    "east asian width property",
    "ecdh",
    "ecdh curve name",
    "ecdh derivation steps",
    "ecdh generation steps",
    "ecdh key export steps",
    "ecdh key import steps",
    "ecdhkeyderiveparams",
    "ecdsa curve name",
    "ecdsa generation steps",
    "ecdsa key export steps",
    "ecdsa key import steps",
    "ecdsa signature steps",
    "ecdsa verification steps",
    "ecdsaparams",
    "echocancellation",
    "eckeyalgorithm",
    "eckeygenparams",
    "eckeyimportparams",
    "ecmascript type",
    "ect",
    "editable",
    "editable context",
    "editable element",
    "editing host",
    "editing host of",
    "editing hosts",
    "effect",
    "effect stack",
    "effect target",
    "effect value",
    "effective attribute configuration",
    "effective automation rate",
    "effective character map",
    "effective connection type",
    "effective connection types",
    "effective directive value",
    "effective domain",
    "effective element configuration",
    "effective end offset",
    "effective minimum sync interval for origin",
    "effective overload set",
    "effective playback rate",
    "effective position of the legacy mouse pointer",
    "effective resident key requirement for credential creation",
    "effective script origin",
    "effective scroll offset",
    "effective scroll offsets",
    "effective source list",
    "effective start offset",
    "effective user verification requirement for assertion",
    "effective user verification requirement for credential creation",
    "eight-bit decimal value",
    "elapsed time",
    "element",
    "element allow list",
    "element block list",
    "element clear",
    "element click",
    "element click intercepted",
    "element context",
    "element contexts",
    "element definition",
    "element definition is running",
    "element displayed",
    "element displayedness",
    "element drop list",
    "element from point",
    "element has the focus",
    "element instance",
    "element interface",
    "element kind",
    "element location strategy",
    "element not interactable",
    "element queue",
    "element send keys",
    "element timing processing",
    "element type",
    "element's",
    "element()",
    "element-based offset",
    "element-not-rendered",
    "element.localname",
    "element.namespaceuri",
    "element.prefix",
    "elementrect-height",
    "elementrect-width",
    "elementrect-x",
    "elementrect-y",
    "elements",
    "elements from point",
    "elements with default margins",
    "elevated permissions",
    "elevation",
    "eligible feed links",
    "eligible for autoplay",
    "eligible track",
    "ellipse",
    "ellipse method steps",
    "ellipse()",
    "elliptic curve diffie-hellman",
    "em",
    "em-over baseline",
    "em-under baseline",
    "email",
    "email state",
    "embed",
    "embed task source",
    "embedded accessible name",
    "embedded content",
    "embedded document",
    "embedded watch action",
    "embedder policy",
    "embedder policy value",
    "embedding custom non-visible data",
    "embedding document",
    "embedding-csp",
    "embellished operator",
    "emergency",
    "emit a context created event",
    "emit an event",
    "emoji presentation participating code points",
    "empty",
    "empty cell",
    "empty float area",
    "empty host",
    "empty import map",
    "empty metadata",
    "empty permissions policy",
    "empty record",
    "empty string",
    "empty table",
    "empty-cells",
    "empty-element tag",
    "emptyelemtag",
    "emulated native anchors",
    "enable a css style sheet set",
    "enable directive",
    "enabled",
    "enabled css style sheet set",
    "encapsulation contexts",
    "encode",
    "encode a canvas as base64 a canvas element",
    "encode and enqueue a chunk",
    "encode and flush",
    "encode or fail",
    "encoder",
    "encoder state",
    "encoding",
    "encoding a canvas as base64",
    "encoding declaration state",
    "encoding labels",
    "encoding name",
    "encoding sniffing algorithm",
    "encrypt",
    "encrypted",
    "encrypted-media",
    "enctype",
    "end",
    "end collection tag",
    "end delay",
    "end of iteration",
    "end of stream",
    "end page value",
    "end tag open state",
    "end tags",
    "end time",
    "end-of-queue",
    "end-tag-with-attributes",
    "end-tag-with-trailing-solidus",
    "enddelay",
    "ended",
    "ended audio playback",
    "ended playback",
    "ended video playback",
    "ending edges",
    "ending point",
    "ending shape",
    "ending token",
    "endpoint",
    "endpoint descriptor",
    "endpoint group",
    "endpoint node",
    "endpoint pair",
    "endpoint-on-the-path",
    "endpoints",
    "ends for any reason other than the stop() method being invoked",
    "endtime",
    "enforce a response's cross-origin opener policy",
    "enforce the policy",
    "enforced",
    "enforcement",
    "engagement gesture",
    "enough data to ensure uninterrupted playback",
    "enqueue",
    "enqueue a custom element callback reaction",
    "enqueue a custom element upgrade reaction",
    "enqueue an element on the appropriate element queue",
    "enqueues a control message",
    "ensure an immersive xr device is selected",
    "ensure there is a subpath",
    "ensurecspdoesnotblockstringcompilation",
    "ensurecspdoesnotblockstringcompilation(callerrealm, calleerealm, source)",
    "entangle",
    "entry",
    "entry construction algorithm",
    "entry execution context",
    "entry global object",
    "entry list",
    "entry point",
    "entry point io type",
    "entry realm",
    "entry settings object",
    "entry update",
    "entry value",
    "entrytype",
    "enumerableownpropertynames",
    "enumerate all devices attached to the system",
    "enumerate immersive xr devices",
    "enumerated attribute",
    "enumerated attributes",
    "enumeration",
    "enumeration types",
    "enumeration value",
    "env()",
    "envelopefollower",
    "environment",
    "environment discarding steps",
    "environment encoding",
    "environment settings object",
    "environmentrecord",
    "eof code point",
    "eof-before-tag-name",
    "eof-in-cdata",
    "eof-in-comment",
    "eof-in-doctype",
    "eof-in-script-html-comment-like-text",
    "eof-in-tag",
    "equal dictionaries",
    "equal numeric value",
    "equal to",
    "equals",
    "equivalent",
    "equivalent path",
    "equivalent to an empty string",
    "equivalent token sequence",
    "erase all event listeners and handlers",
    "error",
    "error code",
    "error data",
    "error mode",
    "error names table",
    "error reporting steps",
    "error response",
    "error response data",
    "errorevent",
    "errors",
    "escapable raw text elements",
    "escape a character",
    "escape a character as code point",
    "escape the vcard text string",
    "escaped as code point",
    "escaping",
    "escaping a string",
    "establish a connection with the remote playback device",
    "establish a presentation connection",
    "establish a websocket connection",
    "establish an independent formatting context",
    "establish an orthogonal flow",
    "established an independent formatting context",
    "establishes an independent formatting context",
    "establishing an independent formatting context",
    "establishing the media timeline",
    "estimated floor level",
    "etag",
    "euc-jp",
    "euc-jp decoder",
    "euc-jp encoder",
    "euc-jp jis0212",
    "euc-jp lead",
    "euc-kr",
    "euc-kr decoder",
    "euc-kr encoder",
    "euc-kr lead",
    "eval()",
    "evaluate",
    "evaluate a key path on a value",
    "evaluate a path",
    "evaluate media queries and report changes",
    "evaluating a selector",
    "evaluating media features in a boolean context",
    "event",
    "event and derived interfaces constructor behavior",
    "event attribute",
    "event constructing steps",
    "event enabled browsing contexts",
    "event fired",
    "event fires",
    "event firing",
    "event focus",
    "event handler",
    "event handler content attribute",
    "event handler event type",
    "event handler event types",
    "event handler idl attribute",
    "event handler map",
    "event handlers",
    "event is enabled",
    "event listener",
    "event loop",
    "event loop processing model",
    "event order",
    "event phase",
    "event target",
    "event type",
    "eventhandler",
    "eventinit",
    "eventlistener",
    "events",
    "eventtarget",
    "exact matching",
    "example term",
    "examples",
    "exceeds the binding slot limits",
    "exception",
    "exception objects",
    "exceptions",
    "exceptionsenabled",
    "excess width",
    "exchange",
    "exchange mtu",
    "exchange signature",
    "exclude fragment",
    "exclude fragments",
    "excluded subtree",
    "excluding input",
    "exclusion area",
    "exclusion box",
    "exclusion element",
    "exclusive access",
    "exclusive text node",
    "exdate",
    "execcommand()",
    "execute a function body",
    "execute a javascript: url request",
    "execute a script block",
    "execute async script",
    "execute script",
    "executing thread",
    "execution context",
    "execution context stack",
    "execution-while-not-rendered",
    "execution-while-out-of-viewport",
    "executioncontexts",
    "exists",
    "exit fullscreen",
    "exit picture-in-picture algorithm",
    "exit value",
    "exotic object",
    "exp()",
    "expanded name",
    "expanded transition property name",
    "expired",
    "expiry month",
    "expiry year",
    "explicit \"eof\" character",
    "explicit consent",
    "explicit grid",
    "explicit grid column",
    "explicit grid properties",
    "explicit grid row",
    "explicit grid track",
    "explicit intrinsic inner size",
    "explicitchar",
    "explicithistorynavigation",
    "explicitly enabled",
    "explicitly supported json mime type",
    "explicitly supported xml mime type",
    "explicitly-assigned line name",
    "exported function",
    "exported function cache",
    "exportentry record",
    "exportkey",
    "expose",
    "expose a user interface to the user",
    "exposed",
    "exposing a user interface to the user",
    "exposure",
    "exposure compensation",
    "exposure decision algorithm for devices other than camera and microphone",
    "exposure set",
    "exposure time",
    "express intention",
    "express permission",
    "expression",
    "expressly inert",
    "extend",
    "extend lifetime promises",
    "extendableevent",
    "extendableeventinit",
    "extended attribute",
    "extended grapheme cluster",
    "extended inquiry response",
    "extended mathematical value",
    "extended report",
    "extended-address",
    "extension",
    "extension capabilities",
    "extension capability",
    "extension command",
    "extension command uri template",
    "extension commands",
    "extension identifier",
    "extension modules",
    "extension point",
    "extension sensor interface",
    "extension specification",
    "extension-token",
    "extensions",
    "extensions in use",
    "extensions to the predefined set of link types",
    "extensions to the predefined set of metadata names",
    "extent3d",
    "extern value cache",
    "external application resource",
    "external application resource's",
    "external file reference",
    "external label",
    "external now hidden algorithm",
    "external now visible algorithm",
    "external resource link",
    "external type",
    "external type name",
    "external type record",
    "extra permission data",
    "extra permission data constraints",
    "extra permission data type",
    "extract",
    "extract a byte sequence",
    "extract a four-bit decimal value",
    "extract a key from a value using a key path",
    "extract a marked token",
    "extract a mime type",
    "extract a six-bit decimal value",
    "extract an action sequence",
    "extract any vcard data represented by those nodes",
    "extract any vevent data represented by those nodes",
    "extract container element attributes",
    "extract content-range values",
    "extract header list values",
    "extract header values",
    "extract the microdata from those nodes into a json form",
    "extract the script arguments from a request",
    "extractable",
    "extracting container element attributes",
    "extracting content-range values",
    "extracting header list values",
    "extracting header values",
    "extracting the fallback url",
    "extrinsic sizing",
    "f32",
    "facets",
    "facing pages",
    "facingmode",
    "factory method",
    "fail",
    "fail the connection",
    "fail the websocket connection",
    "failed",
    "failed to load",
    "failover class",
    "failure reason",
    "failure sampling rate",
    "failure_fraction",
    "failures",
    "fake worklet 1",
    "fake worklet 2",
    "fakeworklet1",
    "fakeworklet2",
    "fallback",
    "fallback alignment",
    "fallback base url",
    "fallback chain",
    "fallback content",
    "fallback size",
    "false in the negative range",
    "false-by-default",
    "familiar with",
    "family-name",
    "fantasy",
    "far plane",
    "far value",
    "farthest-side",
    "fastseek",
    "fax",
    "feature",
    "feature descriptor",
    "feature requirements",
    "feature separator",
    "feature tag",
    "feature-identifier",
    "featureless",
    "feblend",
    "fecolormatrix",
    "fecomponenttransfer",
    "fecomposite",
    "feconvolvematrix",
    "fediffuselighting",
    "fedisplacementmap",
    "fedistantlight",
    "fedropshadow",
    "feflood",
    "fefunca",
    "fefuncb",
    "fefuncg",
    "fefuncr",
    "fegaussianblur",
    "feimage",
    "femerge",
    "femergenode",
    "femorphology",
    "fence",
    "feoffset",
    "fepointlight",
    "fespecularlighting",
    "fespotlight",
    "fetch",
    "fetch a classic script",
    "fetch a classic worker script",
    "fetch a classic worker-imported script",
    "fetch a css style sheet",
    "fetch a module worker script graph",
    "fetch a modulepreload module script graph",
    "fetch a single module script",
    "fetch a worklet script graph",
    "fetch a worklet/module worker script graph",
    "fetch an external module script graph",
    "fetch an import map",
    "fetch an import() module script graph",
    "fetch an inline module script graph",
    "fetch an origin’s origin policy",
    "fetch and process the linked resource",
    "fetch directives",
    "fetch finale",
    "fetch image algorithm",
    "fetch index",
    "fetch metadata headers",
    "fetch params",
    "fetch payment method manifests",
    "fetch scheme",
    "fetch steps",
    "fetch the descendants of a module script",
    "fetch the descendants of and link a module script",
    "fetch the web app manifest for a default payment app",
    "fetch timing info",
    "fetch()",
    "fetching an image resource",
    "fetching an origin’s origin policy",
    "fetile",
    "feturbulence",
    "fictional tag sequence",
    "field-name",
    "fieldset",
    "figcaption",
    "figure",
    "file",
    "file entry",
    "file host state",
    "file read error",
    "file reading task source",
    "file slash state",
    "file state",
    "file system",
    "file type guidelines",
    "file upload",
    "file upload state",
    "filelist",
    "filelock",
    "filename",
    "fill",
    "fill light mode",
    "fill mode",
    "fill painting area",
    "fill positioning area",
    "fill rule",
    "fill style",
    "fill-break",
    "fill-color",
    "fill-image",
    "fill-opacity",
    "fill-origin",
    "fill-position",
    "fill-repeat",
    "fill-rule",
    "fill-size",
    "filled",
    "filter",
    "filter buffer by name and type",
    "filter buffer map by name and type",
    "filter primitive",
    "filter primitive attributes",
    "filter primitive subregion",
    "filter primitive tree",
    "filter region",
    "filter()",
    "filter-primitive",
    "filtered response",
    "final sample mask",
    "final sandboxing flag set",
    "final steps to create an answer",
    "final steps to create an offer",
    "finalizationregistry",
    "finalize",
    "finalize and report timing",
    "finalize event timing",
    "finalize response",
    "find",
    "find a potential indicated element",
    "find a range from a node list",
    "find a range from a text directive",
    "find a slot",
    "find a string in range",
    "find client hint value",
    "find element",
    "find element from element",
    "find element from shadow root",
    "find elements",
    "find elements from element",
    "find elements from shadow root",
    "find flattened slottables",
    "find focusable areas",
    "find slottables",
    "find supported configuration combination",
    "find the first parse error",
    "find the intersecting or enclosed descendants",
    "find the matching font faces",
    "find the non-container graphics elements",
    "find the opposite of true",
    "find the reporting frequency of a sensor object",
    "find the shortest distance",
    "find the typographic character for a character",
    "find-in-page",
    "find-in-page interface",
    "finding a slot",
    "finding flattened slottables",
    "finding focusable areas",
    "finding slottables",
    "finding the shortest distance",
    "fingerprint",
    "fingerprinting surface",
    "fingerprints",
    "finish an animation",
    "finish event",
    "finish job",
    "finish notification steps",
    "finishdynamicimport",
    "finished",
    "finished play state",
    "fire",
    "fire a background fetch click event",
    "fire a blob event",
    "fire a buffer full event",
    "fire a change event",
    "fire a clipboard event",
    "fire a content delete event",
    "fire a dnd event",
    "fire a focus event",
    "fire a font load event",
    "fire a functional event",
    "fire a page transition event",
    "fire a periodicsync event",
    "fire a pointer event",
    "fire a progress event",
    "fire a service worker notification event",
    "fire a simple event",
    "fire a success event",
    "fire a sync event",
    "fire a track event",
    "fire a version change event",
    "fire an advertisementreceived event",
    "fire an error event",
    "fire an event",
    "fire an input source event",
    "fire functional event",
    "fire the \"pushsubscriptionchange\" event",
    "fired",
    "fires",
    "fires a simple event",
    "fires an event",
    "firing",
    "firing a click event",
    "firing a synthetic pointer event named e",
    "firing a track event named e",
    "firing an event",
    "firing submission events",
    "first available font",
    "first baseline set",
    "first baselines",
    "first child",
    "first common ancestor",
    "first contentful paint",
    "first cross-axis baseline set",
    "first formatted line",
    "first initialization segment received flag",
    "first main-axis baseline set",
    "first paint",
    "first party",
    "first symbol value",
    "first-baseline alignment",
    "first-baseline content-alignment",
    "first-baseline self-alignment",
    "first-child",
    "first-factor roaming authenticator",
    "first-letter text",
    "first-party-site context",
    "first-person observer view",
    "fit-content block size",
    "fit-content inline size",
    "fit-content size",
    "fitness distance",
    "fixed position",
    "fixed positioning containing block",
    "fixed sizing function",
    "fixed-positioned",
    "fixed-positioned box",
    "flag",
    "flagged as full",
    "flags",
    "flags data type",
    "flat tree",
    "flattened element tree",
    "flattened tabindex-ordered focus navigation scope",
    "flex",
    "flex base size",
    "flex container",
    "flex direction",
    "flex factor",
    "flex factor sum",
    "flex formatting context",
    "flex fraction",
    "flex item",
    "flex layout",
    "flex line",
    "flex space",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-level",
    "flex-shrink",
    "flex-wrap",
    "flexible",
    "flexible length",
    "flexible sizing function",
    "flexible tracks",
    "float",
    "float anchor",
    "float area",
    "float block formatting context",
    "float containing block formatting context",
    "float reference",
    "float rules",
    "float-defer",
    "float-offset",
    "float-reference",
    "floating-point",
    "flood-color",
    "flood-opacity",
    "floor",
    "floor expression",
    "floor value",
    "flow content",
    "flow fragment height",
    "flow layout",
    "flow of an element",
    "flow-from",
    "flow-into",
    "flow-relative",
    "flow-relative direction",
    "flush and enqueue",
    "flush autofocus candidates",
    "flush code points consumed as a character reference",
    "fn",
    "focal length",
    "focus",
    "focus chain",
    "focus distance",
    "focus fixup rule",
    "focus mode",
    "focus navigation scope",
    "focus navigation scope owner",
    "focus ring",
    "focus state",
    "focus update steps",
    "focusable",
    "focusable area",
    "focused",
    "focused area of the document",
    "focusevent",
    "focusin",
    "focusing steps",
    "focusout",
    "follow the hyperlink",
    "following element",
    "font",
    "font block period",
    "font document",
    "font download timer",
    "font failure period",
    "font feature value declaration",
    "font mime type",
    "font representation",
    "font source",
    "font specific",
    "font style source object",
    "font swap period",
    "font table",
    "font type pattern matching algorithm",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-relative lengths",
    "font-size",
    "font-size-adjust",
    "font-src",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "fontface",
    "footer",
    "footnote",
    "footnote counter",
    "footnote-display",
    "footnote-policy",
    "forbidden header name",
    "forbidden host code point",
    "forbidden method",
    "forbidden response-header name",
    "force sample",
    "force-quirks flag",
    "forced break",
    "forced break values",
    "forced colors mode",
    "forced line break",
    "forced paragraph break",
    "forced sandboxing flag set",
    "forced-color-adjust",
    "forcibly close",
    "foreign elements",
    "foreignobject",
    "forget the media element's media-resource-specific tracks",
    "forgiving-base64 decode",
    "forgiving-base64 encode",
    "form",
    "form element pointer",
    "form owner",
    "form submission",
    "form-action",
    "form-associated",
    "form-associated custom element",
    "form-associated elements",
    "formal parameter",
    "formatting",
    "formatting context",
    "formatting structure",
    "formdata",
    "formdataentryvalue",
    "forward",
    "forward progress",
    "forward-compatible parsing",
    "forwards",
    "forwards to the internal map object",
    "forwards to the internal set object",
    "foster parenting",
    "found",
    "found a suitable namespace prefix",
    "four-bit decimal value",
    "fraction line thickness",
    "fractiondenomdisplaystylegapmin",
    "fractiondenominatordisplaystyleshiftdown",
    "fractiondenominatorgapmin",
    "fractiondenominatorshiftdown",
    "fractionnumdisplaystylegapmin",
    "fractionnumeratordisplaystyleshiftup",
    "fractionnumeratorgapmin",
    "fractionnumeratorshiftup",
    "fractionrulethickness",
    "fragment",
    "fragment box",
    "fragment case",
    "fragment destination",
    "fragment directive",
    "fragment directive delimiter",
    "fragment parsing algorithm",
    "fragment percent-encode set",
    "fragment pseudo-element",
    "fragment serializing algorithm",
    "fragment shader stage",
    "fragment state",
    "fragmentainer",
    "fragmentation",
    "fragmentation break",
    "fragmentation container",
    "fragmentation context",
    "fragmentation direction",
    "fragmentation root",
    "fragmentdirective",
    "fragmented flow",
    "fragments",
    "frame",
    "frame border color",
    "frame context",
    "frame element",
    "frame requested flag",
    "frame update",
    "frame-ancestors",
    "frame-ancestors directive",
    "frame-current",
    "frame-requested",
    "frame-src",
    "framebuffer",
    "framerate",
    "frames",
    "frameset",
    "frameset-ok flag",
    "free space",
    "freely fragmentable",
    "freeze steps",
    "frequency",
    "fresh response",
    "friend",
    "from an external file",
    "front-facing",
    "frozen",
    "frozen array",
    "frozen array of supported entry types",
    "frozen array type",
    "frozen base url",
    "ftpproxy",
    "fulfill",
    "fulfilled",
    "fulfillment",
    "full glyph cell",
    "full path",
    "full-width",
    "fullscreen",
    "fullscreen an element",
    "fullscreen element",
    "fullscreen element ready check",
    "fullscreen flag",
    "fullscreen is supported",
    "fullscreen window",
    "fullscreen window state",
    "fullscreen-feature",
    "fullwidth closing punctuation",
    "fullwidth colon punctuation",
    "fullwidth dot punctuation",
    "fullwidth middle dot punctuation",
    "fullwidth opening punctuation",
    "fully active",
    "fully clipped",
    "fully decodable",
    "fully exit fullscreen",
    "fully inflexible",
    "fully reading body as promise",
    "fully visible",
    "function",
    "function body",
    "function call",
    "function declaration",
    "function instance",
    "function instance name",
    "function key",
    "function object",
    "function scope",
    "function section",
    "functional keys",
    "functional notation",
    "functional pseudo-class",
    "functionbody",
    "functioncreate",
    "functions in a shader stage",
    "furthest ancestral svg viewport",
    "g",
    "gain focus",
    "gainnode",
    "gainoptions",
    "gamepad",
    "gamepad task source",
    "gamepad user gesture",
    "gamepadconnected",
    "gamepaddisconnected",
    "gamut",
    "gamut-map",
    "gap",
    "gap interoperability requirements",
    "garbage-collect the connection",
    "gather active observations at depth",
    "gatheringstatechange",
    "gatt",
    "gatt blocklist",
    "gatt client",
    "gatt procedure",
    "gatt procedures",
    "gatt profile hierarchy",
    "gatt server",
    "gb18030",
    "gb18030 decoder",
    "gb18030 encoder",
    "gb18030 first",
    "gb18030 second",
    "gb18030 third",
    "gbk",
    "gbk decoder",
    "gbk encoder",
    "gender-identity",
    "general category",
    "general discovery procedure",
    "generate a change password url",
    "generate a counter",
    "generate a counter representation",
    "generate a fragment",
    "generate a key",
    "generate a new blob url",
    "generate a partitioned storage key",
    "generate a prefix",
    "generate a random uuid",
    "generate a report",
    "generate a tiggering event url",
    "generate all implied end tags thoroughly",
    "generate an attribution report url",
    "generate baselines",
    "generate implied end tags",
    "generate report for violation of permissions policy on settings",
    "generate test report",
    "generate timestamps flag",
    "generateassertioncallback",
    "generated",
    "generated content",
    "generated namespace prefix index",
    "generatekey",
    "generating a new blob url",
    "generating a prefix",
    "generating a uuid",
    "generation",
    "generator-unable-to-provide-required-alt",
    "generic attribute profile",
    "generic javascript object formatting",
    "generic raw text element parsing algorithm",
    "generic rcdata element parsing algorithm",
    "generic sensor permission revocation algorithm",
    "geo",
    "geolocation",
    "geolocation sensor",
    "geolocation task source",
    "geometry properties",
    "get",
    "get a backgroundfetchregistration instance",
    "get a browsing context",
    "get a copy of the buffer source",
    "get a copy of the bytes held by the buffer source",
    "get a copy of the image contents of a presentation context",
    "get a document layout definition",
    "get a domstringmap's name-value pairs",
    "get a final encoding",
    "get a final mime type",
    "get a frame id",
    "get a known connected element",
    "get a known element",
    "get a known shadow root",
    "get a layout child",
    "get a layout class instance",
    "get a layout definition",
    "get a promise to wait for all",
    "get a response mime type",
    "get a session id for a websocket resource",
    "get a stack id",
    "get a style map",
    "get action url",
    "get active element",
    "get alert text",
    "get all agent clusters",
    "get all cookies",
    "get an attribute",
    "get an attribute by name",
    "get an attribute by namespace and local name",
    "get an attribute value",
    "get an element",
    "get an element id",
    "get an element's noopener",
    "get an element's target",
    "get an encoder",
    "get an encoding",
    "get an origin policy from a manifest response",
    "get an output encoding",
    "get an xml encoding",
    "get and parse a structured header",
    "get boundary point at index",
    "get capture prompt result",
    "get client lifecycle state",
    "get computed label",
    "get computed role",
    "get credentials",
    "get current url",
    "get element attribute",
    "get element css value",
    "get element property",
    "get element rect",
    "get element shadow root",
    "get element tag name",
    "get element text",
    "get frame type",
    "get mock capture devices",
    "get mock sensor",
    "get named cookie",
    "get newest worker",
    "get page source",
    "get registration",
    "get related browsing contexts",
    "get the \"all\"-indexed element",
    "get the \"all\"-indexed or named element(s)",
    "get the \"all\"-named element(s)",
    "get the bluetoothdevice representing",
    "get the browsing context info",
    "get the current value of the event handler",
    "get the descendent browsing contexts",
    "get the focusable area",
    "get the next iteration result",
    "get the object",
    "get the origin policy for a response",
    "get the origin policy manifest url",
    "get the parent",
    "get the realm info",
    "get the runnable task queues",
    "get the service worker object",
    "get the service worker registration object",
    "get time origin timestamp",
    "get timeouts",
    "get title",
    "get url",
    "get value from latest reading",
    "get window handle",
    "get window handles",
    "get window rect",
    "get, decode, and split",
    "get-policy-value",
    "getactivescriptormodule",
    "getattribute",
    "getbattery()",
    "getboundingclientrect",
    "getclientrects",
    "getdisplaymedia prompt result",
    "getelementbyid()",
    "getelementsbyclassname()",
    "getelementsbytagname",
    "getfunctionrealm",
    "getgattchildren",
    "getglobalvalue",
    "getprioritizedhashfunction",
    "getprioritizedhashfunction(a, b)",
    "getrandomvalues",
    "getsettings()",
    "getter",
    "getter steps",
    "getting",
    "getting a backgroundfetchregistration instance",
    "getting a promise to wait for all",
    "getting a property",
    "getting a property with default",
    "getting a structured field value",
    "getting a text response",
    "getting all agent clusters",
    "getting allowed signed exchange link info",
    "getting alternate signed exchange link info",
    "getting an attribute by name",
    "getting an encoder",
    "getting an encoding",
    "getting an origin policy from a manifest response",
    "getting properties",
    "getting the endpoint attribute",
    "getting the expirationtime attribute",
    "getting the keys",
    "getting the origin policy for a response",
    "getting the origin policy manifest url",
    "getting the property",
    "getting the property with default",
    "getting the runnable task queues",
    "getting the service worker object",
    "getting the service worker registration object",
    "getting the value of an entry",
    "getting the value of entry",
    "getusermedia prompt result",
    "getusermedia()",
    "given-name",
    "global animation list",
    "global attributes",
    "global date and time",
    "global environment",
    "global identifier",
    "global invocation id",
    "global items",
    "global names",
    "global object",
    "global object cache",
    "global set of availability callbacks",
    "global storage access map",
    "global type",
    "globalcrypto",
    "globaleventhandlers",
    "glyph",
    "glyph assembly ascent",
    "glyph assembly descent",
    "glyph assembly height",
    "glyph assembly stretch size",
    "glyph assembly width",
    "glyph modifier key",
    "glyph-midline",
    "glyph-orientation-vertical",
    "go",
    "gotpointercapture event",
    "gpu command",
    "gpucomputepipeline",
    "gpurenderpipeline",
    "gradient box",
    "gradient element",
    "gradient function",
    "gradient line",
    "gradient-average-color",
    "grapheme cluster",
    "grapheme cluster boundaries",
    "graphical document",
    "graphical documents",
    "graphics element",
    "graphics referencing element",
    "gravity",
    "greater than",
    "grid",
    "grid area",
    "grid axis",
    "grid cell",
    "grid column",
    "grid column line",
    "grid container",
    "grid formatting context",
    "grid item",
    "grid item placement algorithm",
    "grid layout",
    "grid line",
    "grid order",
    "grid placement",
    "grid position",
    "grid row",
    "grid row line",
    "grid sizing algorithm",
    "grid span",
    "grid track",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-gap",
    "grid-column-start",
    "grid-gap",
    "grid-level",
    "grid-modified document order",
    "grid-placement property",
    "grid-row",
    "grid-row-end",
    "grid-row-gap",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "group",
    "group alignment",
    "group effect",
    "group end timestamp",
    "group stack",
    "group start timestamp",
    "group-align",
    "group-aligned",
    "group-equivalent",
    "groupid",
    "grouping elements",
    "growth limit",
    "guaranteed-invalid value",
    "guessed playback state",
    "guidelines for exposing cues",
    "gutter",
    "gyroscope",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "half-leading",
    "half-width",
    "hand-off to external software",
    "handle",
    "handle a connection closing",
    "handle an incoming message",
    "handle any user prompts",
    "handle attribute changes",
    "handle close events",
    "handle closing the readable stream",
    "handle closing the writable stream",
    "handle content codings",
    "handle errors",
    "handle fetch",
    "handle fetch task source",
    "handle functional event task source",
    "handle funky elements",
    "handle media session action",
    "handle response end-of-body",
    "handle service worker client unload",
    "handle user agent shutdown",
    "handled",
    "handler",
    "handling a canmakepaymentevent",
    "handling a paymentrequestevent",
    "handling document loss of full activity",
    "handling document loss of visibility",
    "handling the certificate reference",
    "hang",
    "hanging baseline",
    "hanging glyph",
    "hanging-punctuation",
    "hard",
    "hard iron distortion",
    "has a border",
    "has a reversed range",
    "has a runnable task",
    "has a style sheet that is blocking scripts",
    "has active observations",
    "has an attribute",
    "has been shipped",
    "has block-level display",
    "has cross-origin redirects",
    "has default method steps",
    "has dispatched input event",
    "has dispatched scroll event",
    "has focus steps",
    "has no style sheet that is blocking scripts",
    "has not shifted",
    "has range limitations",
    "has shifted",
    "has skipped observations",
    "has the attribute",
    "hasattribute",
    "hash",
    "hash-algo",
    "hash-algorithm",
    "hash-expression",
    "hash-source",
    "hash-with-options",
    "hashalgorithmidentifier",
    "hasownproperty",
    "have a particular element in button scope",
    "have a particular element in list item scope",
    "have a particular element in scope",
    "have a particular element in select scope",
    "have a particular element in table scope",
    "have a periodic domain",
    "have a runnable task",
    "have an element target node in a specific scope",
    "have default method steps",
    "head",
    "head element pointer",
    "header",
    "header field",
    "header list",
    "header list contains",
    "header name",
    "header names",
    "header policy",
    "header value",
    "header-name cache entry match",
    "headers guard",
    "heading content",
    "headings and sections",
    "height",
    "height dimension",
    "hex color",
    "hex color notation",
    "hex digit",
    "hexadecimal character reference start state",
    "hexadecimal character reference state",
    "hexadecimal representation",
    "hgroup",
    "hid blocklist",
    "hid device task source",
    "hid interface",
    "hid usages",
    "hidden",
    "hidden annotation",
    "hidden ruby annotation",
    "hidden state",
    "hide",
    "hierarchically correct main element",
    "high boundary",
    "high water mark",
    "high-level",
    "high-surrogate code unit",
    "highest end timestamp",
    "highlight overlay",
    "highlight pseudo-element",
    "highlight registry",
    "highlights register",
    "historical agent cluster key map",
    "historical bytes",
    "history handling",
    "history handling behavior",
    "history traversal task source",
    "history-navigation flag",
    "historyhandling",
    "historypolicycontainer",
    "hit test",
    "hit-test",
    "hit-testing",
    "hkdfparams",
    "hmac key export steps",
    "hmac key import steps",
    "hmacimportparams",
    "hmackeyalgorithm",
    "hmackeygenparams",
    "hold time",
    "home",
    "home document",
    "home sequential focus navigation order",
    "honor user preferences for automatic text track selection",
    "honorific-prefix",
    "honorific-suffix",
    "horizontal axis",
    "horizontal block flow",
    "horizontal dimension",
    "horizontal focal length",
    "horizontal offset",
    "horizontal script",
    "horizontal typographic mode",
    "horizontal writing mode",
    "horizontal-only",
    "host",
    "host and optional port",
    "host browsing context",
    "host element",
    "host environment",
    "host equals",
    "host hook",
    "host interfaces",
    "host language",
    "host parser",
    "host parsing",
    "host serializer",
    "host state",
    "host-char",
    "host-defined",
    "host-including inclusive ancestor",
    "host-part",
    "host-part match",
    "host-shareable",
    "host-source",
    "hostcalljobcallback",
    "hostenqueuefinalizationregistrycleanupjob",
    "hostenqueuepromisejob",
    "hostensurecancompilestrings",
    "hostgetimportmetaproperties",
    "hostimportmoduledynamically",
    "hostmakejobcallback",
    "hostname state",
    "hostpromiserejectiontracker",
    "hostresolveimportedmodule",
    "hr",
    "href",
    "hsl()",
    "hsla()",
    "hsts-safe origin",
    "html",
    "html character reference in annotation state",
    "html character reference in data state",
    "html document",
    "html documents",
    "html element",
    "html elements",
    "html fragment parsing algorithm",
    "html fragment serialization algorithm",
    "html integration point",
    "html mime type",
    "html namespace",
    "html parser",
    "html pause",
    "html serialization",
    "html-ns",
    "htmlallcollection",
    "htmlcollection",
    "htmldocument",
    "htmlformcontrolscollection",
    "htmlinputelement",
    "htmlmediaelement",
    "htmloptionscollection",
    "htmlorforeignelement",
    "htmlvideoelement",
    "http authentication",
    "http compliant",
    "http fetch",
    "http header layer division",
    "http newline byte",
    "http quoted-string token code point",
    "http request",
    "http response",
    "http status",
    "http tab or space",
    "http tab or space byte",
    "http token code point",
    "http whitespace",
    "http whitespace byte",
    "http(s) scheme",
    "http-default-style",
    "http-network fetch",
    "http-network-or-cache fetch",
    "http-network-or-cache-fetch",
    "http-no-service-worker fetch",
    "http-redirect fetch",
    "http:",
    "http://microformats.org/profile/hcalendar#vevent",
    "http://microformats.org/profile/hcard",
    "http://n.whatwg.org/work",
    "httpproxy",
    "https:",
    "human palatability",
    "hwb()",
    "hyperlink",
    "hyperlink annotations",
    "hyperlink auditing",
    "hyphen-separated matching",
    "hyphenate",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphenate-limit-last",
    "hyphenate-limit-lines",
    "hyphenate-limit-zone",
    "hyphenation",
    "hyphenation opportunity",
    "hyphens",
    "hypot()",
    "hypothetical cross size",
    "hypothetical fr size",
    "hypothetical main size",
    "hysteresis",
    "i",
    "i/o queue",
    "i32",
    "iarc_rating_id",
    "ibm866",
    "ice agent",
    "ice candidate pool size",
    "ice connection state",
    "ice gathering state",
    "ice servers list",
    "ice transports setting",
    "icecandidate",
    "icecandidateerror",
    "iceconnectionstatechange",
    "icegatheringstatechange",
    "icon",
    "icon purposes",
    "icon record",
    "iconify the window",
    "id",
    "id field",
    "id length field",
    "id selector",
    "idempotent",
    "ident",
    "identical to",
    "identified with",
    "identifier",
    "identifier code point",
    "identifier-start code point",
    "identifiers",
    "identifies",
    "identity resolving key",
    "identity transform",
    "identity transform function",
    "identity transform stream",
    "ideographic-ink-over baseline",
    "ideographic-ink-under baseline",
    "ideographic-over baseline",
    "ideographic-under baseline",
    "ideographs",
    "idl attribute name to animation property name",
    "idl attribute to css property",
    "idl fragment",
    "idl-exposed autofill value",
    "idle callback identifier",
    "idle detection task source",
    "idle period",
    "idle phase",
    "idle play state",
    "idle-task task source",
    "idledeadline",
    "idlerequestcallback",
    "idlerequestoptions",
    "if aborted",
    "if-none-match",
    "iframe",
    "iframe element",
    "iframe fullscreen flag",
    "iframe load event steps",
    "iframe load in progress",
    "iframe sandboxing flag set",
    "ignore",
    "ignore higher-layer caching",
    "ignore namespace definition attribute",
    "ignore state",
    "ignore unknown",
    "ignore valid",
    "ignore-destructive-writes counter",
    "ignored",
    "iin",
    "iirfilternode",
    "iirfilteroptions",
    "il field",
    "illegal",
    "illuminance",
    "image",
    "image button",
    "image candidate string",
    "image data",
    "image decoding hint",
    "image format-based selection",
    "image height",
    "image map",
    "image mime type",
    "image request",
    "image resolution",
    "image resource",
    "image source",
    "image type pattern matching algorithm",
    "image width",
    "image()",
    "image(width, height)",
    "image-orientation",
    "image-rendering",
    "image-rendering rectangle",
    "image-resolution",
    "image-set()",
    "image/gif",
    "image/jpeg",
    "image/png",
    "image/svg+xml",
    "imagebitmaprenderingcontext creation algorithm",
    "imagecopytexture subresource size",
    "imagedata",
    "images",
    "images pending rendering",
    "ime",
    "img",
    "img-src",
    "immediate close",
    "immediate user selection",
    "immediately",
    "immersive session",
    "immersive session request is allowed",
    "immersive xr device",
    "immutable prototype exotic object",
    "impact fraction",
    "impact region",
    "implementation",
    "implementation-approximated",
    "implementation-defined",
    "implementation-defined memory measurement",
    "implements",
    "implicit aria semantics",
    "implicit consent",
    "implicit grid",
    "implicit grid column",
    "implicit grid lines",
    "implicit grid properties",
    "implicit grid row",
    "implicit grid track",
    "implicit pointer capture",
    "implicit signals",
    "implicit wait timeout",
    "implicitly-assigned line name",
    "implicitly-named area",
    "implied document",
    "implied event loop",
    "impolite peer",
    "import conditions",
    "import map",
    "import map parse result",
    "import scripts into worker global scope",
    "import()",
    "import.meta",
    "important",
    "importentry record",
    "importkey",
    "importnode()",
    "impp",
    "in",
    "in a document",
    "in a document tree",
    "in a formal activation state",
    "in auto mode",
    "in body",
    "in caption",
    "in cell",
    "in collapsed-borders mode",
    "in column group",
    "in effect",
    "in error reporting mode",
    "in fixed mode",
    "in flow",
    "in foreign content",
    "in frameset",
    "in head",
    "in head noscript",
    "in parallel",
    "in play",
    "in row",
    "in scope",
    "in select",
    "in select in table",
    "in separated-borders mode",
    "in table",
    "in table body",
    "in table text",
    "in template",
    "in the background",
    "in the context of a shadow tree",
    "in the context of the shadow tree",
    "in the future",
    "in the past",
    "in the previous frame",
    "in transfers",
    "in view",
    "in-flow",
    "in-parallel steps to create an answer",
    "in-parallel steps to create an offer",
    "in-view center point",
    "inactive timeline",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "inappropriate for a control",
    "include",
    "include credentials",
    "include_subdomains",
    "included service",
    "includes a nullable type",
    "includes credentials",
    "includes statement",
    "includes undefined",
    "inclusion criteria",
    "inclusive ancestor",
    "inclusive descendant",
    "inclusive descendants",
    "incorrectly-closed-comment",
    "incorrectly-opened-comment",
    "increasing",
    "increment the marquee current loop index",
    "incremental webvtt parser",
    "incrementally-read loop",
    "incumbent",
    "incumbent global object",
    "incumbent realm",
    "incumbent settings object",
    "indefinite",
    "indefinite column span",
    "indefinite grid span",
    "indefinite row span",
    "indefinite size",
    "indefinite span",
    "independent formatting context",
    "index",
    "index big5",
    "index big5 pointer",
    "index code point",
    "index euc-kr",
    "index gb18030",
    "index gb18030 ranges",
    "index gb18030 ranges code point",
    "index gb18030 ranges pointer",
    "index handle",
    "index iso-2022-jp katakana",
    "index jis0208",
    "index jis0212",
    "index of",
    "index of the host function",
    "index pointer",
    "index shift_jis pointer",
    "index single-byte",
    "indexed properties",
    "indexed property getter",
    "indexed property setter",
    "indicate focus",
    "indicates",
    "indirect dispatch parameters",
    "indirect draw parameters",
    "indirect drawindexed parameters",
    "indirection",
    "indistinguishable by user-agent string",
    "individual",
    "inert",
    "infinitely growable",
    "info",
    "infobackground",
    "informative",
    "infotext",
    "ingest payment method manifest",
    "ingest payment method manifests",
    "ingested",
    "inherit",
    "inherit counters",
    "inherit its getter",
    "inherit-by-default",
    "inheritance",
    "inherited dictionaries",
    "inherited from",
    "inherited interfaces",
    "inherited ns",
    "inherited policies",
    "inherited policy",
    "inherited policy for a feature",
    "inherited property",
    "inherited time",
    "inherited value",
    "initevent()",
    "initial",
    "initial containing block",
    "initial float reference",
    "initial free space",
    "initial letter",
    "initial letter box",
    "initial objects",
    "initial point",
    "initial representation for the counter value",
    "initial scroll position",
    "initial url",
    "initial value",
    "initial viewport",
    "initial-height",
    "initial-letter",
    "initial-letter-align",
    "initial-letter-wrap",
    "initial-width",
    "initialinsertion",
    "initialization data type",
    "initialization segment",
    "initialization segment received",
    "initialize a cylinder layer",
    "initialize a equirect layer",
    "initialize a global object",
    "initialize a global’s endpoint list",
    "initialize a memory object",
    "initialize a new intersectionobserver",
    "initialize a quad layer",
    "initialize a sensor object",
    "initialize a table object",
    "initialize a worker global scope's policy container",
    "initialize an imagedata object",
    "initialize an instance object",
    "initialize axes",
    "initialize buttons",
    "initialize event timing",
    "initialize the Client Hints set",
    "initialize the render state",
    "initialize the session",
    "initialize the viewport",
    "initialize webtransport over http",
    "initializehostdefinedrealm",
    "initializing",
    "initializing axes",
    "initializing buttons",
    "initiate a preconnect",
    "initiate remote playback",
    "initiate the drag-and-drop operation",
    "initiator",
    "initiator type",
    "initiatortype",
    "inject a key into a value using a key path",
    "injection sink",
    "ink line-ascent",
    "ink line-descent",
    "ink overflow",
    "ink overflow area",
    "ink overflow rectangle",
    "ink overflow region",
    "ink-over baseline",
    "ink-under baseline",
    "inline",
    "inline axis",
    "inline base direction",
    "inline block",
    "inline block box",
    "inline box",
    "inline clip crosser",
    "inline dimension",
    "inline documentation for external scripts",
    "inline end",
    "inline float",
    "inline formatting context",
    "inline initial letter",
    "inline initial letter box",
    "inline layout",
    "inline offset",
    "inline session",
    "inline session request is allowed",
    "inline size",
    "inline start",
    "inline stretch size constraint",
    "inline xr device",
    "inline-axis",
    "inline-base direction",
    "inline-end",
    "inline-level",
    "inline-level box",
    "inline-level boxes",
    "inline-level content",
    "inline-level elements",
    "inline-size",
    "inline-sizing",
    "inline-start",
    "inline-table",
    "inlinification",
    "inlinify",
    "inner block size",
    "inner box-shadow",
    "inner display type",
    "inner edge",
    "inner event creation steps",
    "inner height",
    "inner inline size",
    "inner invoke",
    "inner size",
    "inner width",
    "innerheight",
    "innerhtml",
    "innerhtml idl attribute",
    "innermost",
    "innerwidth",
    "input",
    "input activation behavior",
    "input audioparam buffer",
    "input buffer",
    "input byte stream",
    "input cancel list",
    "input element",
    "input elements",
    "input event applies",
    "input id",
    "input method editor",
    "input progress value",
    "input source",
    "input source state",
    "input sources",
    "input state table",
    "input stream",
    "input tag",
    "input-security",
    "inputevent",
    "inputeventinit",
    "inputreport",
    "inputs",
    "inputtype",
    "inputtype values",
    "ins",
    "insecure certificate",
    "insecure requests policy",
    "insecure tls certificates",
    "insert",
    "insert a character",
    "insert a comment",
    "insert a css rule",
    "insert a foreign element",
    "insert adjacent",
    "insert an html element",
    "insert children",
    "inserted into a document",
    "insertion mode",
    "insertion point",
    "insertion steps",
    "inset",
    "inset properties",
    "inset()",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "inset-modified containing block",
    "inside",
    "inside area",
    "install",
    "installation",
    "installed",
    "installed app",
    "installed apps",
    "installed font fallback",
    "installed web application",
    "installing",
    "instance root",
    "instant scroll",
    "instantiate a promise of a module",
    "instantiate a webassembly module",
    "instantiate counter",
    "instantiate the core of a webassembly module",
    "instrumentkey",
    "integer",
    "integer index",
    "integer types",
    "integer-indexed exotic object",
    "integral number",
    "integrity metadata",
    "integrity-metadata",
    "intended direction",
    "intended direction and end position",
    "intended end position",
    "inter-annotation white space",
    "inter-base white space",
    "inter-element whitespace",
    "inter-level white space",
    "inter-segment white space",
    "interactable",
    "interactable element",
    "interactive content",
    "interactively validate the constraints",
    "interest cohort",
    "interest cohort id",
    "interest cohort task source",
    "interest cohort version",
    "interest-cohort",
    "interface",
    "interface descriptor",
    "interface member",
    "interface mixin",
    "interface mixin member",
    "interface object",
    "interface of a shader stage",
    "interface prototype object",
    "interface types",
    "interleaved",
    "interlinear annotations",
    "intermediary",
    "intermediary node",
    "intermediary nodes",
    "intermediate memory breakdown entry",
    "intermediate memory measurement",
    "internal algorithm for scanning and assigning header cells",
    "internal createelementns steps",
    "internal json clone algorithm",
    "internal key modifier state",
    "internal method",
    "internal methods",
    "internal module script graph fetching procedure",
    "internal object",
    "internal pause steps",
    "internal pending output",
    "internal play steps",
    "internal queues",
    "internal raw uncompiled handler",
    "internal response",
    "internal ruby box",
    "internal ruby boxes",
    "internal ruby display types",
    "internal ruby element",
    "internal slot",
    "internal table box",
    "internal table element",
    "internal usage",
    "internally create a new object implementing the interface",
    "interpolate",
    "interpolation",
    "interpolation procedure",
    "interpolation sampling",
    "interpolation type",
    "interpreter",
    "interrupt transfers",
    "intersect the viewport",
    "intersection observer",
    "intersectionobserver",
    "intersectionobserver task source",
    "intersectionobserverinit",
    "interval end",
    "interval start",
    "intervention reports",
    "intialize a composition layer",
    "intra-level white space",
    "intra-ruby white space",
    "intrinsic dimensions",
    "intrinsic height",
    "intrinsic iteration duration",
    "intrinsic percentage width of a column",
    "intrinsic percentage width of a column based on cells of span up to 1",
    "intrinsic percentage width of a column based on cells of span up to n (n > 1)",
    "intrinsic resolution",
    "intrinsic size",
    "intrinsic size constraint",
    "intrinsic size contribution",
    "intrinsic sizes valid flag",
    "intrinsic sizing",
    "intrinsic sizing function",
    "intrinsic width",
    "intrinsic-sizes-invalid",
    "intrinsic-sizes-valid",
    "invalid",
    "invalid argument",
    "invalid at computed-value time",
    "invalid color",
    "invalid cookie domain",
    "invalid depth map value",
    "invalid element state",
    "invalid image",
    "invalid memory reference",
    "invalid reference",
    "invalid selector",
    "invalid session id",
    "invalid value",
    "invalid value default",
    "invalid-character-sequence-after-doctype-name",
    "invalid-first-character-of-tag-name",
    "invalidaccesserror",
    "invalidate layout functions",
    "invalidstateerror",
    "invariants of the essential internal methods",
    "invocation",
    "invocations",
    "invoke",
    "invoke a intrinsic sizes callback",
    "invoke a layout callback",
    "invoke a paint callback",
    "invoke a protocol handler",
    "invoke an intrinsic sizes callback",
    "invoke custom element reactions",
    "invoke idle callback timeout algorithm",
    "invoke idle callbacks algorithm",
    "invoke the indexed property setter",
    "invoke the named property setter",
    "invoked",
    "invoking",
    "io-shareable",
    "ip address",
    "ip address space",
    "ipv4 address",
    "ipv4 addresses",
    "ipv4 number parser",
    "ipv4 parser",
    "ipv4 serializer",
    "ipv6 address",
    "ipv6 addresses",
    "ipv6 parser",
    "ipv6 piece",
    "ipv6 serializer",
    "irk",
    "is",
    "is a platform object",
    "is a registrable domain suffix of or is equal to",
    "is allowed to show a file picker",
    "is an array index",
    "is an environment settings object contextually secure?",
    "is async module",
    "is at a word boundary",
    "is base allowed for document?",
    "is closing",
    "is detached",
    "is element enabled",
    "is element selected",
    "is empty",
    "is feature enabled by policy for origin",
    "is feature enabled in document for origin?",
    "is gbk",
    "is initial about:blank",
    "is local",
    "is modal",
    "is not a registrable domain suffix of and is not equal to",
    "is not a valid filter",
    "is not an array index",
    "is not origin-clean",
    "is not special",
    "is origin-keyed",
    "is policy compatible",
    "is special",
    "is stale",
    "is trusted",
    "is type supported",
    "is url potentially trustworthy?",
    "is utf-16be decoder",
    "is value",
    "is-value-compatible",
    "is-value-compatible-or-report",
    "isaccessordescriptor",
    "iscallable",
    "isconstructor",
    "isdatadescriptor",
    "isdetachedbuffer",
    "isindex",
    "isintersecting",
    "iso",
    "iso-2022-jp",
    "iso-2022-jp decoder",
    "iso-2022-jp decoder ascii",
    "iso-2022-jp decoder escape",
    "iso-2022-jp decoder escape start",
    "iso-2022-jp decoder katakana",
    "iso-2022-jp decoder lead byte",
    "iso-2022-jp decoder output state",
    "iso-2022-jp decoder roman",
    "iso-2022-jp decoder state",
    "iso-2022-jp decoder trail byte",
    "iso-2022-jp encoder",
    "iso-2022-jp encoder ascii",
    "iso-2022-jp encoder jis0208",
    "iso-2022-jp encoder roman",
    "iso-2022-jp encoder state",
    "iso-2022-jp lead",
    "iso-2022-jp output",
    "iso-8859-10",
    "iso-8859-13",
    "iso-8859-14",
    "iso-8859-15",
    "iso-8859-16",
    "iso-8859-2",
    "iso-8859-3",
    "iso-8859-4",
    "iso-8859-5",
    "iso-8859-6",
    "iso-8859-7",
    "iso-8859-8",
    "iso-8859-8-i",
    "isochronous transfers",
    "isolated sequence",
    "isolation",
    "isolationchange",
    "isomorphic decode",
    "isomorphic encode",
    "isplatformobjectsameorigin",
    "ispush",
    "issharedarraybuffer",
    "issuer identification numbers",
    "istrusted",
    "it is appropriate to resolve percentage heights on direct children of a table-cell",
    "italic correction",
    "item",
    "item data field",
    "item types",
    "item()",
    "iterable",
    "iterable declaration",
    "iterate",
    "iterate a cursor",
    "iteration",
    "iteration composite operation",
    "iteration composite operation accumulate",
    "iteration composite operation replace",
    "iteration count",
    "iteration duration",
    "iteration interval",
    "iteration progress",
    "iteration start",
    "iterationcompositeoperation",
    "iterations",
    "iterator prototype object",
    "iterator result",
    "iv",
    "javascript",
    "javascript engine task source",
    "javascript error",
    "javascript execution context",
    "javascript execution context stack",
    "javascript mime type",
    "javascript mime type essence match",
    "javascript realm",
    "javascript string",
    "job",
    "job queue",
    "jobcallback record",
    "joint session history",
    "json clone",
    "json deserialization",
    "json deserialize",
    "json mime type",
    "json object",
    "json representation",
    "json serialization",
    "json serialization of a shadow root",
    "json serialization of an element",
    "json serialization of the windowproxy object",
    "json serialization of window rect",
    "json type",
    "json-field-value",
    "json-serializable",
    "json-serialize",
    "json-serialized",
    "json-serializing",
    "json.parse()",
    "json.stringify",
    "json.stringify()",
    "jsonwebkey",
    "justification opportunity",
    "justify-content",
    "justify-items",
    "justify-self",
    "justify-tracks",
    "k-rate",
    "k1",
    "k2",
    "k3",
    "kbd",
    "keep-alive flag",
    "key",
    "key attribute value",
    "key chunk",
    "key code attribute value",
    "key export steps",
    "key frame",
    "key generator",
    "key import steps",
    "key input source",
    "key input state",
    "key location",
    "key mapping",
    "key modifier name",
    "key path",
    "key range",
    "key string",
    "key value",
    "keyalgorithm",
    "keyboard accessible",
    "keyboard event",
    "keyboard event code",
    "keyboard event code tables",
    "keyboard event order",
    "keyboard modifier keys",
    "keyboard-interactable",
    "keyboard-interactable element",
    "keydown",
    "keydown event",
    "keydown-event",
    "keyed",
    "keyframe",
    "keyframe effect",
    "keyframe offset",
    "keyframe-specific composite operation",
    "keygen",
    "keypad",
    "keypress",
    "keypress event",
    "keypress-event",
    "keystatuseschange",
    "keyup",
    "keyup event",
    "keyup-event",
    "keyword-source",
    "kill buffer",
    "kin",
    "kind",
    "kind strings",
    "known networks",
    "known prompt handling approaches table",
    "koi8-r",
    "koi8-u",
    "lab()",
    "label",
    "labelable elements",
    "labeled control",
    "landing page",
    "landmark",
    "landmarks",
    "landscape",
    "landscape orientation",
    "landscape-primary",
    "landscape-secondary",
    "lang",
    "language range",
    "language tag",
    "large viewport size",
    "large viewport-percentage units",
    "largeblob",
    "largeop",
    "largest contentful paint size",
    "last activation timestamp",
    "last baseline set",
    "last baselines",
    "last child",
    "last cross-axis baseline set",
    "last css style sheet set name",
    "last decode timestamp",
    "last event id string",
    "last frame duration",
    "last idle period deadline",
    "last line",
    "last main-axis baseline set",
    "last position updated time",
    "last presented frame indentifier",
    "last remembered size",
    "last reported playback position",
    "last selected source",
    "last usable css region",
    "last usable region",
    "last-baseline alignment",
    "last-baseline content-alignment",
    "last-baseline self-alignment",
    "last-event-id",
    "last-modified",
    "lastmodified",
    "latency",
    "latest",
    "latest entry",
    "latest geolocation reading",
    "latest reading",
    "latest-from-network",
    "launching a shortcut",
    "launching a web application",
    "lax",
    "layer name",
    "laying out in-place",
    "layout api children",
    "layout api container",
    "layout api context",
    "layout api formatting context",
    "layout api work task",
    "layout bounds",
    "layout box",
    "layout class instances",
    "layout containment",
    "layout containment box",
    "layout cycles",
    "layout definition",
    "layout definitions",
    "layout shift value",
    "layout valid flag",
    "layout-internal",
    "layout-invalid",
    "layout-valid",
    "layoutchange",
    "lazy",
    "lazy load intersection observer",
    "lazy load resumption steps",
    "lazy load root margin",
    "lazy loading attribute",
    "lch()",
    "le bonding procedure",
    "leader()",
    "leading",
    "leading surrogate",
    "leading-trim",
    "left",
    "left page",
    "left-hand side",
    "leftover space",
    "legacy callback interface object",
    "legacy factory function",
    "legacy name alias",
    "legacy platform object",
    "legacy platform objects",
    "legacy shorthand",
    "legacy-canceled-activation behavior",
    "legacy-clone a browsing session storage shed",
    "legacy-pre-activation behavior",
    "legacy-uppercased-byte less than",
    "legacyfactoryfunction identifier",
    "legacynulltoemptystring",
    "legacywindowalias identifier",
    "legend",
    "length",
    "length-percentage",
    "lengthcomputable",
    "less than",
    "let declaration",
    "letter",
    "letter-spacing",
    "level",
    "levelchange",
    "li",
    "license",
    "lifecycle callbacks",
    "lifetime",
    "light color scheme",
    "light source",
    "light tree",
    "lighting-color",
    "limit",
    "limit maximum sampling frequency",
    "limit number of delivered readings",
    "limit the amount of information",
    "limited max-content contribution",
    "limited min-content contribution",
    "limited to numbers greater than zero",
    "limited to only known values",
    "limited to only non-negative numbers",
    "limited to only non-negative numbers greater than zero",
    "limited to only non-negative numbers greater than zero with fallback",
    "limited-quirks mode",
    "limiting",
    "line",
    "line box",
    "line break",
    "line breaking",
    "line breaking process",
    "line gap metric",
    "line grid",
    "line join shape",
    "line name",
    "line name set",
    "line orientation",
    "line segments",
    "line-ascent",
    "line-break",
    "line-clamp",
    "line-descent",
    "line-grid",
    "line-height",
    "line-height-step",
    "line-left",
    "line-left offset",
    "line-over",
    "line-over offset",
    "line-padding",
    "line-relative",
    "line-relative direction",
    "line-relative shift values",
    "line-relative values",
    "line-right",
    "line-right offset",
    "line-snap",
    "line-under",
    "line-under offset",
    "linear acceleration",
    "linear easing function",
    "linear gain unit to decibel",
    "linear pcm",
    "linear timing function",
    "linear-gradient()",
    "linear-light srgb",
    "lineargradient",
    "linethickness",
    "link",
    "link text",
    "link text selector",
    "linked resource fetch setup steps",
    "linkmove",
    "linkstyle",
    "list",
    "list interfaces",
    "list item",
    "list of active formatting elements",
    "list of active timers",
    "list of active xr input sources",
    "list of animation frame callbacks",
    "list of available images",
    "list of available presentation displays",
    "list of available remote playback devices",
    "list of color formats for non-projection layers",
    "list of color formats for projection layers",
    "list of complex selectors",
    "list of compound selectors",
    "list of currently running animation frame callbacks",
    "list of depth formats for non-projection layers",
    "list of depth formats for projection layers",
    "list of descendant browsing contexts",
    "list of dragged nodes",
    "list of elements with class names classnames",
    "list of elements with namespace namespace and local name localname",
    "list of elements with qualified name qualifiedname",
    "list of full-sized viewports",
    "list of idle request callbacks",
    "list of immersive xr devices",
    "list of inherent constrainable track properties",
    "list of inline sessions",
    "list of joints",
    "list of known elements",
    "list of known shadow roots",
    "list of mock cameras",
    "list of mock microphones",
    "list of newly introduced cues",
    "list of notifications",
    "list of options",
    "list of pending fullscreen events",
    "list of pending play promises",
    "list of pending text tracks",
    "list of registered performance observer objects",
    "list of runnable idle callbacks",
    "list of scripts that will execute in order as soon as possible",
    "list of scripts that will execute when the document has finished parsing",
    "list of selectors",
    "list of simple selectors",
    "list of supported modes",
    "list of sync registrations",
    "list of text tracks",
    "list of the descendant browsing contexts",
    "list of video frame request callbacks",
    "list of viewport objects",
    "list of viewports",
    "list of websocket resources",
    "list of webvtt node objects",
    "list owner",
    "list properties",
    "list-of-inherent-constrainable-track-properties",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "list-valued properties",
    "listed elements",
    "listener",
    "listening agent",
    "listing",
    "live",
    "live profile",
    "live ranges",
    "live region",
    "live regions",
    "live seekable range",
    "load",
    "load rule",
    "loaded",
    "loading",
    "loading image",
    "loadtime",
    "local",
    "local address",
    "local audio playback suppression",
    "local boundary default action",
    "local cache",
    "local coordinate system",
    "local date and time",
    "local date and time state",
    "local default namespace",
    "local end",
    "local end definition",
    "local ends",
    "local file system handle factories",
    "local invocation id",
    "local invocation index",
    "local items",
    "local name",
    "local name data type",
    "local playback device",
    "local playback state",
    "local prefixes map",
    "local scheme",
    "local storage",
    "local storage area",
    "local storage bucket",
    "local storage holder",
    "local time",
    "local type",
    "local type name",
    "local-urls-only flag",
    "locale",
    "locality",
    "localizable members",
    "localized string table",
    "localname",
    "localtime",
    "locate a namespace",
    "locate a namespace prefix",
    "locating a namespace prefix",
    "location",
    "location url",
    "location-object navigate",
    "lock",
    "lock manager",
    "lock request",
    "lock task queue",
    "lock the orientation",
    "lock-concept",
    "locked for focus",
    "locked for reset",
    "locked to a reader",
    "locked to a writer",
    "log event buffer",
    "log()",
    "logical",
    "logical display surface",
    "logical display surfaces",
    "logical height",
    "logical maximum tag",
    "logical minimum tag",
    "logical property group",
    "logical scroll position \"block\"",
    "logical scroll position \"inline\"",
    "logical width",
    "logicalsurface",
    "logo",
    "long",
    "long attribute values",
    "long long",
    "long task",
    "longer",
    "longhand",
    "longhand property",
    "look up a custom element definition",
    "loop",
    "loop body",
    "loosely sorted by offset",
    "lose the device",
    "lostpointercapture event",
    "low boundary",
    "low entropy hint table",
    "low-level",
    "low-surrogate code unit",
    "lower-alpha",
    "lower-roman",
    "lowercase",
    "lowercase letter",
    "lowerlimitbaselinedropmin",
    "lowerlimitgapmin",
    "lspace",
    "ltr",
    "m11 element",
    "m12 element",
    "m21 element",
    "m22 element",
    "m41 element",
    "m42 element",
    "machine-readable equivalent of the element's contents",
    "macintosh",
    "magnetic declination",
    "magnetic field",
    "magnetometer",
    "mail as body",
    "mail with headers",
    "mailto:",
    "main",
    "main axis",
    "main dimension",
    "main fetch",
    "main items",
    "main size",
    "main size property",
    "main tv episode",
    "main-axis",
    "main-axis baseline set",
    "main-desc",
    "main-end",
    "main-size",
    "main-start",
    "make disappear",
    "making a buffer available for reading",
    "managed state",
    "managed states",
    "mandatory conditions",
    "mandatory data types",
    "manifest",
    "manifest image resource",
    "manifest url",
    "manifest's",
    "manifest-src",
    "manual slot assignment",
    "manufacturer specific data",
    "map",
    "map a url to ndef",
    "map absolute-url to ndef",
    "map and normalize axes",
    "map and normalize buttons",
    "map binary data to ndef",
    "map depth and color",
    "map document language elements to table elements",
    "map element",
    "map empty record to ndef",
    "map entries",
    "map external data to ndef",
    "map local type to ndef",
    "map of animation frame callbacks",
    "map size getter",
    "map smart poster to ndef",
    "map text to ndef",
    "map to the aspect-ratio property",
    "map to the aspect-ratio property (using dimension rules)",
    "maplike",
    "maplike declaration",
    "mapping logic",
    "maps to the dimension property",
    "maps to the dimension property (ignoring zero)",
    "maps to the pixel length property",
    "margin",
    "margin (of a box)",
    "margin area",
    "margin at-rule",
    "margin box",
    "margin context",
    "margin edge",
    "margin properties",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-box",
    "margin-break",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "mark",
    "mark adapters stale",
    "mark paint timing",
    "mark resource timing",
    "marker",
    "marker box",
    "marker image",
    "marker properties",
    "marker string",
    "marker-end",
    "marker-mid",
    "marker-side",
    "marker-start",
    "markers",
    "markup declaration open state",
    "marquee",
    "marquee current loop index",
    "marquee loop count",
    "marquee scroll distance",
    "marquee scroll interval",
    "mask",
    "mask border image",
    "mask border image area",
    "mask image",
    "mask layer image",
    "mask painting area",
    "mask positioning area",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "maskable",
    "maskcontentunits",
    "maskunits",
    "masonry axis",
    "masonry box",
    "masonry-auto-flow",
    "match",
    "match a complex selector against an element",
    "match a css production",
    "match a device filter",
    "match a request",
    "match a selector against a pseudo-element",
    "match a selector against a tree",
    "match a selector against an element",
    "match an installed app",
    "match an mp3 header",
    "match any filter",
    "match cross-origin opener policy values",
    "match service worker registration",
    "match the environment",
    "match the filter",
    "matched capability serialization algorithm",
    "matches",
    "matches a filter",
    "matches any collection",
    "matches any filter",
    "matches the collection",
    "matches the device ids",
    "matches the environment",
    "matches the filter",
    "matches the interface filter",
    "matches the signature for mp3 without id3",
    "matches the signature for mp4",
    "matches the signature for webm",
    "matches the stored exchange",
    "matching a padded sequence",
    "matching capabilities",
    "matching transition delay",
    "matching transition duration",
    "matching transition timing function",
    "matching transition-property value",
    "math axis",
    "math baseline",
    "math function",
    "math functions",
    "math-depth",
    "math-shift",
    "math-style",
    "mathbackground",
    "mathcolor",
    "mathematical baseline",
    "mathematical value",
    "mathitalicscorrectioninfo",
    "mathml annotation-xml",
    "mathml attributes",
    "mathml core elements",
    "mathml element",
    "mathml math",
    "mathml merror",
    "mathml mi",
    "mathml mn",
    "mathml mo",
    "mathml ms",
    "mathml mtext",
    "mathml namespace",
    "mathml text integration point",
    "mathsize",
    "mathtopaccentattachment",
    "mathvariant",
    "matrix",
    "matrix object",
    "matrix3d()",
    "mature",
    "matured",
    "max",
    "max cross size",
    "max cross size property",
    "max height",
    "max main size",
    "max main size property",
    "max size",
    "max size property",
    "max track sizing function",
    "max width",
    "max()",
    "max-block-size",
    "max-content",
    "max-content block size",
    "max-content block-size contribution",
    "max-content constraint",
    "max-content contribution",
    "max-content inline size",
    "max-content inline-size contribution",
    "max-content size",
    "max-content sizing-guess",
    "max-content width",
    "max-content width of a column",
    "max-content width of a column based on cells of span up to 1",
    "max-content width of a column based on cells of span up to n (n > 1)",
    "max-content width of a table",
    "max-height",
    "max-inline-size",
    "max-lines",
    "max-width",
    "max_age",
    "maxbuffersize",
    "maximize the window",
    "maximize window",
    "maximized window state",
    "maximum",
    "maximum active sessions",
    "maximum allowed code point",
    "maximum allowed value length",
    "maximum far clip plane",
    "maximum height",
    "maximum inline field of view",
    "maximum mipLevel count",
    "maximum move distance",
    "maximum number of actions",
    "maximum number of retries",
    "maximum safe integer",
    "maximum size",
    "maximum value",
    "maximum width",
    "maxsize",
    "may",
    "may have a guest browsing context",
    "mb field",
    "mbit/s",
    "me",
    "me field",
    "measurable properties",
    "media",
    "media capture mechanism",
    "media condition",
    "media content image",
    "media data",
    "media data processing steps list",
    "media description",
    "media element",
    "media element attributes",
    "media element event task source",
    "media element load algorithm",
    "media element stall timeout",
    "media element state",
    "media elements",
    "media feature",
    "media feed broadcast event",
    "media feed document",
    "media feed item url",
    "media feed items",
    "media feed property",
    "media feed store",
    "media feed url",
    "media flinging",
    "media fragment syntax",
    "media groups",
    "media image",
    "media item action",
    "media item author",
    "media item content rating",
    "media item episode",
    "media item id",
    "media item interaction statistic",
    "media item season",
    "media item third party identifier",
    "media item third party identifier set",
    "media item types",
    "media keys",
    "media logo",
    "media mirroring",
    "media pixels",
    "media provider object",
    "media query",
    "media query list",
    "media query modifier",
    "media receiver",
    "media remoting",
    "media resource",
    "media resources",
    "media segment",
    "media sender",
    "media session action",
    "media session action source",
    "media session actions update algorithm",
    "media stream \"identification-tag\"",
    "media timeline",
    "media transport",
    "media type",
    "media-dependent import",
    "media-feed link relation type",
    "media-resource-specific text track",
    "media-src",
    "media-time",
    "mediadevicekind",
    "mediadevices",
    "mediaelementaudiosourcenode",
    "mediaelementaudiosourceoptions",
    "mediaencryptedevent",
    "mediaencryptedeventinit",
    "mediakeymessageevent",
    "mediakeymessageeventinit",
    "mediakeymessagetype",
    "mediakeys",
    "mediakeysession",
    "mediakeysessiontype",
    "mediakeysrequirement",
    "mediakeystatus",
    "mediakeystatusmap",
    "mediakeysystemaccess",
    "mediakeysystemconfiguration",
    "mediakeysystemmediacapability",
    "mediarecorder",
    "mediasource",
    "mediasource object url",
    "mediastream",
    "mediastreamaudiodestinationnode",
    "mediastreamaudiosourcenode",
    "mediastreamaudiosourceoptions",
    "mediastreamconstraints",
    "mediastreamtrack",
    "mediastreamtrackaudiosourcenode",
    "mediastreamtrackaudiosourceoptions",
    "mediatrackcapabilities",
    "mediatrackconstraints",
    "mediatrackconstraintset",
    "mediatracksettings",
    "mediatracksupportedconstraints",
    "megabit",
    "megabits per second",
    "member",
    "members",
    "memory access",
    "memory attribution token",
    "memory layout",
    "memory locations",
    "memory measurement allowed predicate",
    "memory object cache",
    "memory view",
    "menu",
    "menuitem",
    "menutext",
    "merge with the next text node",
    "merged",
    "merged annotation",
    "merging capabilities",
    "message",
    "message port post message steps",
    "messageevent",
    "met",
    "meta",
    "metadata",
    "metadata content",
    "meter",
    "method",
    "method cache entry match",
    "method steps",
    "methoddata population algorithm",
    "microdata",
    "microdata errors",
    "microphone information can be exposed",
    "microphone-information-can-be-exposed",
    "microtask",
    "microtask queue",
    "microtask task source",
    "midi",
    "midi device",
    "midi input port",
    "midi interface",
    "midi message",
    "midi output port",
    "midi system real-time message",
    "midi-fp",
    "midpoint-on-the-path",
    "mifare standard",
    "migrate an animator instance",
    "millisecond",
    "milliseconds",
    "mime",
    "mime type",
    "mime type record",
    "mime type sniffing algorithm",
    "mime types array",
    "min",
    "min cross size",
    "min cross size property",
    "min height",
    "min main size",
    "min main size property",
    "min size",
    "min size property",
    "min track sizing function",
    "min width",
    "min()",
    "min-block-size",
    "min-content",
    "min-content block size",
    "min-content block-size contribution",
    "min-content constraint",
    "min-content contribution",
    "min-content inline size",
    "min-content inline-size contribution",
    "min-content size",
    "min-content sizing-guess",
    "min-content width",
    "min-content width of a column",
    "min-content width of a column based on cells of span up to 1",
    "min-content width of a column based on cells of span up to n (n > 1)",
    "min-content width of a table",
    "min-content-percentage sizing-guess",
    "min-content-specified sizing-guess",
    "min-height",
    "min-inline-size",
    "min-intrinsic-sizing",
    "min-width",
    "minimal culprit attribution",
    "minimal-ui",
    "minimize window",
    "minimized window state",
    "minimum",
    "minimum allowed value length",
    "minimum block text size",
    "minimum contribution",
    "minimum height",
    "minimum inline field of view",
    "minimum near clip plane",
    "minimum periodic sync interval across origins",
    "minimum periodic sync interval for any origin",
    "minimum readable text size",
    "minimum size",
    "minimum value",
    "minimum width",
    "minsize",
    "mipmap level",
    "missing value default",
    "missing value default state",
    "missing-attribute-value",
    "missing-doctype-name",
    "missing-doctype-public-identifier",
    "missing-doctype-system-identifier",
    "missing-end-tag-name",
    "missing-quote-before-doctype-public-identifier",
    "missing-quote-before-doctype-system-identifier",
    "missing-semicolon-after-character-reference",
    "missing-whitespace-after-doctype-public-keyword",
    "missing-whitespace-after-doctype-system-keyword",
    "missing-whitespace-before-doctype-name",
    "missing-whitespace-between-attributes",
    "missing-whitespace-between-doctype-public-and-system-identifiers",
    "mix-blend-mode",
    "mixed content",
    "mixed download",
    "mixing rules",
    "mmultiscripts prescripts",
    "mock capture device set",
    "mock sensor",
    "mock sensor already created",
    "mock sensor reading",
    "mock sensor reading values",
    "mock sensor type",
    "mod()",
    "mode",
    "modifier key",
    "modifiers",
    "modifiers population algorithm",
    "module",
    "module map",
    "module name",
    "module namespace exotic object",
    "module responses map",
    "module scope",
    "module script",
    "moduluslength",
    "monitor",
    "monitor the list of available presentation displays",
    "monitor the list of available remote playback devices",
    "monitored",
    "monitored object",
    "monitoring incoming presentation connections",
    "monochrome",
    "monolithic",
    "monospace",
    "monotonic clock",
    "monotonically increasing timeline",
    "month",
    "month state",
    "most-negative-single-float",
    "most-positive-single-float",
    "mouse event",
    "mouse event order",
    "mousedown",
    "mousedown event",
    "mouseenter",
    "mouseevent",
    "mouseeventinit",
    "mouseleave",
    "mousemove",
    "mousemove event",
    "mouseout",
    "mouseover",
    "mouseover event",
    "mouseup",
    "mouseup event",
    "movablelimits",
    "move",
    "move distance",
    "move target out of bounds",
    "move vector",
    "mover base",
    "mover overscript",
    "moveto(x, y)",
    "mpadded inner box",
    "mpadded@depth",
    "mpadded@height",
    "mpadded@lspace",
    "mpadded@voffset",
    "mpadded@width",
    "mpath",
    "mroot base",
    "mroot index",
    "mrst",
    "mspace@depth",
    "mspace@height",
    "mspace@width",
    "msqrt base",
    "mst",
    "msub base",
    "msub subscript",
    "msubsup base",
    "msubsup subscript",
    "msup base",
    "msup superscript",
    "msupsup superscript",
    "multi-col line",
    "multi-column container",
    "multi-column formatting context",
    "multi-column layout",
    "multi-column line",
    "multi-factor capable",
    "multi-line flex container",
    "multicol",
    "multicol container",
    "multicol line",
    "multiline",
    "multipart/form-data",
    "multipart/form-data boundary string",
    "multipart/form-data encoding algorithm",
    "multipart/mixed",
    "multipart/x-mixed-replace",
    "multiple attribute",
    "multiple declarations",
    "multiple values",
    "multiple-contexts",
    "multiply",
    "multiply transforms",
    "multiscripts base",
    "multiscripts postscripts",
    "munder base",
    "munder underscript",
    "munderover base",
    "munderover overscript",
    "munderover underscript",
    "muse",
    "must",
    "must not",
    "must not be exposed",
    "mutable",
    "mutable element",
    "mutable elements",
    "mutable form control element",
    "mutable form control elements",
    "mutate action url",
    "mutation observer microtask queued",
    "mutation observers",
    "mutationobserver",
    "mute",
    "mute iframe load",
    "muted",
    "muted errors",
    "muting",
    "n",
    "naively convert from cmyk to rgba",
    "naively convert from rgba to cmyk",
    "naively converted to cmyk",
    "naively converted to rgba",
    "name",
    "name code point",
    "name discovery procedure",
    "name of the webassembly function",
    "name to cache map",
    "name-start code point",
    "named attribute",
    "named character reference state",
    "named character references",
    "named color",
    "named constructor",
    "named definition",
    "named elements",
    "named flow",
    "named grid area",
    "named key attribute value",
    "named objects",
    "named page",
    "named properties",
    "named properties object",
    "named property deleter",
    "named property getter",
    "named property setter",
    "named property visibility algorithm",
    "named string",
    "named strings",
    "namedcurve",
    "namedflows",
    "nameditem()",
    "namespace",
    "namespace concept",
    "namespace member",
    "namespace object",
    "namespace prefix",
    "namespace prefix lists",
    "namespace prefix map",
    "namespace uris",
    "namespaceuri",
    "nan-safe maximum",
    "nan-safe minimum",
    "native accessibility semantics map",
    "native appearance",
    "native depth sensing",
    "native entity type",
    "native hit test",
    "native hit test result",
    "native hit test results",
    "native webgl framebuffer resolution",
    "natural",
    "natural aspect ratio",
    "natural dimension",
    "natural dimensions of a cross-fade()",
    "natural end-point",
    "natural height",
    "natural resolution",
    "natural size",
    "natural width",
    "nav",
    "nav-down",
    "nav-left",
    "nav-right",
    "nav-up",
    "navigate",
    "navigate an iframe or frame",
    "navigate to",
    "navigate to a fragment",
    "navigate-redirect fetch",
    "navigate-to",
    "navigating",
    "navigating to a fragment identifier",
    "navigation",
    "navigation params",
    "navigation request",
    "navigation timing entry",
    "navigation type",
    "navigation-override",
    "navigationtype",
    "navigator",
    "navigator compatibility mode",
    "navigator object",
    "navigator.online",
    "navigatornetworkinformation",
    "navigatorusermediasuccesscallback",
    "ndc",
    "ndef",
    "ndef message",
    "ndef record",
    "ndef signature",
    "near",
    "near plane",
    "near value",
    "nearest ancestor autofocus scoping root element",
    "nearest block ancestor",
    "nearest scrollport",
    "need new subpath",
    "need random access point flag",
    "needs a browsing context group switch",
    "negotiation-needed flag",
    "negotiationneeded",
    "neighbor",
    "nel",
    "nel policies",
    "nel policy",
    "nemeth braille",
    "nest-containing",
    "nest-prefixed",
    "nested browsing context",
    "nested context required document policy",
    "nested grid",
    "nested region context",
    "nested style rule",
    "nested-comment",
    "nesting selector",
    "nesting style rule",
    "network",
    "network error",
    "network error report",
    "network error reports",
    "network errors",
    "network interaction",
    "network partition key",
    "network protocol",
    "network request",
    "network requests",
    "networkinformation",
    "networking task source",
    "neutral value for composition",
    "never support",
    "never-rendered element",
    "new",
    "new broadcastchannel(name)",
    "new domparser()",
    "new information about the user’s intent",
    "new messagechannel()",
    "new read buffer",
    "new session",
    "new sessions",
    "new window",
    "newline",
    "newlines",
    "newobjectenvironment",
    "newpromisereactionjob",
    "newpromiseresolvethenablejob",
    "newtarget",
    "next",
    "next input character",
    "next input code point",
    "next input token",
    "next non-whitespace position",
    "next sibling",
    "next sibling not included",
    "next token",
    "next-sibling combinator",
    "nextid",
    "nfc adapter",
    "nfc content",
    "nfc device",
    "nfc forum type 1",
    "nfc forum type 2",
    "nfc forum type 3",
    "nfc forum type 4",
    "nfc forum type 5",
    "nfc handover",
    "nfc is suspended",
    "nfc listen algorithm",
    "nfc peer",
    "nfc reading algorithm",
    "nfc state",
    "nfc tag",
    "nickname",
    "nnonext",
    "no corresponding role",
    "no cors",
    "no longer open",
    "no pending font loads",
    "no role",
    "no scheme state",
    "no such alert",
    "no such cookie",
    "no such element",
    "no such frame",
    "no such mock sensor",
    "no such shadow root",
    "no such window",
    "no-cors-safelisted request-header",
    "no-cors-safelisted request-header name",
    "no-quirks mode",
    "no-referrer",
    "no-referrer-when-downgrade",
    "no-sniff flag",
    "no-translate",
    "no-validate state",
    "nobr",
    "node",
    "node a is inserted",
    "node a is removed",
    "node document",
    "node impact region",
    "node is inserted into a document",
    "node is removed from a document",
    "node length",
    "node name to parameter descriptor map",
    "node name to processor constructor map",
    "node tree",
    "node type",
    "node types",
    "nodeiterator pre-removing steps",
    "nodelist",
    "nodes",
    "noembed",
    "noframes",
    "noisesuppression",
    "nominal range",
    "nomodificationallowederror",
    "non-arrayed texture",
    "non-ascii code point",
    "non-associable",
    "non-associable by an entity",
    "non-associable by the application",
    "non-control character",
    "non-discoverable credential",
    "non-empty",
    "non-ideographic letters",
    "non-ideographic numerals",
    "non-local boundary default action",
    "non-negative-number",
    "non-normative",
    "non-persistent notification",
    "non-printable code point",
    "non-rendered element",
    "non-replaced",
    "non-replaced element",
    "non-resident credential",
    "non-searchable subtree",
    "non-secure context",
    "non-strict code",
    "non-strict function",
    "non-subresource request",
    "non-typeable form control",
    "non-void-html-element-start-tag-with-trailing-solidus",
    "nonblockingevents",
    "nonce",
    "nonce-source",
    "noncharacter",
    "noncharacter-character-reference",
    "noncharacter-in-input-stream",
    "none",
    "none page loading strategy",
    "noproxy",
    "normal",
    "normal elements",
    "normal page loading strategy",
    "normal window state",
    "normalcompletion",
    "normalised key value",
    "normalize",
    "normalize a feature name",
    "normalize a specifier key",
    "normalize an algorithm",
    "normalize into a token stream",
    "normalize newlines",
    "normalize non-finite values",
    "normalize protocol handler parameters",
    "normalize specified timing",
    "normalize the source densities",
    "normalized",
    "normalized timeranges object",
    "normalized value",
    "normalized value of a usages list",
    "normalized view coordinates",
    "normalized windows drive letter",
    "normalizing a specifier key",
    "normative",
    "noscript",
    "not additive",
    "not animatable",
    "not displayed",
    "not enabled",
    "not handled",
    "not in the same tree",
    "not loaded",
    "not origin-clean",
    "not overlapping",
    "not present",
    "notallowederror",
    "note",
    "notfound",
    "notfounderror",
    "nothing",
    "notification",
    "notify about playing",
    "notify about rejected promises",
    "notify activated state",
    "notify controller change",
    "notify error",
    "notify intersection observers",
    "notify mutation observers",
    "notify new reading",
    "notsupportederror",
    "now hidden algorithm",
    "now visible algorithm",
    "nth()",
    "null",
    "null body status",
    "null input source",
    "null input state",
    "null key",
    "null origin policy",
    "null policy",
    "null-character-reference",
    "nullable type",
    "number",
    "number of days in month month of year year",
    "number of document-tree child browsing contexts",
    "number of nullable member types",
    "number state",
    "number value",
    "numerator",
    "numeric",
    "numeric character reference end state",
    "numeric character reference state",
    "numeric data types",
    "numeric scalar",
    "numeric type value",
    "numeric types",
    "numeric vector",
    "numpad",
    "nyquist frequency",
    "oauth client",
    "object",
    "object bounding box",
    "object descriptor",
    "object id for an object",
    "object id map",
    "object size negotiation",
    "object store",
    "object store handle",
    "object types",
    "object url",
    "object-fit",
    "object-position",
    "object-src",
    "objectcreate",
    "objects",
    "obscured",
    "obscuring",
    "observable array exotic object",
    "observable array type",
    "observable changes",
    "observable policy",
    "observation procedure",
    "observe",
    "observe a target element",
    "observed attributes",
    "observer",
    "observer buffer",
    "observer callback",
    "observer type",
    "obtain a browsing context to use for a navigation response",
    "obtain a connection",
    "obtain a cross-origin opener policy",
    "obtain a dedicated/shared worker agent",
    "obtain a local storage bottle map",
    "obtain a local storage shelf",
    "obtain a physical form",
    "obtain a service worker agent",
    "obtain a session storage bottle map",
    "obtain a set of css boxes",
    "obtain a set of event names",
    "obtain a similar-origin window agent",
    "obtain a site",
    "obtain a storage access flag set",
    "obtain a storage bottle map",
    "obtain a storage key",
    "obtain a storage shelf",
    "obtain a websocket connection",
    "obtain a window memory attribution token",
    "obtain a worker memory attribution token",
    "obtain a worker/worklet agent",
    "obtain a worklet agent",
    "obtain an embedder policy",
    "obtain cpu depth information",
    "obtain depth at coordinates",
    "obtain hit test results",
    "obtain hit test results for transient input",
    "obtain permission",
    "obtain the current device",
    "obtain the storage access map",
    "obtain their numeric values",
    "obtain webgl depth information",
    "obtaining a window memory attribution token",
    "obtaining a worker memory attribution token",
    "obtaining permission",
    "occupied",
    "octet",
    "octet string",
    "octet string containing",
    "octet string containing a bit string",
    "off",
    "offerer's system state",
    "official moment of creation",
    "official playback position",
    "offlineaudiocompletionevent",
    "offlineaudiocompletioneventinit",
    "offlineaudiocontext",
    "offlineaudiocontextoptions",
    "offscreen 2d context creation algorithm",
    "offset",
    "offset distance",
    "offset path",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "offsetk",
    "offsetleft",
    "offsetof",
    "offsetparent",
    "offsets-adjusted min-width, width, and max-width",
    "offsettop",
    "ok status",
    "ol",
    "oldest message",
    "omax",
    "omax,theorical",
    "omin",
    "omitted",
    "on",
    "one permitted sandboxed navigator",
    "online",
    "only if border is not equivalent to zero",
    "onoverscroll",
    "onscrollend",
    "onshow",
    "ontology",
    "opacity",
    "opaque",
    "opaque black",
    "opaque environment blending",
    "opaque filtered response",
    "opaque framebuffer",
    "opaque host",
    "opaque origin",
    "opaque texture",
    "opaque-host parser",
    "opaque-host-and-port string",
    "opaque-redirect filtered response",
    "open",
    "open a database",
    "open screen protocol agent",
    "open subpath",
    "open the port",
    "open window algorithm",
    "opener browsing context",
    "opener origin at creation",
    "operable",
    "operating coordinate space",
    "operation",
    "operationerror",
    "operations chain",
    "optgroup",
    "optgroup element",
    "optimal sampling frequency",
    "optimal viewing region",
    "optimally useful formatting",
    "optimum point",
    "option",
    "option element",
    "option elements",
    "option-expression",
    "optional",
    "optional argument",
    "optional basic constraints",
    "optional features",
    "optional trigger priority",
    "optional-ascii-whitespace",
    "optionality list",
    "optionality values",
    "optionally truncate a simple dialog string",
    "optionally-blockable",
    "options list",
    "order",
    "order-modified document order",
    "ordered map",
    "ordered set",
    "ordered set of unique space-separated tokens",
    "ordered set parser",
    "ordered set serializer",
    "ordered_node_snapshot_type",
    "ordinal value",
    "ordinary",
    "ordinary object",
    "ordinarydefineownproperty",
    "ordinarydelete",
    "ordinaryfunctioncreate",
    "ordinaryget",
    "ordinarygetownproperty",
    "ordinarygetprototypeof",
    "ordinaryisextensible",
    "ordinaryownpropertykeys",
    "ordinarypreventextensions",
    "ordinaryset",
    "ordinarysetprototypeof",
    "org",
    "organization-name",
    "organization-unit",
    "orientation lock",
    "orientation sensor",
    "orientation values",
    "orientationchange",
    "origin",
    "origin color",
    "origin header flag",
    "origin policy",
    "origin policy manifest",
    "origin server",
    "origin time",
    "origin-agent-cluster",
    "origin-bound one-time code",
    "origin-bound one-time code message",
    "origin-clean",
    "origin-clean flag",
    "origin-only flag",
    "origin-policy",
    "origin-when-cross-origin",
    "origin2d",
    "origin3d",
    "original insertion mode",
    "original source",
    "originate",
    "originating element",
    "originating line",
    "originating line box",
    "originating variable",
    "origins",
    "orphans",
    "orthogonal",
    "orthogonal flow",
    "oscillatornode",
    "oscillatoroptions",
    "osp agent",
    "other applicable specifications",
    "other space separators",
    "otherwise",
    "otp-credentials-feature",
    "out of flow",
    "out of gamut",
    "out transfers",
    "out-of-flow",
    "outer block size",
    "outer box-shadow",
    "outer display type",
    "outer edge",
    "outer height",
    "outer inline size",
    "outer max width",
    "outer max-content",
    "outer min width",
    "outer min-content",
    "outer size",
    "outer width",
    "outerheight",
    "outerhtml",
    "outerhtml idl attribute",
    "outermost svg element",
    "outerwidth",
    "outline",
    "outline depth",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "output",
    "output audiodata",
    "output bitmap",
    "output element",
    "output encodedaudiochunks",
    "output encodedvideochunks",
    "output of the cascade",
    "output progress value",
    "output tag",
    "output videoframes",
    "outputs",
    "outside",
    "outside and inside",
    "outstanding rejected promises weak set",
    "over",
    "overall progress",
    "overbarextraascender",
    "overbarrulethickness",
    "overbarverticalgap",
    "overconstrained",
    "overflow",
    "overflow alignment",
    "overflow clip edge",
    "overflow columns",
    "overflow directions",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlap",
    "overlay element",
    "overlay scrollbars",
    "overload resolution algorithm",
    "overloaded",
    "overridden constructor steps",
    "override mime type",
    "override the color scheme",
    "overscroll",
    "overscroll behavior",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "own audio restriction",
    "own autocapitalization hint",
    "own exposure set",
    "own properties",
    "own property",
    "owned",
    "owned element",
    "owned element's",
    "owned elements",
    "owner css rule",
    "owner node",
    "owning",
    "owning element",
    "p",
    "p1",
    "p2",
    "padding",
    "padding (of a box)",
    "padding area",
    "padding box",
    "padding edge",
    "padding properties",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-box",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page area",
    "page border",
    "page box",
    "page break",
    "page context",
    "page float",
    "page footer",
    "page group",
    "page header",
    "page load processing model for content that uses plugins",
    "page load processing model for inline content that doesn't have a dom",
    "page load processing model for media",
    "page load processing model for multipart/x-mixed-replace resources",
    "page load processing model for text files",
    "page load processing model for xml files",
    "page load strategy",
    "page load timeout",
    "page loading strategy",
    "page margin",
    "page orientation",
    "page padding",
    "page progression",
    "page property",
    "page pseudo-class",
    "page selector",
    "page selectors",
    "page sheet",
    "page showing",
    "page type selector",
    "page zoom",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "page-context",
    "page-margin boxes",
    "page-margin property",
    "paged media",
    "pagehide",
    "pager",
    "pageshow",
    "pagination",
    "paint",
    "paint class instances",
    "paint containment",
    "paint containment box",
    "paint definition",
    "paint definitions",
    "paint order",
    "paint server element",
    "paint source",
    "paint tree",
    "paint()",
    "paint-order",
    "paint-timing eligible",
    "paintable",
    "paintable bounding rect",
    "paintable pseudo-element",
    "painting of the surd",
    "pair",
    "pair asynchronously iterable declaration",
    "pair iterator",
    "pairing",
    "palpable content",
    "pan",
    "pannernode",
    "panneroptions",
    "paragraph",
    "parallel queue",
    "param",
    "parameter",
    "parameterdescriptors",
    "parameters",
    "parent",
    "parent browsing context",
    "parent css style sheet",
    "parent element",
    "parent grid",
    "parent group",
    "parent layout",
    "parent media source",
    "parsable mime type",
    "parse a boolean feature",
    "parse a calculation",
    "parse a comma-separated list of component values",
    "parse a component value",
    "parse a css <color> value",
    "parse a css declaration block",
    "parse a css rule",
    "parse a css stylesheet",
    "parse a css value",
    "parse a cssstylevalue",
    "parse a date component",
    "parse a date or time string",
    "parse a date string",
    "parse a declaration",
    "parse a duration string",
    "parse a global date and time string",
    "parse a group of selectors",
    "parse a json string to a javascript value",
    "parse a json string to an infra value",
    "parse a jwk",
    "parse a list of component values",
    "parse a list of css page selectors",
    "parse a list of declarations",
    "parse a list of rules",
    "parse a local date and time string",
    "parse a local type record",
    "parse a media query",
    "parse a media query list",
    "parse a mime type",
    "parse a mime type from bytes",
    "parse a month component",
    "parse a month string",
    "parse a page range",
    "parse a percentage string",
    "parse a platform-returned version string",
    "parse a privatekeyinfo",
    "parse a referrer policy from a `referrer-policy` header",
    "parse a relative selector",
    "parse a response's content security policies",
    "parse a response’s Content Security Policies",
    "parse a root margin",
    "parse a rule",
    "parse a sandboxing directive",
    "parse a selector",
    "parse a serialized CSP",
    "parse a serialized CSP list",
    "parse a serialized content security policy",
    "parse a sizes attribute",
    "parse a smart-poster action record",
    "parse a smart-poster size record",
    "parse a smart-poster type record",
    "parse a srcset attribute",
    "parse a string into an abstract matrix",
    "parse a string into an origin policy",
    "parse a stylesheet",
    "parse a subjectpublickeyinfo",
    "parse a text directive",
    "parse a time component",
    "parse a time string",
    "parse a time-zone offset component",
    "parse a time-zone offset string",
    "parse a url",
    "parse a url-like import specifier",
    "parse a vint",
    "parse a week string",
    "parse a yearless date component",
    "parse a yearless date string",
    "parse an `origin-policy` header",
    "parse an asn.1 structure",
    "parse an import map string",
    "parse an mp3 frame",
    "parse an ndef absolute-url record",
    "parse an ndef external type record",
    "parse an ndef mime type record",
    "parse an ndef record",
    "parse an ndef smart-poster record",
    "parse an ndef text record",
    "parse an ndef unknown record",
    "parse an ndef url record",
    "parse an origin-bound one-time code message",
    "parse as a forgiving selector list",
    "parse as an integer",
    "parse document policy",
    "parse error",
    "parse errors",
    "parse json bytes to a javascript value",
    "parse json bytes to an infra value",
    "parse json from bytes",
    "parse json into infra values",
    "parse policy directive",
    "parse records from bytes",
    "parse response’s Clear-Site-Data header",
    "parse response’s content security policies",
    "parse the report descriptor",
    "parse the webvtt cue settings",
    "parsed",
    "parsed according to a particular css grammar",
    "parsed as a forgiving selector list",
    "parsed copyto options",
    "parsed payment method manifest",
    "parsedtextdirective",
    "parsefloat",
    "parseint",
    "parsemodule",
    "parser cannot change the mode flag",
    "parser document",
    "parser inserted flag",
    "parser metadata",
    "parser pause flag",
    "parsescript",
    "parsing",
    "parsing a calculation",
    "parsing a json string to a javascript value",
    "parsing a json string to an infra value",
    "parsing a signed exchange",
    "parsing a string into an origin policy",
    "parsing a url-like import specifier",
    "parsing an `origin-policy` header",
    "parsing an import map string",
    "parsing as a forgiving selector list",
    "parsing as json",
    "parsing b2 cbor headers",
    "parsing b3 cbor headers",
    "parsing json bytes to a javascript value",
    "parsing json bytes to an infra value",
    "parsing the blocklist",
    "parsing the invariant prefix",
    "parsing the report descriptor",
    "parsing the signature header field",
    "parsing xhtml documents",
    "parsing_init_segment",
    "parsing_media_segment",
    "partial derivative",
    "partial dictionary",
    "partial interface",
    "partial interface mixin",
    "partial link text",
    "partial link text selector",
    "partial namespace",
    "partially available",
    "partially visible",
    "partitioned storage key",
    "party",
    "pass through filter",
    "pass-through",
    "passive fingerprinting",
    "passive scanning",
    "passthrough request",
    "password",
    "password state",
    "past names map",
    "paste",
    "path",
    "path components",
    "path id map",
    "path or authority state",
    "path percent-encode set",
    "path segment",
    "path start state",
    "path state",
    "path()",
    "path-absolute url",
    "path-absolute-non-windows-file-url string",
    "path-absolute-url string",
    "path-part",
    "path-part match",
    "path-relative-scheme-less-url string",
    "path-relative-url string",
    "pattern",
    "pattern mask",
    "pattern matching algorithm",
    "pause",
    "pause an animation",
    "pause-after",
    "pause-before",
    "paused for in-band content",
    "paused for user interaction",
    "paused play state",
    "payee",
    "payer",
    "payload field",
    "payload length field",
    "payment",
    "payment app failure algorithm",
    "payment card industry data security standard compliance",
    "payment handler",
    "payment handler window",
    "payment method",
    "payment method changed algorithm",
    "payment method identifier",
    "payment method manifest",
    "payment method manifests",
    "payment method provider",
    "payment methods",
    "payment request is showing",
    "payment-permission",
    "payment-relevant browsing context",
    "paymentcurrencyamount",
    "paymentdetailsbase",
    "paymentdetailsinit",
    "paymentdetailsmodifier",
    "paymentmethodchange",
    "paymentmethodchangeevent",
    "paymentmethoddata",
    "paymentrequest",
    "paymentrequest updated algorithm",
    "paymentrequest(methoddata, details)",
    "paymentrequest.paymentrequest()",
    "paymentrequestupdateevent",
    "paymentresponse",
    "pbkdf2params",
    "pcenchar",
    "pci dss",
    "peak brightness",
    "peeridentity",
    "pending",
    "pending abort request",
    "pending animation event queue",
    "pending event entries",
    "pending immersive session",
    "pending initial intersectionobserver targets",
    "pending initialization segment for changetype flag",
    "pending parsing-blocking script",
    "pending pause task",
    "pending play task",
    "pending playback rate",
    "pending pointer capture target override",
    "pending pointer down",
    "pending processor construction data",
    "pending promises count",
    "pending render state",
    "pending request",
    "pending scroll event targets",
    "pending table character tokens",
    "pending text track change notification flag",
    "pending write tuple",
    "pending-substitution value",
    "perceivable",
    "percent-column",
    "percent-decode",
    "percent-encoded byte",
    "percentage",
    "percentage contribution",
    "percentencodedchar",
    "perform a background fetch",
    "perform a microtask checkpoint",
    "perform a pointer move",
    "perform a scroll",
    "perform a security check",
    "perform actions",
    "perform automatic text track selection",
    "perform implementation-specific action dispatch steps",
    "perform vibration",
    "performance",
    "performance entry buffer",
    "performance entry buffer map",
    "performance observer task queued flag",
    "performance timeline",
    "performance timeline task source",
    "performance.now()",
    "performance.timeorigin",
    "performanceentry",
    "performanceentry.entrytype",
    "performancemark",
    "performancemark constructor",
    "performancemeasure",
    "performanceresourcetiming",
    "performancetiming",
    "performing a microtask checkpoint",
    "periodic sync processing queue",
    "periodic sync registration",
    "periodic sync scheduler",
    "periodicsync event",
    "periodicwave",
    "periodicwaveconstraints",
    "periodicwaveoptions",
    "peripheral",
    "permanent identifier",
    "permanently de-identified",
    "permissible worker",
    "permission",
    "permission descriptor type",
    "permission query algorithm",
    "permission request algorithm",
    "permission result type",
    "permission revocation algorithm",
    "permission state",
    "permission state constraints",
    "permission task source",
    "permissions policy",
    "permissions policy violation reports",
    "permissions-policy",
    "persisted replace state",
    "persisted user state",
    "persistent connections",
    "persistent css style sheet",
    "persistent notification",
    "personalization",
    "perspective",
    "perspective matrix",
    "perspective()",
    "perspective-origin",
    "phase",
    "phases",
    "photo",
    "phrasing content",
    "physical",
    "physical bottom",
    "physical dimensions",
    "physical direction",
    "physical hand input source",
    "physical left",
    "physical maximum tag",
    "physical minimum tag",
    "physical resources",
    "physical right",
    "physical size",
    "physical top",
    "physical unit",
    "physical units",
    "pick an encoding for a form",
    "picked",
    "picture",
    "picture-in-picture support",
    "picture-in-picture window",
    "pinch zoom",
    "ping-from",
    "ping-to",
    "pipe chain",
    "pipeline",
    "pipeline constant id",
    "pipeline creation",
    "pipeline input",
    "pipeline output",
    "pipeline-creation error",
    "pipeline-overridable",
    "pipeline-overridable constant has a default value",
    "pipeline-overridable constant identifier string",
    "piping",
    "pitch",
    "pitch-range",
    "pixel",
    "pixel density descriptor",
    "pixel density descriptor value",
    "pixel manipulation",
    "pixel unit",
    "pixel-column",
    "place-content",
    "place-items",
    "place-self",
    "placeholder",
    "placeholder axis",
    "placeholder button",
    "placeholder canvas element",
    "placeholder label option",
    "plain type",
    "plaintext",
    "plaintext state",
    "plan to navigate",
    "planar",
    "planned navigation",
    "platform",
    "platform attachment",
    "platform authenticators",
    "platform credential",
    "platform descriptor",
    "platform name",
    "platform object",
    "platform sensor",
    "platform wake lock",
    "play an animation",
    "play next episode",
    "play state",
    "play-during",
    "playback direction",
    "playback rate",
    "playback volume",
    "playbackorder",
    "playhead position",
    "playing",
    "plug-ins",
    "plugin",
    "plugin document",
    "plugins array",
    "pmi",
    "point",
    "pointee type",
    "pointer",
    "pointer capture",
    "pointer capture target override",
    "pointer events are not disabled",
    "pointer events disabled",
    "pointer input source",
    "pointer input state",
    "pointer type",
    "pointer-events",
    "pointer-interactable",
    "pointer-interactable element",
    "pointer-interactable paint tree",
    "pointercancel",
    "pointercancel event",
    "pointerdown",
    "pointerdown event",
    "pointerenter event",
    "pointerevent",
    "pointerleave event",
    "pointerlockchange",
    "pointerlockerror",
    "pointermove",
    "pointermove event",
    "pointerout event",
    "pointerover event",
    "pointerrawupdate",
    "pointerrawupdate event",
    "pointerup",
    "pointerup event",
    "points of interest",
    "policies",
    "policy",
    "policy cache",
    "policy configuration",
    "policy container",
    "policy directive",
    "policy directives",
    "policy origin",
    "policy request headers",
    "policy response headers",
    "policy value",
    "policy-controlled client hints features",
    "policy-controlled feature",
    "policy-token",
    "polite peer",
    "poly",
    "polygon",
    "polygon()",
    "polyline",
    "pop",
    "pop a ruby level",
    "pop tag",
    "populate rotation matrix",
    "populate the bluetooth cache",
    "populate the list of pending text tracks",
    "populate the pose",
    "populating and maintaining the coalesced and predicted event lists",
    "populating and maintaining the coalesced and predicted events lists",
    "popup sandboxing flag set",
    "port",
    "port 1",
    "port 2",
    "port message queue",
    "port state",
    "port-part",
    "port-part matches",
    "portal",
    "portal browsing context",
    "portal host object",
    "portal state",
    "portal task source",
    "portal-src",
    "portrait",
    "portrait orientation",
    "portrait-primary",
    "portrait-secondary",
    "poses may be reported",
    "poses must be limited",
    "position",
    "position box",
    "position state",
    "position variable",
    "positional alignment",
    "positioned",
    "positioned box",
    "positioned element/box",
    "positioning rectangle",
    "positioning scheme",
    "positioning schemes:",
    "possibly appropriate alternatives",
    "possibly pending font loads",
    "possibly update the key generator",
    "post",
    "post-alignment shift",
    "post-multiplied",
    "post-multiply",
    "post-navigation checks",
    "post-office-box",
    "post-processing the share_target member",
    "postal-code",
    "posted message task source",
    "poster frame",
    "posture",
    "posture values table",
    "potential destination",
    "potential event target",
    "potentialcustomelementname",
    "potentially active",
    "potentially add a largestcontentfulpaint entry",
    "potentially delays the load event",
    "potentially playing",
    "potentially scrollable",
    "potentially trustworthy origin",
    "potentially trustworthy origins",
    "potentially trustworthy url",
    "pow()",
    "powerful feature",
    "pragma-set default language",
    "pre",
    "pre-insert",
    "pre-lock conditions",
    "pre-multiplied",
    "pre-multiplied data type name",
    "pre-multiply",
    "pre-remove",
    "preceding element",
    "preconnect",
    "predeclared",
    "predefined-rgb",
    "predefined-rgb-params",
    "predicted event list",
    "predicted events",
    "predicted events list",
    "predicted events targets dirty",
    "predominant figure position",
    "preferred artwork image",
    "preferred aspect ratio",
    "preferred color scheme",
    "preferred css style sheet set name",
    "preferred density-corrected dimensions",
    "preferred facing mode",
    "preferred height",
    "preferred inline size of a glyph stretched along the block axis",
    "preferred line height",
    "preferred order",
    "preferred resolution",
    "preferred size",
    "preferred size property",
    "preferred width",
    "prefetch",
    "prefetch-src",
    "prefix",
    "prefix index",
    "prefix map",
    "preload",
    "preload keyword",
    "preload link",
    "preloadable hsts host",
    "premultiplied alpha",
    "premultiplied color values",
    "preparation-time document",
    "prepare a script",
    "prepare an event",
    "prepare an image for presentation",
    "prepare append",
    "prepare lists",
    "prepare to clear origin’s data",
    "prepare to run a callback",
    "prepare to run a script",
    "prepare to run script",
    "prepared to evaluate ecmascript code",
    "prerender",
    "prescan a byte stream to determine its encoding",
    "present",
    "present the presentation context content to the canvas",
    "presentation",
    "presentation attributes",
    "presentation connection",
    "presentation connection state",
    "presentation connections",
    "presentation controllers monitor",
    "presentation controllers promise",
    "presentation display",
    "presentation display availability",
    "presentation displays",
    "presentation identifier",
    "presentation identifiers",
    "presentation interval",
    "presentation message data",
    "presentation message type",
    "presentation order",
    "presentation request url",
    "presentation request urls",
    "presentation start time",
    "presentation task source",
    "presentation time",
    "presentation timestamp",
    "presentation url",
    "presentation-change-event",
    "presentation-connection-close-event",
    "presentation-connection-message",
    "presentation-connection-open-request",
    "presentation-connection-open-response",
    "presentation-start-request",
    "presentation-start-response",
    "presentation-termination-event",
    "presentation-termination-request",
    "presentation-termination-response",
    "presentation-url-availability-event",
    "presentation-url-availability-request",
    "presentation-url-availability-response",
    "presentational hints",
    "presentationrequest",
    "presentations",
    "preserved white space",
    "preventdefault",
    "preventdefault()",
    "previous block",
    "previous current time",
    "previous document unload timing",
    "previous frame starting point",
    "previous frame transform-indifferent starting point",
    "previous frame visual representation",
    "previous sibling",
    "previously focused element",
    "previously reported paints",
    "primary account number",
    "primary action",
    "primary content element",
    "primary filter primitive tree",
    "primary image track",
    "primary input source",
    "primary interface",
    "primary orientation",
    "primary pointer",
    "primary service discovery",
    "primary squeeze action",
    "primary squeeze button",
    "primary trigger",
    "primary view",
    "primitive restart value",
    "primitive types",
    "principal block-level box",
    "principal box",
    "principal point",
    "principal point x",
    "principal point y",
    "principal writing mode",
    "print page",
    "print when loaded",
    "print-color-adjust",
    "printable area",
    "printing steps",
    "priority",
    "priority candidates",
    "privacy feature",
    "private address",
    "private network access check",
    "private network request",
    "privateenvironment record",
    "privatekey",
    "privileged no-cors request-header name",
    "procedure timeouts",
    "process a color member",
    "process a fragment directive",
    "process a key action",
    "process a keyframe-like object",
    "process a keyframes argument",
    "process a navigate fetch",
    "process a navigate response",
    "process a navigate url scheme",
    "process a null action",
    "process a pause action",
    "process a pointer action",
    "process a pointer move action",
    "process a pointer up or pointer down action",
    "process a queue",
    "process a shortcut",
    "process a text member",
    "process a timing argument",
    "process a wheel action",
    "process accept types",
    "process an html paste event",
    "process an image resource from json",
    "process an image that finished loading",
    "process an imageresource from an api",
    "process an input source action sequence",
    "process an item",
    "process and consume fragment directive",
    "process blob parts",
    "process capabilities",
    "process cookie changes",
    "process dt or dd",
    "process image resources",
    "process periodic sync registrations",
    "process permissions policy attributes",
    "process pointer parameters",
    "process remote tracks",
    "process response",
    "process response policy",
    "process the addition of a remote track",
    "process the dir member",
    "process the display member",
    "process the frame attributes",
    "process the iframe attributes",
    "process the lang member",
    "process the linked resource",
    "process the lock request queue",
    "process the manifest",
    "process the orientation member",
    "process the related_applications member",
    "process the removal of a remote track",
    "process the scope member",
    "process the shortcuts member",
    "process the start_url member",
    "process the url member of an application",
    "process vertices",
    "process()",
    "processing",
    "processing a manifest",
    "processing a queue",
    "processing an item",
    "processing blob parts",
    "processing equivalence",
    "processing extension-point of web manifest",
    "processing model",
    "processing modes",
    "processing the backup element queue",
    "processing vibration patterns",
    "processing-input-buffer",
    "processinginstruction",
    "processor construction data",
    "produce a generator result",
    "producer",
    "producing an xml serialization of a dom node",
    "product id",
    "product name",
    "product of two unit maps",
    "profile fundamentals",
    "profiling session",
    "program error",
    "progress",
    "progress-based timeline",
    "progressevent",
    "progressive image",
    "progressive image frame generation",
    "project",
    "projection distortion coefficients",
    "proleptic gregorian calendar",
    "proleptic-gregorian date",
    "prolog",
    "promise",
    "promise objects",
    "promise type",
    "promise-call",
    "promise-calling",
    "promiseresolve",
    "prompt",
    "prompt the user to choose",
    "prompt to unload",
    "prompt to unload a document",
    "prompting the user to choose",
    "prompting to unload",
    "propagate",
    "propagation",
    "propagation path",
    "proper table child",
    "proper table row parent",
    "proper table-row parent",
    "properties",
    "property",
    "property descriptor",
    "property name",
    "property names",
    "property value",
    "property-name",
    "protected mode",
    "protected worker",
    "provoking vertex",
    "proximity sensor",
    "proxy",
    "proxy autoconfiguration",
    "proxy configuration",
    "proxy configuration object",
    "proxy exotic object",
    "proxy-authentication entry",
    "proxyautoconfigurl",
    "proxytype",
    "pseudo-class",
    "pseudo-classes",
    "pseudo-element",
    "pseudo-elements",
    "pubidchar",
    "public",
    "public address",
    "public bluetooth address",
    "public device address",
    "public key credential",
    "public key credential source",
    "public suffix",
    "publicexponent",
    "publicid",
    "publickey",
    "publickey-credentials-get-feature",
    "publishing web site",
    "pull source",
    "pull-into descriptor",
    "pullbidirectionalstream",
    "pulldatagrams",
    "pullunidirectionalstream",
    "push",
    "push a ruby annotation",
    "push a ruby level",
    "push endpoint",
    "push message",
    "push onto the list of active formatting elements",
    "push service",
    "push source",
    "push subscription",
    "push tag",
    "pushsubscriptionchange",
    "q",
    "quadrilateral",
    "qualified element name",
    "qualified name",
    "qualifiers",
    "quality",
    "quantization",
    "query",
    "query a permission",
    "query cache",
    "query cookies",
    "query file system permission",
    "query percent-encode set",
    "query set state",
    "query state",
    "query the \"bluetooth\" permission",
    "query the bluetooth cache",
    "query the sanitizer config",
    "querycommandenabled()",
    "querycommandindeterm()",
    "querycommandstate()",
    "querycommandsupported()",
    "querycommandvalue()",
    "querying file system permission",
    "queryselector",
    "queryselectorall",
    "queue",
    "queue a bgfetch task",
    "queue a contact picker task",
    "queue a control message",
    "queue a cross-origin embedder policy corp violation report",
    "queue a cross-origin embedder policy inheritance violation",
    "queue a fetch task",
    "queue a global task",
    "queue a media element task",
    "queue a microtask",
    "queue a mutation observer microtask",
    "queue a mutation record",
    "queue a performanceentry",
    "queue a report",
    "queue a scheduler task",
    "queue a signed exchange report",
    "queue a task",
    "queue a tree mutation record",
    "queue a violation report for access from an opened window",
    "queue a violation report for access from another window",
    "queue a violation report for access from the opener",
    "queue a violation report for access to an opened window",
    "queue a violation report for access to another window",
    "queue a violation report for access to the opener",
    "queue a violation report for browsing context group switch when navigating away from a coop response",
    "queue a violation report for browsing context group switch when navigating to a coop response",
    "queue an element task",
    "queue an intersection observer task",
    "queue an intersectionobserverentry",
    "queue entry.",
    "queue the navigation timing entry",
    "queue the performanceobserver task",
    "queue timeline",
    "queue violation reports for accesses",
    "queuing a scheduler task",
    "queuing strategy",
    "quirks mode",
    "quirky color",
    "quirky length",
    "quotaexceedederror",
    "quotes",
    "qwerty",
    "r",
    "radial distortion coefficients",
    "radial-gradient()",
    "radialgradient",
    "radical elements",
    "radical gap",
    "radical glyph",
    "radicaldegreebottomraisepercent",
    "radicaldisplaystyleverticalgap",
    "radicalextraascender",
    "radicalkernafterdegree",
    "radicalkernbeforedegree",
    "radicalrulethickness",
    "radicalverticalgap",
    "radio button",
    "radio button group",
    "raised initial",
    "random access point",
    "range",
    "range context",
    "range removal",
    "range state",
    "rangeerror",
    "rank",
    "rasterization mask",
    "rate limiting",
    "ratio",
    "ratio-dependent axis",
    "ratio-determining axis",
    "raw text elements",
    "raw value",
    "rawtext end tag name state",
    "rawtext end tag open state",
    "rawtext less-than sign state",
    "rawtext state",
    "rb",
    "rcdata end tag name state",
    "rcdata end tag open state",
    "rcdata less-than sign state",
    "rcdata state",
    "rdate",
    "re-snap",
    "re-used graphics",
    "read a body",
    "read access",
    "read bd_addr command",
    "read buffer",
    "read bytes",
    "read characteristic descriptors",
    "read errors",
    "read long characteristic descriptors",
    "read method",
    "read only",
    "read only arraybuffer",
    "read operation",
    "read request",
    "read the imports",
    "read the resource header",
    "read-into request",
    "read-loop",
    "read-only mode",
    "read-only parameter",
    "read-only storage texture",
    "read/write mode",
    "readable byte stream",
    "readable byte stream queue entry",
    "readable side",
    "readable stream",
    "readable stream reader",
    "readdatagrams",
    "readencodeddata",
    "reader",
    "reader error",
    "readiness state",
    "reading a body",
    "reading change threshold",
    "reading flag",
    "reading timestamp",
    "reading value",
    "readonly attribute",
    "readpixels from float",
    "ready",
    "ready for post-load tasks",
    "readystate",
    "real-world environment",
    "realm",
    "realm id",
    "realm record",
    "realms",
    "reassociation",
    "receive a message",
    "receive an rtcdatachannel message",
    "receive-algorithm",
    "received bytes",
    "received ip address",
    "received signal strength",
    "receivedatagrams",
    "receiver",
    "receiver report",
    "receives a cookie",
    "receives a set-cookie-string",
    "receives new button or axis input values",
    "receiving a cookie",
    "receiving browsing context",
    "receiving browsing contexts",
    "receiving user agent",
    "recently picked directory map",
    "recipient",
    "recognized algorithm name",
    "recognized key format values",
    "recognized key type values",
    "recognized key usage values",
    "recommended",
    "recommended use",
    "recommended webgl framebuffer resolution",
    "reconnect to a presentation",
    "reconnection time",
    "reconstruct the active formatting elements",
    "reconsume",
    "reconsume the current input code point",
    "reconsume the current input token",
    "record",
    "record connection timing info",
    "record identifier",
    "record of license destruction",
    "record type",
    "record-namespace-loop",
    "recording the input",
    "recording the namespace information",
    "rect",
    "rect()",
    "rectangle",
    "rectangle height dimension",
    "rectangle width dimension",
    "rectangle x coordinate",
    "rectangle y coordinate",
    "rectangular orthogonal color",
    "rectify a keywordish value",
    "rectify a numberish value",
    "rectify a percentish value",
    "rectifying a numberish value",
    "recursively emit context created events",
    "red eye reduction",
    "redirect count",
    "redirect mode",
    "redirect status",
    "redirects",
    "reduce accuracy",
    "reestablish the connection",
    "reference box",
    "reference pixel",
    "reference space is supported",
    "reference type",
    "referenced",
    "referenced document subtree",
    "referenced element",
    "referencing modes",
    "referer",
    "referrals",
    "referrer",
    "referrer policy",
    "referrer policy attribute",
    "referrer-policy",
    "referrerurl",
    "reflect",
    "refresh",
    "refresh state",
    "refresh state pragma directive",
    "refused to allow the document to be unloaded",
    "regexp",
    "regexpbuiltinexec",
    "regexpcreate",
    "region",
    "region break",
    "region chain",
    "region flow content box",
    "region-fragment",
    "register",
    "register a custom property",
    "register a protocol handler",
    "register a system key press handler",
    "register an import map",
    "register the observer",
    "registered",
    "registered class constructors map",
    "registered custom property",
    "registered observer",
    "registered observer list",
    "registered performance observer",
    "registered reporting observer list",
    "registered storage endpoints",
    "registerfake(type, classconstructor)",
    "registrable domain",
    "registration",
    "registration ceremony",
    "registration extension",
    "registration state",
    "regular attribute",
    "regular operation",
    "reified as a cssstylevalue",
    "reify a <transform-function>",
    "reify a <transform-list>",
    "reify a list of component values",
    "reify a math expression",
    "reify a numeric value",
    "reify a registered custom property value",
    "reify a var() reference",
    "reify an identifier",
    "reify as a cssstylevalue",
    "reinitialize url",
    "reject",
    "reject job promise",
    "reject pending play promises",
    "reject promise",
    "rejected",
    "rejecting",
    "rejection",
    "rel",
    "related",
    "related application",
    "related construct",
    "relatedtarget",
    "relationship",
    "relationship discovery",
    "relationship strings",
    "relationships",
    "relative",
    "relative color",
    "relative high resolution coarse time",
    "relative high resolution time",
    "relative length",
    "relative path",
    "relative position",
    "relative positioning",
    "relative selector",
    "relative slash state",
    "relative state",
    "relative units",
    "relative url",
    "relative-url string",
    "relative-url-with-fragment string",
    "relatively position",
    "relatively positioned box",
    "relatively-positioned",
    "release a lock",
    "release a read lock",
    "release a wake lock",
    "release a write lock",
    "release actions",
    "release early candidates",
    "release nfc",
    "release system resources",
    "release the lock",
    "release wake lock",
    "releases the wake lock",
    "relevant",
    "relevant agent",
    "relevant animation",
    "relevant child nodes",
    "relevant document",
    "relevant global object",
    "relevant mutations",
    "relevant name to cache map",
    "relevant owner to add",
    "relevant performance entry tuple",
    "relevant realm",
    "relevant request response list",
    "relevant settings object",
    "relevant to the user",
    "relevant types",
    "relevant value",
    "reload",
    "reload a document",
    "reload browsing contexts",
    "reload-navigation flag",
    "relying party",
    "relying party identifier",
    "rem()",
    "remaining",
    "remaining fragmentainer extent",
    "remaining free space",
    "remapping",
    "remote",
    "remote end",
    "remote end definition",
    "remote end event trigger",
    "remote end steps",
    "remote end subscribe steps",
    "remote ends",
    "remote event task source",
    "remote playback device",
    "remote playback device availability",
    "remote playback devices",
    "remote playback source",
    "remote playback state",
    "remote source",
    "remote-playback-availability-event",
    "remote-playback-availability-request",
    "remote-playback-availability-response",
    "remote-playback-modify-request",
    "remote-playback-modify-response",
    "remote-playback-start-request",
    "remote-playback-start-response",
    "remote-playback-state-event",
    "remote-playback-termination-event",
    "remote-playback-termination-request",
    "remote-playback-termination-response",
    "remoteplayback",
    "remoteplaybackavailabilitycallback",
    "remoteplaybackstate",
    "remove",
    "remove a css rule",
    "remove a css style sheet",
    "remove a track",
    "remove all credentials",
    "remove all event listeners",
    "remove an animation effect",
    "remove an animator instance",
    "remove an attribute",
    "remove an attribute by name",
    "remove an attribute by namespace and local name",
    "remove an event listener",
    "remove client hints from redirect if needed",
    "remove credential",
    "remove event",
    "remove replaced animations",
    "remove the track",
    "remove virtual authenticator",
    "removed from a document",
    "removed replace state",
    "removesourcebuffer",
    "removetrack",
    "removing an entry",
    "removing steps",
    "render",
    "render quantum",
    "render quantum size",
    "render stages",
    "render with a fallback font face",
    "render with an invisible fallback font face",
    "renderable element",
    "renderable format",
    "rendered content",
    "rendered element",
    "rendered legend",
    "rendered text collection steps",
    "rendered text fragment",
    "renderer",
    "rendering opportunity",
    "rendering thread",
    "rendering tree",
    "renderstate",
    "rendertime",
    "reorder",
    "repeat()",
    "repeatable list",
    "repeated duration",
    "repeating-conic-gradient()",
    "repeating-linear-gradient()",
    "repeating-radial-gradient()",
    "replace",
    "replace all",
    "replace an attribute",
    "replace data",
    "replace state",
    "replaceable animation",
    "replaced",
    "replaced element",
    "replacement",
    "replacement decoder",
    "replacement error returned",
    "replaces client id",
    "report",
    "report a warning to the console",
    "report an error",
    "report an exception",
    "report body",
    "report buffer",
    "report content security policy violations for request",
    "report count tag",
    "report descriptor",
    "report id tag",
    "report image element timing",
    "report latest reading updated",
    "report long tasks",
    "report paint timing",
    "report size tag",
    "report text element timing",
    "report the error",
    "report the exception",
    "report the layout shift",
    "report the layout shift sources",
    "report type",
    "report validity steps",
    "report-only document policy",
    "report-only reporting endpoint",
    "report-only value",
    "report-to",
    "report-uri",
    "report-uri directive",
    "report_to",
    "reporting cache",
    "reporting endpoint",
    "reporting frequency",
    "reporting group",
    "reporting observer",
    "reporting-endpoints",
    "reports",
    "represent",
    "representation",
    "representation data",
    "represented",
    "represented by the collection",
    "represents a shadow root",
    "represents a standard gamepad axis",
    "represents a standard gamepad button",
    "represents a web element",
    "request",
    "request a lock",
    "request bluetooth devices",
    "request body",
    "request destination",
    "request error steps",
    "request file system permission",
    "request header list",
    "request hit test",
    "request matches cached item",
    "request method",
    "request origin",
    "request permission to use",
    "request picture-in-picture algorithm",
    "request position",
    "request queue",
    "request response list",
    "request routing",
    "request sensor access",
    "request the \"usb\" permission",
    "request the xr permission",
    "request url",
    "request-body-header name",
    "request-required-document-policy",
    "request_headers",
    "requestanimationframe",
    "requestcredentials",
    "requestdestination",
    "requested features",
    "requested sampling frequency",
    "requested url",
    "requestfullscreen()",
    "requestidlecallback()",
    "requesting file system permission",
    "requesting permission to use",
    "requestmidiaccess",
    "requests",
    "require well-formed",
    "require-document-policy",
    "require-trusted-types-for-directive",
    "required",
    "required constraints",
    "required csp",
    "required document policy",
    "required features",
    "required-ascii-whitespace",
    "requiredalignof",
    "requires storing the policy container in history",
    "reregisteredwhilefiring",
    "reserialized",
    "reserved client",
    "reserved environment",
    "reserved identifiers",
    "reset",
    "reset algorithm",
    "reset algorithms",
    "reset an animation’s pending tasks",
    "reset audiodecoder",
    "reset audioencoder",
    "reset button",
    "reset mock capture devices",
    "reset parser state",
    "reset the form owner",
    "reset the insertion mode appropriately",
    "reset the memory buffer",
    "reset the rendering context to its default state",
    "reset videodecoder",
    "reset videoencoder",
    "reset-only sub-property",
    "resettable",
    "resettable element",
    "resettable elements",
    "resident",
    "resident credential",
    "resident key",
    "resize",
    "resizemode",
    "resolution result",
    "resolvable private address resolution procedure",
    "resolve",
    "resolve a container-based offset",
    "resolve a domain",
    "resolve a geolocation promise",
    "resolve a module specifier",
    "resolve a relative path",
    "resolve a scroll timeline offset",
    "resolve an element-based offset",
    "resolve an imports match",
    "resolve an origin",
    "resolve get client promise",
    "resolve indices",
    "resolve job promise",
    "resolve pending play promises",
    "resolve percentage heights in table-cell content:",
    "resolve promise",
    "resolve scroll timeline offsets",
    "resolve the requested features",
    "resolved",
    "resolved descendant node",
    "resolved type",
    "resolved value",
    "resolved value special case property",
    "resolved value special case property like color",
    "resolved value special case property like height",
    "resolved value special case property like top",
    "resolved-table-width",
    "resolvedbinding record",
    "resolver",
    "resolves",
    "resolveuuidname",
    "resolving GPUTextureViewDescriptor defaults",
    "resolving an imports match",
    "resource",
    "resource document",
    "resource fetch algorithm",
    "resource header",
    "resource hint link",
    "resource interface of a shader",
    "resource metadata management",
    "resource name",
    "resource origin",
    "resource representation",
    "resource selection algorithm",
    "resource timing buffer current size",
    "resource timing buffer full event pending flag",
    "resource timing buffer size limit",
    "resource timing secondary buffer",
    "resource timing secondary buffer current size",
    "resources",
    "resourcetimingbufferfull",
    "respond to paymentrequest algorithm",
    "respond to permission revocation",
    "respond with an error",
    "response",
    "response header",
    "response header list",
    "response headers",
    "response object",
    "response trailer",
    "response type",
    "response_headers",
    "responses",
    "responsexml",
    "responsible document",
    "rest",
    "rest-after",
    "rest-before",
    "restart the animation",
    "restorable scrollable regions",
    "restore persisted state",
    "restore the window",
    "restrictions for contents of script elements",
    "restrictownaudio",
    "result",
    "resulting url record",
    "resulting url string",
    "resume nfc",
    "resume steps",
    "retarget",
    "retargeting",
    "retargeting algorithm",
    "retrieve a key from an object store",
    "retrieve a preferred prefix string",
    "retrieve a referenced value from an index",
    "retrieve a value from an index",
    "retrieve a value from an object store",
    "retrieve multiple keys from an object store",
    "retrieve multiple referenced values from an index",
    "retrieve multiple values from an index",
    "retrieve multiple values from an object store",
    "retrieve the cached origin policy",
    "retrieve the client hints set",
    "retrieving a preferred prefix string",
    "retrieving an extern value",
    "retrieving the cached origin policy",
    "return",
    "return state",
    "return the Sec-CH-UA value for a request",
    "return type",
    "rev",
    "reverse an animation",
    "revoke bluetooth access",
    "revoke sensor permission",
    "rfcb",
    "rgb()",
    "rgba()",
    "richness",
    "right",
    "right page",
    "right-hand side",
    "rmin",
    "roaming authenticators",
    "roaming credential",
    "role",
    "roles",
    "root",
    "root directory",
    "root element",
    "root inline box",
    "root wai-aria node",
    "rotate",
    "rotate3d()",
    "rotatex()",
    "rotatey()",
    "rotatez()",
    "rotation",
    "round()",
    "round-tripping",
    "rounding",
    "roundup",
    "routing requests",
    "row",
    "row group",
    "row group box",
    "row group header",
    "row groups",
    "row header",
    "row-gap",
    "row/column-grid width maximum (gridmax)",
    "row/column-grid width minimum (gridmin)",
    "rowmin",
    "rows",
    "rowspan",
    "rp",
    "rp id",
    "rpidhash",
    "rr",
    "rrule",
    "rsa-oaep key export steps",
    "rsa-oaep key import steps",
    "rsa-pss key export steps",
    "rsa-pss key import steps",
    "rsahashedimportparams",
    "rsahashedkeyalgorithm",
    "rsahashedkeygenparams",
    "rsakeyalgorithm",
    "rsakeygenparams",
    "rsaoaepparams",
    "rsaotherprimesinfo",
    "rsapssparams",
    "rsassa-pkcs1-v1_5 key export steps",
    "rsassa-pkcs1-v1_5 key import steps",
    "rspace",
    "rssi",
    "rt",
    "rtc",
    "rtcconfiguration",
    "rtcdatachannel message has been received",
    "rtcdtlstransport error",
    "rtcdtlstransport state change",
    "rtcerror",
    "rtcerrordetailtypeidp",
    "rtcerrorinit",
    "rtcicecandidate()",
    "rtcicetransport state change",
    "rtcidentityassertion",
    "rtcidentityassertionresult",
    "rtcidentityprovider",
    "rtcidentityproviderdetails",
    "rtcidentityproviderglobalscope",
    "rtcidentityprovideroptions",
    "rtcidentityproviderregistrar",
    "rtcidentityvalidationresult",
    "rtcp extended report",
    "rtcp receiver report",
    "rtcp rr",
    "rtcp sender report",
    "rtcp sr",
    "rtcpeerconnection",
    "rtcprioritytype",
    "rtcrtpsender",
    "rtcrtpsendparameters",
    "rtcsctptransport connected",
    "rtcsctptransport state change",
    "rtcsessiondescription()",
    "rtcstatstype",
    "rtl",
    "rtp media api",
    "rtp stream",
    "ruby",
    "ruby annotation",
    "ruby annotation box",
    "ruby annotation container",
    "ruby annotation container box",
    "ruby base",
    "ruby base box",
    "ruby base container",
    "ruby base container box",
    "ruby columns",
    "ruby container",
    "ruby container box",
    "ruby formatting context",
    "ruby segments",
    "ruby-align",
    "ruby-merge",
    "ruby-overhang",
    "ruby-position",
    "rule set",
    "rules for distinguishing if a resource is a feed or html",
    "rules for distinguishing if a resource is text or binary",
    "rules for identifying an unknown mime type",
    "rules for parsing a hash-name reference",
    "rules for parsing a legacy color value",
    "rules for parsing a legacy font size",
    "rules for parsing a list of dimensions",
    "rules for parsing a list of floating-point numbers",
    "rules for parsing dimension values",
    "rules for parsing floating-point number values",
    "rules for parsing integers",
    "rules for parsing non-negative integers",
    "rules for parsing nonzero dimension values",
    "rules for parsing simple color values",
    "rules for serializing simple color values",
    "rules for sniffing audio and video specifically",
    "rules for sniffing fonts specifically",
    "rules for sniffing images specifically",
    "rules for sniffing in a plugin context",
    "rules for sniffing in a script context",
    "rules for sniffing in a style context",
    "rules for updating the display of webvtt text tracks",
    "rules for updating the text track rendering",
    "rules on anonymous table objects",
    "run a classic script",
    "run a generator",
    "run a host function",
    "run a module script",
    "run a work queue",
    "run a worker",
    "run an upgrade transaction",
    "run animators",
    "run csp initialization for a document",
    "run csp initialization for a global object",
    "run csp initialization for a global object.",
    "run job",
    "run service worker",
    "run the animation frame callbacks",
    "run the fullscreen steps",
    "run the resize steps",
    "run the scroll steps",
    "run the update intersection observations steps",
    "run the video frame request callbacks",
    "run-in",
    "run-in box",
    "run-in sequence",
    "runjobs",
    "runnable",
    "running",
    "running a control message",
    "running elements",
    "running execution context",
    "running javascript execution context",
    "running play state",
    "running position",
    "running script",
    "running transition",
    "running()",
    "runtime-sized",
    "rx",
    "ry",
    "s",
    "safe zone",
    "safelisted schemes",
    "safely upgradable requests",
    "salt",
    "saltlength",
    "salvageable",
    "same attribute",
    "same bluetooth device",
    "same origin",
    "same origin-domain",
    "same site",
    "same-document url reference",
    "same-origin",
    "same-origin check",
    "same-origin request",
    "same-origin with its ancestors",
    "same-origin-allow-popups",
    "same-origin-ancestor",
    "same-origin-descendant",
    "same-origin-plus-coep",
    "same-origin-referrer request",
    "same-party",
    "same-permission",
    "samevalue",
    "samp",
    "sample",
    "sample buffer size limit",
    "sample interval",
    "samplebufferfull",
    "sampler",
    "samplerate",
    "samples",
    "samplesize",
    "sampling frequency",
    "sampling rate",
    "sampling rates",
    "sandbox",
    "sandbox directive",
    "sandbox propagates to auxiliary browsing contexts flag",
    "sandbox storage access by user activation flag",
    "sandboxed automatic features browsing context flag",
    "sandboxed auxiliary navigation browsing context flag",
    "sandboxed document.domain browsing context flag",
    "sandboxed downloads browsing context flag",
    "sandboxed forms browsing context flag",
    "sandboxed modals flag",
    "sandboxed navigation browsing context flag",
    "sandboxed orientation lock browsing context flag",
    "sandboxed origin browsing context flag",
    "sandboxed plugins browsing context flag",
    "sandboxed pointer lock browsing context flag",
    "sandboxed presentation browsing context flag",
    "sandboxed scripts browsing context flag",
    "sandboxed secure browsing context flag",
    "sandboxed top-level navigation with user activation browsing context flag",
    "sandboxed top-level navigation without user activation browsing context flag",
    "sandboxing flag set",
    "sandboxing flags",
    "sanitize",
    "sanitize a document fragment",
    "sanitize a node",
    "sanitize a url to send in a report",
    "sanitize action",
    "sanitizetostring",
    "sans-serif",
    "satisfies its constraints",
    "saturation",
    "save persisted state",
    "save the storage access flag set",
    "save-data",
    "savedata",
    "scalar",
    "scalar value",
    "scalar value string",
    "scale",
    "scale()",
    "scale3d()",
    "scaled flex shrink factor",
    "scaled viewport size",
    "scalex()",
    "scaley()",
    "scalez()",
    "scan for devices",
    "scancode",
    "schedule a posttask task",
    "schedule a task to invoke a callback",
    "schedule job",
    "scheduled event time",
    "scheduler task",
    "scheduler task queue",
    "scheduler task sources",
    "scheduling a posttask task",
    "schema.org boolean property",
    "scheme",
    "scheme fetch",
    "scheme start state",
    "scheme state",
    "scheme-and-host",
    "scheme-part",
    "scheme-part match",
    "scheme-relative-file-url string",
    "scheme-relative-special-url string",
    "scheme-relative-url string",
    "scheme-source",
    "schemelessly same site",
    "scope",
    "scope to job queue map",
    "scope to registration map",
    "scope url",
    "scope-match a selectors string",
    "scope-relative",
    "scoped selector",
    "scoping element",
    "scoping root",
    "screen",
    "screen concept",
    "screen coordinate system",
    "screen orientation values table",
    "screen wake lock",
    "screen wake lock permission revocation algorithm",
    "screen wake lock task source",
    "screenshots",
    "screenshots object",
    "screenx",
    "screeny",
    "script",
    "script data double escape end state",
    "script data double escape start state",
    "script data double escaped dash dash state",
    "script data double escaped dash state",
    "script data double escaped less-than sign state",
    "script data double escaped state",
    "script data end tag name state",
    "script data end tag open state",
    "script data escape start dash state",
    "script data escape start state",
    "script data escaped dash dash state",
    "script data escaped dash state",
    "script data escaped end tag name state",
    "script data escaped end tag open state",
    "script data escaped less-than sign state",
    "script data escaped state",
    "script data less-than sign state",
    "script data state",
    "script domain",
    "script evaluation environment settings object set",
    "script execution environment",
    "script fetch options",
    "script nesting level",
    "script property",
    "script record",
    "script timeout",
    "script timeout error",
    "script-blocking style sheet counter",
    "script-closable",
    "script-created parser",
    "script-like",
    "script-may-access-clipboard",
    "script-src",
    "script-src-attr",
    "script-src-elem",
    "script-supporting elements",
    "script-triggered",
    "script-visible",
    "scriptable mime type",
    "scripted elements",
    "scriptevaluation",
    "scripting flag",
    "scripting is disabled",
    "scripting is enabled",
    "scriptlevel",
    "scriptpercentscaledown",
    "scriptprocessornode",
    "scriptscriptpercentscaledown",
    "scroll",
    "scroll a domrect into view",
    "scroll a range into view",
    "scroll an element",
    "scroll an element into view",
    "scroll anchoring bounding rect",
    "scroll boundary",
    "scroll chain",
    "scroll chaining",
    "scroll container",
    "scroll into view",
    "scroll position data",
    "scroll restoration mode",
    "scroll snap",
    "scroll snap area",
    "scroll snap container",
    "scroll snap position",
    "scroll snapport",
    "scroll timeline",
    "scroll timeline offset",
    "scroll timeline progress",
    "scroll to the beginning of the document",
    "scroll to the fragment",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scrollable overflow",
    "scrollable overflow area",
    "scrollable overflow rectangle",
    "scrollable overflow region",
    "scrollbar",
    "scrollbar gutter",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "scrolled into view",
    "scrollend",
    "scrolling area",
    "scrolling area origin",
    "scrolling box",
    "scrollintoview",
    "scrollintoviewoptions",
    "scrollport",
    "scrolls into view",
    "scrollx",
    "scrolly",
    "sctp transport is connected",
    "seamlessly update the playback rate",
    "search invisible",
    "search origin",
    "searching for services",
    "sec-ch-dpr",
    "sec-ch-ua",
    "sec-ch-ua-arch",
    "sec-ch-ua-bitness",
    "sec-ch-ua-full-version",
    "sec-ch-ua-mobile",
    "sec-ch-ua-model",
    "sec-ch-ua-platform",
    "sec-ch-ua-platform-version",
    "sec-ch-viewport-height",
    "sec-ch-viewport-width",
    "sec-ch-width",
    "sec-fetch-dest",
    "sec-fetch-mode",
    "sec-fetch-site",
    "sec-fetch-user",
    "sec-required-csp",
    "sec-required-document-policy",
    "sec-websocket-protocol",
    "second-factor platform authenticator",
    "second-factor roaming authenticator",
    "secondary view",
    "section",
    "section 12.1",
    "section 12.2",
    "sectioning content",
    "sectioning roots",
    "secure connection establishment",
    "secure context",
    "secure tls",
    "secured",
    "security code",
    "securityerror",
    "seek",
    "seeking",
    "segment break",
    "segment parser loop",
    "segment-completing close path",
    "select",
    "select a css style sheet set",
    "select a mapping",
    "select a presentation display",
    "select an appropriate key attribute value",
    "select an image source",
    "select an immersive xr device",
    "select an unused gamepad index",
    "select element",
    "select the best candidate",
    "select the scheduler task queue",
    "selected coordinate",
    "selected files",
    "selectedcandidatepairchange",
    "selectedness",
    "selecting a mapping",
    "selecting an unused gamepad index",
    "selecting media resource",
    "selecting the best candidate",
    "selecting the scheduler task queue",
    "selecting the task queue of the next scheduler task",
    "selection",
    "selection direction",
    "selectionchange",
    "selector",
    "selector list",
    "selector matches",
    "selectsettings",
    "selectstart",
    "self",
    "self attestation",
    "self-alignment",
    "self-alignment properties",
    "self-closing flag",
    "self-closing start tag state",
    "semantic",
    "semantically",
    "semantics",
    "semantics of an expression",
    "send a message",
    "send a response",
    "send a termination confirmation",
    "send a termination request",
    "send a websocket message",
    "send alert text",
    "send an error",
    "send select update notifications",
    "send() algorithm",
    "send() flag",
    "send-algorithm",
    "sendbeacon",
    "senddatagrams",
    "sender",
    "sender report",
    "sensing range",
    "sensitive information",
    "sensitive text input",
    "sensor feature names",
    "sensor fusion",
    "sensor hubs",
    "sensor permission names",
    "sensor reading",
    "sensor task source",
    "sensor type",
    "sentences",
    "separated borders model",
    "separator",
    "sequence",
    "sequence effect",
    "sequence type",
    "sequential focus navigation",
    "sequential focus navigation order",
    "sequential focus navigation starting point",
    "sequential navigation search algorithm",
    "sequentially focusable",
    "serial number",
    "serial port task source",
    "serializable objects",
    "serialization of a color",
    "serialization of an origin",
    "serialization steps",
    "serialize a calculation tree",
    "serialize a comma-separated list",
    "serialize a css component value",
    "serialize a css declaration",
    "serialize a css declaration block",
    "serialize a css rule",
    "serialize a css value",
    "serialize a csskeywordvalue",
    "serialize a cssmathvalue",
    "serialize a cssmatrixcomponent",
    "serialize a cssperspective",
    "serialize a csspropertyrule",
    "serialize a cssrotate",
    "serialize a cssscale",
    "serialize a cssscrolltimelinerule",
    "serialize a cssskew",
    "serialize a cssskewx",
    "serialize a cssskewy",
    "serialize a csstransformvalue",
    "serialize a csstranslate",
    "serialize a cssunitvalue",
    "serialize a cssunparsedvalue",
    "serialize a cssvariablereferencevalue",
    "serialize a group of selectors",
    "serialize a javascript value to a json string",
    "serialize a javascript value to json bytes",
    "serialize a list of css page selectors",
    "serialize a list of reports to json",
    "serialize a local",
    "serialize a math function",
    "serialize a media feature value",
    "serialize a media query",
    "serialize a media query list",
    "serialize a mime type",
    "serialize a mime type to bytes",
    "serialize a response url for reporting",
    "serialize a scroll timeline offset",
    "serialize a selector",
    "serialize a selector() function",
    "serialize a simple selector",
    "serialize a string",
    "serialize a url",
    "serialize a whitespace-separated list",
    "serialize an <an+b> value",
    "serialize an identifier",
    "serialize an infra value to a json string",
    "serialize an infra value to json bytes",
    "serialize an integer",
    "serialize as a list",
    "serialize as a mapping",
    "serialize as a remote value",
    "serialize i/o queue",
    "serialize json to bytes",
    "serialize required policy",
    "serialize the calculation tree",
    "serialize-attributes-loop",
    "serialized cookie",
    "serialized csp",
    "serialized csp list",
    "serialized directive",
    "serialized document policy",
    "serialized mock sensor",
    "serialized options",
    "serialized permissions policy",
    "serialized source list",
    "serialized state",
    "serialized-directive",
    "serialized-origin",
    "serialized-permissions-policy",
    "serialized-policy",
    "serialized-policy-directive",
    "serialized-policy-list",
    "serialized-source-list",
    "serialized-tt-configuration",
    "serializeddata",
    "serializes as void",
    "serializetostring method",
    "serializing",
    "serializing a calculation tree",
    "serializing a css value",
    "serializing a javascript value to a json string",
    "serializing a javascript value to json bytes",
    "serializing a request origin",
    "serializing an attribute value",
    "serializing an infra value to a json string",
    "serializing an infra value to json bytes",
    "serializing the calculation tree",
    "serializing to string",
    "serif",
    "server",
    "server-sent events",
    "server-side credential",
    "server-side credential storage modality",
    "server-side public key credential source",
    "server-timing header field",
    "server-timing header parsing algorithm",
    "servers",
    "service",
    "service changed",
    "service constructor",
    "service data",
    "service definition",
    "service interoperability requirements",
    "service provider",
    "service uuid data type",
    "service worker",
    "service worker agent",
    "service worker client",
    "service worker has no pending events",
    "service worker registration",
    "service worker timing info",
    "service-worker",
    "service-worker-allowed",
    "serviceworker",
    "serviceworkercontainer",
    "serviceworkerglobalscope",
    "serviceworkerregistration",
    "session",
    "session history",
    "session history document visibility change steps",
    "session history entry",
    "session history event loop",
    "session history traversal queue",
    "session id",
    "session implicit wait timeout",
    "session not created",
    "session page load timeout",
    "session script timeout",
    "session storage",
    "session storage area",
    "session storage bucket",
    "session storage holder",
    "session timeouts",
    "sessions",
    "set",
    "set a configuration",
    "set a cookie",
    "set a css declaration",
    "set a css declaration priority",
    "set a css declaration value",
    "set a document response",
    "set a local session description",
    "set a property",
    "set a remote session description",
    "set a session description",
    "set a track's muted state",
    "set an attribute",
    "set an attribute value",
    "set an existing attribute value",
    "set an imagebitmaprenderingcontext's output bitmap",
    "set animator instance of worklet animation",
    "set bitmap dimensions",
    "set capture prompt result",
    "set entries",
    "set header",
    "set local session description",
    "set of availability callbacks",
    "set of comma-separated tokens",
    "set of controlled presentations",
    "set of elements with rendered text",
    "set of mock capture devices",
    "set of owned text nodes",
    "set of presentation availability objects",
    "set of presentation controllers",
    "set of rtcrtptransceivers",
    "set of scripts that will execute as soon as possible",
    "set of space-separated tokens",
    "set of subresources for texture copy",
    "set of transceivers",
    "set permission",
    "set registration",
    "set remote session description",
    "set request’s referrer policy on redirect",
    "set selection range",
    "set sensor settings",
    "set size getter",
    "set storage access",
    "set the Sec-Required-CSP header",
    "set the active document",
    "set the associated effect of an animation",
    "set the associated remote streams",
    "set the canceled flag",
    "set the configuration",
    "set the current base text",
    "set the current browsing context",
    "set the current time",
    "set the current top-level browsing context",
    "set the device information exposure",
    "set the frozen base url",
    "set the muted state",
    "set the offset value",
    "set the password",
    "set the playback rate",
    "set the required CSP",
    "set the search origin",
    "set the selection direction",
    "set the selection range",
    "set the session description",
    "set the source url of a portal element",
    "set the start time",
    "set the timeline of an animation",
    "set the url",
    "set the username",
    "set the value of a new indexed property",
    "set the value of a new named property",
    "set the value of an existing indexed property",
    "set the value of an existing named property",
    "set timeouts",
    "set up a window environment settings object",
    "set up a worker environment settings object",
    "set up a worklet environment settings object",
    "set up browsing context features",
    "set up the classic script request",
    "set up the module script request",
    "set user verified",
    "set value",
    "set window rect",
    "set-cookie state",
    "set-dest",
    "set-device-information-exposure",
    "set-mode",
    "set-site",
    "set-user",
    "setattribute",
    "setattribute()",
    "setimmutableprototype",
    "setinterval",
    "setlike",
    "setlike declaration",
    "setremotedescription",
    "setselectionrange",
    "setter",
    "setter steps",
    "settimeout",
    "setting",
    "setting a property",
    "setting a session description",
    "setting the local session description",
    "setting the remote session description",
    "setting the search origin",
    "setting the space on a layer",
    "setting the value of an entry",
    "settings",
    "settings dictionary",
    "settings object",
    "settled",
    "setup packet",
    "setup stage",
    "setup the resource timing entry",
    "sex",
    "sext",
    "sext,nonoverlapping",
    "sha-2",
    "sha-256",
    "sha-384",
    "sha-512",
    "shader",
    "shader execution end",
    "shader execution start",
    "shader module creation",
    "shader stages",
    "shader-creation error",
    "shader-output mask",
    "shaders",
    "shadow host",
    "shadow root",
    "shadow root identifier",
    "shadow root reference",
    "shadow roots",
    "shadow tree",
    "shadow-including ancestor",
    "shadow-including descendant",
    "shadow-including inclusive ancestor",
    "shadow-including inclusive descendant",
    "shadow-including parent",
    "shadow-including preorder, depth-first traversal",
    "shadow-including root",
    "shadow-including tree order",
    "shadowroot",
    "shadows",
    "shadows are only drawn if",
    "shall",
    "shall not",
    "shape a stretchy glyph",
    "shape elements",
    "shape()",
    "shape-image-threshold",
    "shape-inside",
    "shape-margin",
    "shape-outside",
    "shape-padding",
    "shape-rendering",
    "shape-subtract",
    "shaping of the glyph assembly",
    "share target",
    "shared alignment context",
    "shared attribute processing steps for iframe and frame elements",
    "shared declarative refresh steps",
    "shared history push/replace state steps",
    "shared monotonic clock",
    "shared utf-16 decoder",
    "shared worker",
    "shared worker agent",
    "shared worker manager",
    "sharedarraybuffer",
    "shares",
    "sharpness",
    "sheets",
    "shift_jis",
    "shift_jis decoder",
    "shift_jis encoder",
    "shift_jis lead",
    "shifted character",
    "shifted state",
    "short",
    "shortcut item",
    "shortcut item's",
    "shorten a url’s path",
    "shorter",
    "shorthand",
    "shorthand properties",
    "shorthand property",
    "should",
    "should add entry",
    "should add performanceeventtiming",
    "should be rendered",
    "should block navigation response",
    "should element's inline behavior be blocked by content security policy?",
    "should element’s inline type behavior be blocked by content security policy?",
    "should fetching request be blocked as mixed content?",
    "should navigation request of type be blocked by content security policy?",
    "should navigation response to navigation request of type in target be blocked by content security policy?",
    "should not",
    "should not initialize device tracking",
    "should report first contentful paint",
    "should request be allowed to use feature?",
    "should request be blocked by content security policy?",
    "should response to request be blocked as mixed content?",
    "should response to request be blocked by content security policy?",
    "should response to request be blocked due to document policy",
    "should response to request be blocked due to mime type",
    "should response to request be blocked due to nosniff",
    "should skip event",
    "show poster flag",
    "show steps",
    "show()",
    "showing",
    "shut down the session",
    "shutdown",
    "shutdown with an action",
    "sibling",
    "sideways typesetting",
    "sign",
    "sign()",
    "signal a slot change",
    "signal a type change",
    "signal slots",
    "signaling state",
    "signalingstatechange",
    "signature",
    "signature counter",
    "signcount",
    "signed exchange report",
    "signed exchange version",
    "signed message",
    "signing procedure",
    "silently set the current time",
    "similar-origin window agent",
    "simple color",
    "simple dialog",
    "simple dialogs",
    "simple exception",
    "simple fullscreen document",
    "simple iteration progress",
    "simple nominal range",
    "simple parameter",
    "simple selector",
    "simplify a calculation tree",
    "simplifying a calculation tree",
    "simulcast envelope",
    "sin()",
    "single byte content-range",
    "single-byte decoder",
    "single-byte encoder",
    "single-byte encoding",
    "single-dot path segment",
    "single-factor capable",
    "single-line flex container",
    "single-valued properties",
    "site",
    "site domain",
    "site-specific",
    "site-wide tracking status resource",
    "six-bit decimal value",
    "size",
    "size containment",
    "size containment box",
    "size record",
    "sized array",
    "sizeof",
    "sizes attribute",
    "sizing as if empty",
    "sizing property",
    "sizing type",
    "skeleton joint index",
    "skeleton joint name",
    "skeleton joints",
    "skip ascii whitespace",
    "skip end tag",
    "skip its contents",
    "skip-when-determining-incumbent counter",
    "skipped contents",
    "skipping its contents",
    "skips its contents",
    "slanted",
    "slice",
    "slide",
    "slot",
    "slot assignment",
    "slots",
    "slottable",
    "small",
    "small viewport size",
    "small viewport-percentage units",
    "smart poster",
    "smart sensors",
    "smart-poster",
    "smooth scroll",
    "smooth scroll aborted",
    "smooth scroll completed",
    "smoothing over time",
    "sms:",
    "snapshot profile",
    "snapshot state",
    "snapshot the lock state",
    "snapshotitem",
    "snapshotstate",
    "sniff-scriptable flag",
    "snonext",
    "socks authentication",
    "socks proxy",
    "socksproxy",
    "socksversion",
    "soft",
    "soft iron distortion",
    "soft update",
    "soft wrap break",
    "soft wrap opportunity",
    "solid fill",
    "sort a calculation’s children",
    "sort and normalize a specifier map",
    "sort and normalize scopes",
    "sorting and normalizing a specifier map",
    "sorting and normalizing scopes",
    "sound",
    "source",
    "source browsing context",
    "source document",
    "source expression",
    "source lists",
    "source node",
    "source pixel ratio",
    "source set",
    "source size",
    "source stopped state",
    "source text module record",
    "source type",
    "source-expression",
    "source-expression similar",
    "source-over",
    "sourcebuffer byte stream format specification",
    "sourcebuffer configuration",
    "sourcebuffer monitoring",
    "sourcebufferlist-getter",
    "sourceclose",
    "sourceended",
    "sourceopen",
    "space",
    "space to fill",
    "space-like",
    "space-like element",
    "space-separated matching",
    "spaceafterscript",
    "spacer",
    "spaces",
    "span",
    "span count",
    "spanner",
    "spanning annotation",
    "spanning element",
    "spatial navigation",
    "spatial navigation containers",
    "spatial navigation starting point",
    "spatial navigation steps",
    "spatial sensor",
    "spatial-navigation-action",
    "spatial-navigation-contain",
    "spatial-navigation-function",
    "spatialnavigation",
    "speak",
    "speak-as",
    "speak-header",
    "speak-numeral",
    "speak-punctuation",
    "special",
    "special authority ignore slashes state",
    "special authority slashes state",
    "special keyword",
    "special operation",
    "special relative or authority state",
    "special scheme",
    "special-query percent-encode set",
    "specific conditions",
    "specific type",
    "specifications whose evaluations are both affected by the same changes to the user environment, and so always must be evaluated together in order to ensure proper rendering.",
    "specificity",
    "specified",
    "specified end delay",
    "specified flow",
    "specified iteration duration",
    "specified order",
    "specified size",
    "specified size suggestion",
    "specified start delay",
    "specified value",
    "specified values",
    "specifier map",
    "speculative fetch",
    "speech-rate",
    "spin the event loop",
    "split a string on ascii whitespace",
    "split a string on commas",
    "split a text node",
    "split on ascii whitespace",
    "split on commas",
    "spoon-feed the parser",
    "spouse",
    "spread break",
    "spread distance",
    "sqrt()",
    "sr",
    "sr field",
    "src()",
    "srclang",
    "srcobject",
    "srcset attribute",
    "srgb",
    "srst",
    "sslproxy",
    "ssrc",
    "sst",
    "stack",
    "stack level",
    "stack of open elements",
    "stack of template insertion modes",
    "stackbottomdisplaystyleshiftdown",
    "stackbottomshiftdown",
    "stackdisplaystylegapmin",
    "stackgapmin",
    "stacking context",
    "stacking contexts",
    "stacktopdisplaystyleshiftup",
    "stacktopshiftup",
    "stale element reference",
    "stale response",
    "stale-while-revalidate response",
    "standalone",
    "standalone axis",
    "standalone grid",
    "standard gamepad",
    "standard gamepad layout",
    "standardized payment method",
    "standardized payment method identifier",
    "start",
    "start a new parallel queue",
    "start a presentation connection",
    "start a presentation from a default presentation request",
    "start an idle period algorithm",
    "start closing a presentation connection",
    "start closing the presentation connection",
    "start delay",
    "start intersection-observing a lazy loading element",
    "start listening for a websocket connection",
    "start node",
    "start page value",
    "start register",
    "start tags",
    "start the nfc write",
    "start the track processing model",
    "start the websocket closing handshake",
    "start time",
    "start url",
    "start with a number",
    "start with a windows drive letter",
    "start with an identifier",
    "starting a new parallel queue",
    "starting a presentation from a default presentation request",
    "starting point",
    "starting value",
    "startpoint-on-the-path",
    "starts with a number",
    "starts with a valid escape",
    "starts with a windows drive letter",
    "starts with an identifier",
    "starttime",
    "state",
    "state function",
    "state override",
    "statechange",
    "stateful animator",
    "stateful animator definition",
    "stateful animator instance",
    "stateful flag",
    "stateless animator",
    "statement at-rule",
    "states",
    "states set",
    "static address",
    "static attributes",
    "static context",
    "static device address",
    "static image document",
    "static operations",
    "static position rectangle",
    "static type",
    "static-position containing block",
    "static-position rectangle",
    "statically accessed",
    "statically typed language",
    "statically used",
    "statically validate the constraints",
    "staticrange",
    "staticranges",
    "stationary reference coordinate system",
    "stats object",
    "stats object reference",
    "stats selection algorithm",
    "stats value",
    "status",
    "status code",
    "status code registry",
    "status message",
    "status object",
    "status stage",
    "status-id",
    "step base",
    "step easing function",
    "step position",
    "step scale factor",
    "step unit",
    "step-final-queue",
    "steps",
    "steps for determining the web app's chosen display mode",
    "steps for selecting the payment handler",
    "steps for when a user changes payment method",
    "steps to check if a payment can be made",
    "steps to check if an instrument is supported",
    "steps to expose a media-resource-specific text track",
    "steps to respond to a payment request",
    "steps to update the connection values",
    "steps to update the user preference",
    "stereopannernode",
    "stereopanneroptions",
    "sticky activation",
    "sticky activation-gated apis",
    "sticky position",
    "sticky view rectangle",
    "sticky-positioned",
    "sticky-positioned box",
    "still on its initial about:blank document",
    "stop",
    "stop document loading",
    "stop intersection-observing a lazy loading element",
    "stop or comma",
    "stop sending and receiving",
    "stop the rtcrtptransceiver",
    "stop the sensor altogether",
    "stopped",
    "stopped due to errors",
    "stopping",
    "stops parsing",
    "storable",
    "storage",
    "storage access flag set",
    "storage access map",
    "storage bottle",
    "storage bucket",
    "storage buffer",
    "storage classes",
    "storage endpoint",
    "storage identifier",
    "storage key",
    "storage proxy map",
    "storage quota",
    "storage shed",
    "storage shelf",
    "storage shelves",
    "storage texture",
    "storage type",
    "storage usage",
    "storage-texel-formats",
    "store a record into an object store",
    "store type",
    "stored permission",
    "strategy",
    "streaming-capabilities-request",
    "streaming-capabilities-response",
    "streaming-session-modify-request",
    "streaming-session-modify-response",
    "streaming-session-receiver-stats-event",
    "streaming-session-sender-stats-event",
    "streaming-session-start-request",
    "streaming-session-start-response",
    "streaming-session-terminate-event",
    "streaming-session-terminate-request",
    "streaming-session-terminate-response",
    "street-address",
    "stress",
    "stretch axis",
    "stretch fit",
    "stretch-fit block size",
    "stretch-fit inline size",
    "stretch-fit size",
    "stretched",
    "stretchstackbottomshiftdown",
    "stretchstackgapabovemin",
    "stretchstackgapbelowmin",
    "stretchstacktopshiftup",
    "stretchy",
    "strict",
    "strict equality comparison",
    "strict file interactability",
    "strict function",
    "strict mixed content checking flag",
    "strict mode",
    "stricter action",
    "strictly split",
    "strictly split a string",
    "strictness value",
    "strideof",
    "strike",
    "string",
    "string descriptor",
    "string exotic object",
    "string index tag",
    "string length",
    "string maximum tag",
    "string minimum tag",
    "string replace all",
    "string representation of the interest cohort id",
    "string representation of the interest cohort version",
    "string types",
    "string value of the extern type",
    "string()",
    "string-concatenation",
    "string-set",
    "stringification behavior",
    "stringifier",
    "strings",
    "strip and collapse ascii whitespace",
    "strip leading and trailing ascii whitespace",
    "strip newlines",
    "stroke",
    "stroke bounding box",
    "stroke painting area",
    "stroke positioning area",
    "stroke shape",
    "stroke style",
    "stroke-align",
    "stroke-alignment",
    "stroke-break",
    "stroke-color",
    "stroke-dash-corner",
    "stroke-dash-justify",
    "stroke-dashadjust",
    "stroke-dasharray",
    "stroke-dashcorner",
    "stroke-dashoffset",
    "stroke-image",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-origin",
    "stroke-position",
    "stroke-repeat",
    "stroke-size",
    "stroke-width",
    "stroked",
    "strong",
    "strong native semantics",
    "struct",
    "structural element",
    "structural pseudo-classes",
    "structurally external element",
    "structure",
    "structured clone",
    "structured header",
    "strut size",
    "style",
    "style attribute",
    "style change event",
    "style containment",
    "style rule",
    "style sheet",
    "style-src",
    "style-src-attr",
    "style-src-elem",
    "stylemap",
    "stylesheet",
    "sub",
    "sub-deserialization",
    "sub-document",
    "sub-property",
    "sub-serialization",
    "subdivide into iterations",
    "subdomains",
    "subexpressions",
    "subframe weighting factor",
    "subgrid",
    "subgridded axis",
    "subject (of selector)",
    "subjects",
    "subkeys",
    "submission value",
    "submit as entity body",
    "submit button",
    "submit buttons",
    "submit dialog",
    "submittable element",
    "submittable elements",
    "submitted",
    "subprotocol in use",
    "subresource",
    "subresource request",
    "subscribe priority",
    "subscript/superscript pair",
    "subscriptbaselinedropmin",
    "subscription expiration time",
    "subscriptshiftdown",
    "subscripttopmax",
    "subsequent-sibling combinator",
    "substantial",
    "substitute a var()",
    "substitute an attr()",
    "substitute an env()",
    "substring",
    "subsuperscriptgapmin",
    "subtags",
    "subtitles",
    "subtle",
    "subtlecrypto",
    "succeed",
    "succeeded",
    "success",
    "success_fraction",
    "successful",
    "successful sampling rate",
    "suffering from a custom error",
    "suffering from a pattern mismatch",
    "suffering from a step mismatch",
    "suffering from a type mismatch",
    "suffering from an overflow",
    "suffering from an underflow",
    "suffering from bad input",
    "suffering from being missing",
    "suffering from being too long",
    "suffering from being too short",
    "suggestions source element",
    "suitable sequentially focusable area",
    "sum value",
    "summary",
    "summary for its parent details",
    "sunken initial",
    "sup",
    "super reference record",
    "superdomain match",
    "superscriptbaselinedropmax",
    "superscriptbottommaxwithsubscript",
    "superscriptbottommin",
    "superscriptshiftup",
    "superscriptshiftupcramped",
    "supplied mime type",
    "supplied mime type detection algorithm",
    "support",
    "support depth sensing data format",
    "support depth sensing usage",
    "support depth sensing usage and data format combination",
    "support fullscreen",
    "support global identifiers for items",
    "support indexed properties",
    "support named properties",
    "supported",
    "supported by the user agent",
    "supported card",
    "supported css property",
    "supported features",
    "supported limits",
    "supported media session actions",
    "supported open() feature name",
    "supported operations",
    "supported origins",
    "supported physical transports",
    "supported presentation context formats",
    "supported property index",
    "supported property indices",
    "supported property names",
    "supported sensor options",
    "supported styling language",
    "supported tokens",
    "supportedalgorithms",
    "supportedmethods",
    "supportednetworks",
    "supportedtypes",
    "supports hand tracking",
    "suppression trigger",
    "suppression window",
    "suppresslocalaudioplayback",
    "surface a candidate",
    "surface the candidate",
    "surrogate",
    "surrogate pair",
    "surrogate-character-reference",
    "surrogate-in-input-stream",
    "surrounding agent",
    "suspend nfc",
    "suspendable worker",
    "suspended",
    "suspicious agent",
    "svc",
    "svg",
    "svg a",
    "svg authoring tools",
    "svg context",
    "svg desc",
    "svg document fragment",
    "svg elements",
    "svg foreignobject",
    "svg fragment identifier",
    "svg generators",
    "svg image",
    "svg interpreters",
    "svg layout box",
    "svg namespace",
    "svg script",
    "svg servers",
    "svg svg",
    "svg text-rendering",
    "svg title",
    "svg use",
    "svg user agent",
    "svg view specification",
    "svg viewers",
    "svg viewports",
    "svgelement",
    "svgimageelement",
    "svgscriptelement",
    "svgsvgelement",
    "swap",
    "sweetheart",
    "switch",
    "switch the fontfaceset to loaded",
    "switch the fontfaceset to loading",
    "switch to frame",
    "switch to parent frame",
    "switch to window",
    "symbol",
    "symbols()",
    "symmetric",
    "sync",
    "sync animation timings to worklet",
    "sync local times to document",
    "sync registration",
    "sync requested flag",
    "syncbase",
    "synchronization source",
    "synchronized",
    "synchronous flag",
    "synchronous read method",
    "synchronous section",
    "synchronously replace the rules of a cssstylesheet",
    "syntax component",
    "syntax component name",
    "syntax definition",
    "syntax of a standardized payment method identifier",
    "syntax string",
    "syntaxerror",
    "synthesize baseline",
    "synthesized baseline",
    "system clipboard",
    "system clipboard data",
    "system color pairings",
    "system colors",
    "system exclusive",
    "system fonts",
    "system key press handler",
    "system resources",
    "systemid",
    "t",
    "t1",
    "t2",
    "tab size",
    "tab stop",
    "tab-size",
    "tabindex",
    "tabindex value",
    "tabindex-ordered focus navigation scope",
    "table",
    "table caption box",
    "table element",
    "table for cookie conversion",
    "table grid",
    "table grid box",
    "table intrinsic offsets",
    "table model",
    "table model error",
    "table object cache",
    "table of effective connection types",
    "table of endpoints",
    "table of location strategies",
    "table of maximum downlink speeds",
    "table of page load strategies",
    "table of simple dialogs",
    "table of standard capabilities",
    "table wrapper box",
    "table-caption",
    "table-cell",
    "table-column",
    "table-column-group",
    "table-created",
    "table-footer-group",
    "table-grid box",
    "table-header-group",
    "table-internal",
    "table-layout",
    "table-non-root",
    "table-root",
    "table-row",
    "table-row-group",
    "table-track",
    "table-track-group",
    "table-wrapper box",
    "tabs",
    "tabular container",
    "tag",
    "tag name",
    "tag name state",
    "tag omission in text/html",
    "tag open state",
    "tag-terminating byte",
    "tagged image",
    "taglength",
    "tagname",
    "tags",
    "tail-time",
    "take a sample",
    "take element screenshot",
    "take pending play promises",
    "take screenshot",
    "tan()",
    "tangential distortion coefficients",
    "tao check",
    "target",
    "target attribute named",
    "target domain",
    "target element",
    "target main size",
    "target object",
    "target peer identity",
    "target phase",
    "target property",
    "target pseudo-selector",
    "target resource",
    "target-counter()",
    "target-counters()",
    "target-text()",
    "targeted advertising",
    "targets",
    "task",
    "task queues",
    "task source",
    "tasks",
    "taxonomy",
    "tbody",
    "td",
    "tee a readable stream",
    "tel",
    "telephone state",
    "telephone type strings",
    "template",
    "template content",
    "template contents",
    "temporal layer",
    "temporarily unavailable",
    "temporary buffer",
    "terminate",
    "terminate a presentation in a controlling browsing context",
    "terminate a presentation in a receiving browsing context",
    "terminate a worker",
    "terminate a worklet global scope",
    "terminate an algorithm",
    "terminate service worker",
    "terminate the algorithm",
    "terminate this algorithm",
    "terminate-algorithm-controlling",
    "terminate-algorithm-receiving",
    "termination nesting level",
    "test of user presence",
    "texel",
    "texel block",
    "texel block height",
    "texel block size",
    "texel block width",
    "texel format",
    "text",
    "text and search state",
    "text chunk",
    "text composition system",
    "text content block element",
    "text content child element",
    "text content element",
    "text entry cursor position",
    "text fragment directive",
    "text node",
    "text over edge",
    "text preparation algorithm",
    "text record",
    "text splice frame",
    "text track cue",
    "text track cue order",
    "text track cue writing direction",
    "text track list of regions",
    "text tracks",
    "text under edge",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-fill",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-box",
    "text-decoration-skip-ink",
    "text-decoration-skip-inset",
    "text-decoration-skip-self",
    "text-decoration-skip-spaces",
    "text-decoration-stroke",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-direction values",
    "text-edge",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-skip",
    "text-emphasis-style",
    "text-group-align",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-over baseline",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-space-collapse",
    "text-space-trim",
    "text-spacing",
    "text-track-cue",
    "text-transform",
    "text-under baseline",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text/css",
    "text/ecmascript",
    "text/event-stream",
    "text/html",
    "text/javascript",
    "text/javascript1.0",
    "text/javascript1.1",
    "text/javascript1.2",
    "text/javascript1.3",
    "text/javascript1.4",
    "text/javascript1.5",
    "text/jscript",
    "text/json",
    "text/livescript",
    "text/ping",
    "text/plain",
    "text/plain encoding algorithm",
    "text/uri-list",
    "text/vcard",
    "text/vtt",
    "text/x-ecmascript",
    "text/x-javascript",
    "text/xml",
    "textarea",
    "textarea effective height",
    "textarea effective width",
    "textarea element",
    "textarea elements",
    "textarea wrapping transformation",
    "textcontent",
    "textcontent attribute",
    "textdirective",
    "textdirectiveexplicitchar",
    "textdirectiveparameters",
    "textdirectiveprefix",
    "textdirectivestring",
    "textdirectivesuffix",
    "textpath",
    "textphone",
    "textual data types",
    "texture",
    "texture subresource",
    "texture unit",
    "tfoot",
    "th",
    "the 128-bit uuid represented",
    "the body element",
    "the current realm record",
    "the curve name",
    "the directionality",
    "the document's referrer",
    "the drag data item kind",
    "the drag data item type string",
    "the embed element setup steps",
    "the empty string",
    "the event handler processing algorithm",
    "the given value",
    "the head element",
    "the html body element",
    "the html element",
    "the html syntax",
    "the indicated part of the document",
    "the kind of text track",
    "the legend element's accesskey delegatee",
    "the link is an alternative style sheet",
    "the location bar barprop object",
    "the menu bar barprop object",
    "the outline's owner",
    "the personal bar barprop object",
    "the posted task task source",
    "the properties of an item",
    "the range",
    "the rules for choosing a browsing context",
    "the script is ready",
    "the script's script",
    "the script's type",
    "the script’s result",
    "the scrollbar barprop object",
    "the special value *",
    "the status bar barprop object",
    "the template element",
    "the title element",
    "the toolbar barprop object",
    "the typedarray constructors",
    "the underlying resources of a layer are lost",
    "the websocket closing handshake is started",
    "the websocket connection close code",
    "the websocket connection close reason",
    "the websocket connection is closed",
    "the websocket connection is established",
    "the worker's ports",
    "the xml syntax",
    "thead",
    "theme color",
    "third party",
    "third party context",
    "third party identifier name",
    "this",
    "this date object",
    "this time value",
    "thisbigintvalue",
    "thisbooleanvalue",
    "thisnumbervalue",
    "thisstringvalue",
    "thissymbolvalue",
    "thistimevalue",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "throttling",
    "throw",
    "throw a name exception",
    "throw an exception",
    "throw-on-dynamic-markup-insertion counter",
    "tick",
    "ticks",
    "tilt",
    "time",
    "time budget for the frame",
    "time marches on",
    "time origin",
    "time state",
    "time value",
    "time-based animation to a proportional animation",
    "time-zone offset",
    "timed out flag",
    "timeline",
    "timeline active phase",
    "timeline after phase",
    "timeline associated with a document",
    "timeline before phase",
    "timeline current time",
    "timeline duration",
    "timeline inactive phase",
    "timeline offset",
    "timeline phase",
    "timeline time to origin-relative time",
    "timelinebegin",
    "timeout",
    "timeouts configuration",
    "timer initialization steps",
    "timer nesting level",
    "timer table",
    "timer task source",
    "timing function",
    "timing info",
    "timing-allow-origin",
    "title",
    "title record",
    "tk",
    "tnf field",
    "to",
    "toboolean",
    "toggle",
    "toggle()",
    "tointeger",
    "tojsvalue",
    "token",
    "tokenization",
    "tokenize the features argument",
    "tokenizer",
    "tonechange",
    "tooltip attribute",
    "toomanyreads",
    "top",
    "top accent attachment",
    "top layer",
    "top-level browsing context",
    "top-level browsing contexts",
    "top-level calculation",
    "top-level collections",
    "top-level document",
    "top-level element",
    "top-level microdata item",
    "topmost event target",
    "topmost script-having execution context",
    "torch",
    "tostring",
    "total",
    "total horizontal border spacing",
    "total length",
    "total video frame count",
    "touch",
    "touch point",
    "touch-action",
    "touchcancel",
    "touchend",
    "touchevent",
    "touchmove",
    "touchstart",
    "touint32",
    "tovaluetype",
    "towebassemblyvalue",
    "tr",
    "trace a path",
    "track",
    "track buffer",
    "track buffer ranges",
    "track description",
    "track enabled state",
    "track ended by the user agent",
    "track id",
    "track label",
    "track language",
    "track list",
    "track section",
    "track set",
    "track sizing algorithm",
    "track update struct",
    "track url",
    "tracked",
    "tracking",
    "tracking status resource space",
    "tracking status value",
    "tracking the effective position of the legacy mouse pointer",
    "tracking vector",
    "trackingexdata",
    "trackingexresult",
    "trailing surrogate",
    "transaction",
    "transceiver kind",
    "transfer function element",
    "transfer function element attributes",
    "transfer steps",
    "transfer-receiving steps",
    "transferable objects",
    "transferred size suggestion",
    "transform",
    "transform a point with a matrix",
    "transform stream",
    "transform-box",
    "transform-indifferent starting point",
    "transform-origin",
    "transform-style",
    "transformable element",
    "transformation",
    "transformation from depth to video",
    "transformation matrix",
    "transformations",
    "transformed element",
    "transformed progress",
    "transformed time",
    "transformer",
    "transforms",
    "transformtodocument()",
    "transformtofragment()",
    "transient action",
    "transient activation",
    "transient activation duration",
    "transient activation-consuming apis",
    "transient activation-gated apis",
    "transient input sources",
    "transient registered observer",
    "transition",
    "transition generation",
    "transition origin",
    "transition phase",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "transitionable",
    "translatable attributes",
    "translate",
    "translate a layoutconstraintsoptions to internal constraints",
    "translate-enabled",
    "translate3d()",
    "translatez()",
    "translating",
    "translation",
    "translation mode",
    "transmission of request and response",
    "transp",
    "transparent",
    "transparent background",
    "transparent black",
    "transportid",
    "transpose",
    "traverse siblings",
    "traverse the history",
    "traverse the history by a delta",
    "traversing the history",
    "treat-as-public-address",
    "tree",
    "tree construction",
    "tree construction dispatcher",
    "tree context",
    "tree order",
    "tree-abiding",
    "tree-abiding pseudo-element",
    "triangle",
    "triaxial",
    "trigger data",
    "triggered by a user generated orientation change",
    "triggering event",
    "trinary",
    "true-by-default",
    "trusted event",
    "trusted immersive ui",
    "trusted type",
    "trusted ui",
    "trusted-types-directive",
    "trusted-types-sink-group",
    "trustedhtml",
    "trustedscript",
    "trustedscripturl",
    "trustedtypepolicy",
    "trustedtypepolicyfactory",
    "trustedtypepolicyoptions",
    "try",
    "try activate",
    "try clear registration",
    "try to scroll to the fragment",
    "try to upgrade an element",
    "trying",
    "tspan",
    "tsv",
    "tsv-extension",
    "tt",
    "tt-expression",
    "tt-keyword",
    "tt-policy-name",
    "tt-wildcard",
    "ttl",
    "tuple",
    "tuple origin",
    "turned off",
    "turned on",
    "tx power level",
    "type",
    "type assertion",
    "type attribute",
    "type being given a new name",
    "type checking",
    "type error",
    "type field",
    "type length field",
    "type list",
    "type name",
    "type of a cssmathvalue",
    "type of a cssunitvalue",
    "type of the content",
    "type record",
    "type rule",
    "type rule applies to an expression",
    "type rule tables",
    "type selector",
    "type-phase",
    "typeable",
    "typed array types",
    "typed item",
    "typedarraycreate",
    "typedef",
    "typeerror",
    "typeof",
    "types",
    "types array",
    "types of constrainable properties",
    "typeset sideways",
    "typeset upright",
    "typesetting sideways",
    "typesetting upright",
    "typographic character",
    "typographic character unit",
    "typographic letter unit",
    "typographic mode",
    "tz",
    "u",
    "u32",
    "ua",
    "ua origin",
    "ua style sheet",
    "ua-origin",
    "ui redressing",
    "uid",
    "uievent",
    "uint16array",
    "uint8array",
    "uint8clampedarray",
    "ul",
    "ulp",
    "ultimate sink",
    "un-initialized value",
    "unable to capture screen",
    "unable to create an rtcdatachannel",
    "unable to report the battery status information",
    "unable to set cookie",
    "unadjustedtarget",
    "unauthenticated response",
    "unavailable",
    "unbounded key range",
    "unbounded text track cue",
    "uncalibrated magnetic field",
    "unchanged record",
    "undefined",
    "under",
    "underbarextradescender",
    "underbarrulethickness",
    "underbarverticalgap",
    "underline zero position",
    "underlying byte source",
    "underlying connection technology",
    "underlying data transport",
    "underlying sink",
    "underlying source",
    "underlying value",
    "underlying values",
    "understandable",
    "undisplay",
    "undistributable space",
    "unexpected alert open",
    "unexpected-character-after-doctype-system-identifier",
    "unexpected-character-in-attribute-name",
    "unexpected-character-in-unquoted-attribute-value",
    "unexpected-equals-sign-before-attribute-name",
    "unexpected-null-character",
    "unexpected-question-mark-instead-of-tag-name",
    "unexpected-solidus-in-tag",
    "unfocusing steps",
    "unforced break",
    "unforgeable",
    "unforgeable property name",
    "unfrozen",
    "unfullscreen a document",
    "unfullscreen an element",
    "unhandled prompt behavior",
    "uniaxial",
    "unicode braille",
    "unicode braille patterns",
    "unicode category",
    "unicode character categories",
    "unicode character property",
    "unicode code point",
    "unicode east asian width",
    "unicode general category",
    "unicode script",
    "unicode vertical orientation",
    "unicode-bidi",
    "uniform buffer",
    "uninitialized",
    "uninstalling flag",
    "union",
    "union type",
    "unique identifier (id)",
    "unit exponent tag",
    "unit tag",
    "universal selector",
    "universal syntax definition",
    "universally unique identifier (uuid)",
    "unix epoch",
    "unix timestamp",
    "unknown",
    "unknown -webkit- pseudo-elements",
    "unknown command",
    "unknown error",
    "unknown mathml element",
    "unknown method",
    "unknown record",
    "unknown-named-character-reference",
    "unknowndirective",
    "unload",
    "unload a document",
    "unload counter",
    "unloading document cleanup steps",
    "unloading document visibility change steps",
    "unmute",
    "unobserve",
    "unobserve a target element",
    "unoccupied",
    "unordered set of unique space-separated tokens",
    "unpartitioned data",
    "unpaused",
    "unreasonable number of requests",
    "unrecognized",
    "unregister",
    "unregister the system key press handler",
    "unresolved",
    "unresolved reference",
    "unrestricted double",
    "unrestricted float",
    "unsafe response",
    "unsafe shared current time",
    "unsafe-none",
    "unsafe-request flag",
    "unsafe-url",
    "unsafefile",
    "unset",
    "unshipped port message queue",
    "unsigned fixed-point",
    "unsigned long",
    "unsigned long long",
    "unsigned short",
    "unsigned-integer",
    "unstable",
    "unstable node set",
    "unstable-candidate",
    "unstyled document",
    "unsupported mime type",
    "unsupported operation",
    "untagged image",
    "untagged video",
    "unwrapkey",
    "up",
    "up-mixing",
    "upc-a",
    "update",
    "update a layout child style",
    "update a paymentrequest's details algorithm",
    "update a style block",
    "update action handler algorithm",
    "update an animation’s finished state",
    "update anchors",
    "update animations and send events",
    "update background fetch instances",
    "update document frozenness steps",
    "update gamepad state",
    "update href",
    "update latest reading",
    "update metadata algorithm",
    "update mock sensor reading",
    "update registration state",
    "update service worker extended events set",
    "update style attribute for",
    "update the current document readiness",
    "update the data max message size",
    "update the device posture information",
    "update the event map",
    "update the file selection",
    "update the ice gathering state",
    "update the image data",
    "update the negotiation-needed flag",
    "update the orientation information",
    "update the pending layers state",
    "update the rendering",
    "update the search origin",
    "update the session history with the new page",
    "update the source set",
    "update the timing properties of an animation effect",
    "update the viewports",
    "update timing info from stored response",
    "update worker state",
    "updateend",
    "updatestart",
    "updatewith(detailspromise)",
    "updating the search origin",
    "upgrade a mixed content request to a potentially trustworthy url, if appropriate",
    "upgrade a request",
    "upgrade an element",
    "upgrade insecure navigations set",
    "upgrade reaction",
    "upgrade request to a potentially trustworthy url, if appropriate",
    "upgrade the pending request to the current request",
    "upgrade transaction",
    "upgrade-insecure-requests",
    "upgrade-insecure-requests http request header field",
    "upgradeable mixed content",
    "upgrades",
    "upload complete flag",
    "upload listener flag",
    "upload object",
    "upload to float texture",
    "uploaded",
    "upon fulfillment",
    "upon rejection",
    "upper bound on the downlink speed of the first network hop",
    "upper-alpha",
    "upper-alpha-legal",
    "upper-roman",
    "uppercase letter",
    "upperlimitbaselinerisemin",
    "upperlimitgapmin",
    "upright typesetting",
    "upstream",
    "upstream node",
    "uri record",
    "uri template",
    "uri templates",
    "uri-host",
    "url",
    "url and history update steps",
    "url code point",
    "url descriptor",
    "url equals",
    "url list",
    "url parameter",
    "url parser",
    "url prefix",
    "url property elements",
    "url record",
    "url reference",
    "url reference with fragment identifier",
    "url serializer",
    "url state",
    "url units",
    "url variable",
    "url variables",
    "url()",
    "url-based payment method identifier",
    "url-fragment string",
    "url-path-segment string",
    "url-port string",
    "url-query string",
    "url-scheme string",
    "urlencoded parser",
    "urlencoded serializer",
    "urlencoded string parser",
    "urn:",
    "usage id",
    "usage intersection",
    "usage maximum tag",
    "usage minimum tag",
    "usage page",
    "usage page tag",
    "usage scope validation",
    "usage scopes",
    "usage tag",
    "usages",
    "usages_cached",
    "usb device",
    "use",
    "use a negative sign",
    "use credentials",
    "use report ids",
    "use srcset or picture",
    "use strict directive",
    "use-element shadow tree",
    "use-url-credentials flag",
    "used",
    "used autocapitalization hint",
    "used color",
    "used color scheme",
    "used min-width of a table",
    "used offset distance",
    "used value",
    "used values",
    "used width of a table",
    "user",
    "user aborts the payment request",
    "user aborts the payment request algorithm",
    "user accepts the payment request",
    "user accepts the payment request algorithm",
    "user action",
    "user action pseudo-class",
    "user activity",
    "user agent",
    "user agent (ua)",
    "user agents",
    "user agents that do not support a full html css engine",
    "user agents that do not support css",
    "user agents that support a full html css engine",
    "user consent",
    "user contact",
    "user coordinate system",
    "user handle",
    "user intent",
    "user interaction",
    "user interaction task source",
    "user mediated",
    "user mediation",
    "user origin",
    "user present",
    "user prompt",
    "user prompt handler",
    "user prompt message",
    "user prompts",
    "user public key",
    "user style sheet",
    "user timing",
    "user units",
    "user verification",
    "user verification method",
    "user verified",
    "user-activation",
    "user-agent origin",
    "user-agent style sheet",
    "user-defined function",
    "user-granted exception",
    "user-origin",
    "user-select",
    "user-verifying platform authenticator",
    "userinfo percent-encode set",
    "username",
    "uses",
    "uses a negative sign",
    "uses distinctive identifier(s)",
    "uses distinctive identifier(s) or distinctive permanent identifier(s)",
    "uses distinctive permanent identifier(s)",
    "uses report ids",
    "using",
    "using the a element to define a command",
    "using the accesskey attribute on a legend element to define a command",
    "using the accesskey attribute to define a command on other elements",
    "using the button element to define a command",
    "using the input element to define a command",
    "using the option element to define a command",
    "using the rules for",
    "usually support",
    "usvstring",
    "utf-16 lead byte",
    "utf-16 lead surrogate",
    "utf-16be",
    "utf-16be decoder",
    "utf-16be/le",
    "utf-16le",
    "utf-16le decoder",
    "utf-8",
    "utf-8 bytes needed",
    "utf-8 bytes seen",
    "utf-8 code point",
    "utf-8 decode",
    "utf-8 decode without bom",
    "utf-8 decode without bom or fail",
    "utf-8 decoder",
    "utf-8 encode",
    "utf-8 encoder",
    "utf-8 lower boundary",
    "utf-8 percent-encode",
    "utf-8 upper boundary",
    "uuid",
    "uuid alias",
    "uv",
    "valid",
    "valid audio configuration",
    "valid audio mime type",
    "valid audiodecoderconfig",
    "valid audioencoderconfig",
    "valid browsing context name",
    "valid browsing context name or keyword",
    "valid codec string",
    "valid color",
    "valid css property",
    "valid custom element name",
    "valid date string",
    "valid date string with optional time",
    "valid decimal monetary value",
    "valid domain",
    "valid domain string",
    "valid duration string",
    "valid email address",
    "valid email address list",
    "valid external application resource",
    "valid file name",
    "valid floating-point number",
    "valid fragment directive",
    "valid global date and time string",
    "valid gpublendcomponent",
    "valid hash-name reference",
    "valid host string",
    "valid idref",
    "valid image",
    "valid image mime type",
    "valid imagedecoderinit",
    "valid integer",
    "valid ipv4-address string",
    "valid ipv6-address string",
    "valid key path",
    "valid list of floating-point numbers",
    "valid list of part mappings",
    "valid local date and time string",
    "valid lowercase simple color",
    "valid media mime type",
    "valid media query list",
    "valid mediaconfiguration",
    "valid mediadecodingconfiguration",
    "valid mime type string",
    "valid mime type string with no parameters",
    "valid month string",
    "valid non-empty url",
    "valid non-empty url potentially surrounded by spaces",
    "valid non-negative integer",
    "valid normalized local date and time string",
    "valid opaque-host string",
    "valid origin policy id",
    "valid part mapping",
    "valid path",
    "valid path id",
    "valid payment method manifest",
    "valid presentation identifier",
    "valid simple color",
    "valid source size list",
    "valid style sheet",
    "valid suffix code point",
    "valid texture copy range",
    "valid time string",
    "valid time-zone offset string",
    "valid to draw",
    "valid to draw indexed",
    "valid to use with",
    "valid url potentially surrounded by spaces",
    "valid url string",
    "valid uuid",
    "valid vevent duration string",
    "valid video configuration",
    "valid video mime type",
    "valid videodecoderconfig",
    "valid videoencoderconfig",
    "valid videoframeplaneinit",
    "valid week string",
    "valid yearless date string",
    "validate",
    "validate a partial response",
    "validate a payment method identifier",
    "validate a standardized payment method identifier",
    "validate a suffix",
    "validate a url-based payment method identifier",
    "validate and extract",
    "validate and normalize",
    "validate and parse the payment method manifest",
    "validate capabilities",
    "validate external type",
    "validate local type",
    "validate the state of the xrwebglsubimage creation function",
    "validate the string in context",
    "validateassertioncallback",
    "validating GPUBufferDescriptor",
    "validating GPUDepthStencilState",
    "validating GPUFragmentState",
    "validating GPUImageCopyBuffer",
    "validating GPUImageCopyTexture",
    "validating GPUMultisampleState",
    "validating GPUPrimitiveState",
    "validating GPUProgrammableStage",
    "validating GPURenderPipelineDescriptor",
    "validating GPUSamplerDescriptor",
    "validating GPUVertexBufferLayout",
    "validating GPUVertexState",
    "validating linear texture data",
    "validating shader binding",
    "validation anchor",
    "validation error",
    "validation message",
    "validity",
    "validity states",
    "value",
    "value accumulation",
    "value addition",
    "value asynchronously iterable declaration",
    "value attribute",
    "value interpolation",
    "value iterator",
    "value mode flag",
    "value of string literal tokens",
    "value pair",
    "value pairs to iterate over",
    "value sanitization algorithm",
    "value-with-size",
    "values",
    "var",
    "var()",
    "var() substitution",
    "variable",
    "variable declaration",
    "variadic",
    "vchar",
    "vector",
    "vector-effect",
    "vendor id",
    "verification of html document subresources",
    "verification procedure",
    "verification procedure inputs",
    "verified display name",
    "verify",
    "verify a certificate fingerprint",
    "vertex",
    "vertex buffer",
    "vertex data type",
    "vertex markers",
    "vertex shader stage",
    "vertical axis",
    "vertical block flow",
    "vertical dimension",
    "vertical focal length",
    "vertical offset",
    "vertical orientation",
    "vertical script",
    "vertical typographic mode",
    "vertical writing mode",
    "vertical-align",
    "vertical-only",
    "viable candidate",
    "vibration pattern",
    "video",
    "video frame request callback identifier",
    "video kind",
    "video-encoding-offer",
    "video-frame",
    "video/mp4",
    "video/mpeg",
    "videodeviceid",
    "videofacingmodeenum",
    "videokindenum",
    "videotrack",
    "view",
    "view offset",
    "viewer",
    "viewport",
    "viewport base distance",
    "viewport coordinate system",
    "viewport-based selection",
    "viewport-percentage lengths",
    "violate",
    "violated",
    "violation",
    "virtual authenticator database",
    "virtual authenticators",
    "virtual browsing context group id",
    "virtual scoping root",
    "virtual word boundary",
    "visibility",
    "visibility hidden",
    "visibility state",
    "visibility state hidden",
    "visibility state visible",
    "visibility visible",
    "visibilitychange",
    "visibilitystate",
    "visible",
    "visible character",
    "visible display surface",
    "visible text node",
    "visible to reportingobservers",
    "visible track",
    "visit",
    "visual angle unit",
    "visual box model",
    "visual formatting model",
    "visual representation",
    "voice",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "void elements",
    "voidfunction",
    "volume",
    "vttcue",
    "wai-aria role",
    "wait and queue a report for",
    "wait for all",
    "wait for import maps",
    "wait for navigation to complete",
    "waiting",
    "waiting asynchronously",
    "waiting for all",
    "waiting for the navigation to complete",
    "waiting_for_segment",
    "waitingforkey",
    "wake lock type",
    "warning user during nfc operations",
    "watch advertisements manager",
    "watchavailability",
    "waveshapernode",
    "waveshaperoptions",
    "wbr",
    "weaker inset",
    "weakref",
    "weakref.prototype.deref()",
    "web analytics",
    "web application",
    "web audio api",
    "web authentication api",
    "web element",
    "web element identifier",
    "web element reference",
    "web elements",
    "web frame identifier",
    "web idl arguments list",
    "web locks tasks source",
    "web nfc permission name",
    "web push protocol",
    "web share target",
    "web share targets",
    "web sockets",
    "web window identifier",
    "web worker",
    "web+ scheme prefix",
    "web-exposed available screen area",
    "web-exposed screen area",
    "web-share",
    "web-wide",
    "webappmanifest",
    "webassembly.module",
    "webauthn authenticator",
    "webauthn client",
    "webauthn client device",
    "webauthn extensions",
    "webauthn relying party",
    "webauthn signature",
    "webauthn/fido2 protocol",
    "webcrypto privacy considerations",
    "webcrypto security considerations",
    "webdriver",
    "webdriver new session algorithm",
    "webdriver new session algorithms",
    "webdriver-active flag",
    "webgl",
    "webgl-context",
    "webgl2",
    "webgl2renderingcontext",
    "webgl2renderingcontextbase",
    "webgl2renderingcontextoverloads",
    "webglactiveinfo",
    "webglbuffer",
    "webglcontextattributes",
    "webglcontextevent",
    "webglframebuffer",
    "webglobject",
    "webglprogram",
    "webglquery",
    "webglrenderbuffer",
    "webglrenderingcontext",
    "webglrenderingcontextbase",
    "webglrenderingcontextoverloads",
    "webglsampler",
    "webglshader",
    "webglshaderprecisionformat",
    "webglsync",
    "webgltexture",
    "webgltransformfeedback",
    "webgluniformlocation",
    "webglvertexarrayobject",
    "webgpu interface",
    "webgpu platform",
    "webgpu-context",
    "webkitURL",
    "webnn-feature",
    "websocket connection",
    "websocket listener",
    "websocket task source",
    "webtransport session",
    "webtransport stream",
    "webusb platform capability descriptor",
    "webvtt",
    "webvtt alignment cue setting",
    "webvtt bold object",
    "webvtt caption or subtitle cue",
    "webvtt caption or subtitle cue components",
    "webvtt caption or subtitle cue text",
    "webvtt chapter cue",
    "webvtt chapter title text",
    "webvtt class object",
    "webvtt comment block",
    "webvtt cue",
    "webvtt cue automatic position",
    "webvtt cue background box",
    "webvtt cue block",
    "webvtt cue bold span",
    "webvtt cue box",
    "webvtt cue center alignment",
    "webvtt cue class span",
    "webvtt cue end alignment",
    "webvtt cue horizontal writing direction",
    "webvtt cue identifier",
    "webvtt cue internal text",
    "webvtt cue italics span",
    "webvtt cue language span",
    "webvtt cue left alignment",
    "webvtt cue line",
    "webvtt cue line alignment",
    "webvtt cue line automatic",
    "webvtt cue line center alignment",
    "webvtt cue line end alignment",
    "webvtt cue line start alignment",
    "webvtt cue position",
    "webvtt cue position alignment",
    "webvtt cue position automatic alignment",
    "webvtt cue position center alignment",
    "webvtt cue position line-left alignment",
    "webvtt cue position line-right alignment",
    "webvtt cue region",
    "webvtt cue right alignment",
    "webvtt cue ruby span",
    "webvtt cue ruby text span",
    "webvtt cue setting",
    "webvtt cue setting name",
    "webvtt cue setting value",
    "webvtt cue settings list",
    "webvtt cue size",
    "webvtt cue snap-to-lines flag",
    "webvtt cue span end tag",
    "webvtt cue span start tag",
    "webvtt cue span start tag annotation text",
    "webvtt cue start alignment",
    "webvtt cue text alignment",
    "webvtt cue text dom construction rules",
    "webvtt cue text parsing rules",
    "webvtt cue text span",
    "webvtt cue text tokenizer",
    "webvtt cue timestamp",
    "webvtt cue timings",
    "webvtt cue underline span",
    "webvtt cue vertical growing left writing direction",
    "webvtt cue vertical growing right writing direction",
    "webvtt cue voice span",
    "webvtt cue writing direction",
    "webvtt data state",
    "webvtt end tag state",
    "webvtt file",
    "webvtt file body",
    "webvtt file using caption or subtitle cue text",
    "webvtt file using chapter title text",
    "webvtt file using cue text",
    "webvtt file using metadata content",
    "webvtt file using only nested cues",
    "webvtt internal node object",
    "webvtt italic object",
    "webvtt language object",
    "webvtt leaf node object",
    "webvtt line cue setting",
    "webvtt line terminator",
    "webvtt metadata cue",
    "webvtt metadata text",
    "webvtt node object",
    "webvtt node object’s applicable classes",
    "webvtt node object’s applicable language",
    "webvtt parser",
    "webvtt parser algorithm",
    "webvtt percentage",
    "webvtt position cue setting",
    "webvtt region",
    "webvtt region anchor",
    "webvtt region anchor setting",
    "webvtt region cue setting",
    "webvtt region definition block",
    "webvtt region identifier",
    "webvtt region identifier setting",
    "webvtt region lines",
    "webvtt region lines setting",
    "webvtt region object",
    "webvtt region scroll",
    "webvtt region scroll none",
    "webvtt region scroll setting",
    "webvtt region scroll up",
    "webvtt region settings list",
    "webvtt region viewport anchor",
    "webvtt region viewport anchor setting",
    "webvtt region width",
    "webvtt region width setting",
    "webvtt ruby object",
    "webvtt ruby text object",
    "webvtt rules for extracting the chapter title",
    "webvtt size cue setting",
    "webvtt start tag annotation state",
    "webvtt start tag class state",
    "webvtt start tag state",
    "webvtt style block",
    "webvtt tag state",
    "webvtt text object",
    "webvtt timestamp",
    "webvtt timestamp object",
    "webvtt timestamp tag state",
    "webvtt underline object",
    "webvtt vertical text cue setting",
    "webvtt voice object",
    "week",
    "week number of the last day",
    "week state",
    "well known type name",
    "well-known intrinsic objects",
    "well-known symbols",
    "well-known type record",
    "well-typed",
    "wheel",
    "wheel input source",
    "wheel input state",
    "when-defined promise map",
    "while",
    "white balance mode",
    "white space",
    "white space characters",
    "white-space",
    "whitespace",
    "whitespace byte",
    "widget",
    "widgets",
    "widows",
    "width",
    "width descriptor",
    "width descriptor value",
    "width dimension",
    "width of the select's labels",
    "will lazy load element steps",
    "will read frequently",
    "will retry",
    "will-change",
    "willful violation",
    "window",
    "window dimensioning/positioning",
    "window event loop",
    "window handle",
    "window handles",
    "window open steps",
    "window post message steps",
    "window rect",
    "window state",
    "window states",
    "window-reflecting body element event handler set",
    "window.[[\\getownproperty]]",
    "window.alert",
    "window.confirm",
    "window.prompt",
    "windowclient",
    "windowframe",
    "windowproxy",
    "windows",
    "windows drive letter",
    "windows-1250",
    "windows-1251",
    "windows-1252",
    "windows-1253",
    "windows-1254",
    "windows-1255",
    "windows-1256",
    "windows-1257",
    "windows-1258",
    "windows-874",
    "windowtext",
    "with an error",
    "word boundary",
    "word bounded",
    "word separator",
    "word-boundary-detection",
    "word-boundary-expansion",
    "word-break",
    "word-separator character",
    "word-spacing",
    "word-wrap",
    "words",
    "work",
    "worker",
    "worker event loop",
    "worker-src",
    "workerglobalscope object",
    "workernavigator",
    "workernavigator object",
    "workerstart",
    "workgroup grid",
    "workgroup id",
    "worklet agent",
    "worklet animation",
    "worklet destination type",
    "worklet event loop",
    "worklet global scope type",
    "worklet global scopes",
    "would need a browsing context group switch due to report-only",
    "would start a number",
    "would start an identifier",
    "wrap",
    "wrap-after",
    "wrap-before",
    "wrap-flow",
    "wrap-inside",
    "wrap-through",
    "wrapkey",
    "wrapping",
    "wrapping area",
    "wrapping context",
    "writable side",
    "writable stream",
    "writable stream writer",
    "write a chunk",
    "write a message",
    "write access",
    "write bytes",
    "write characteristic descriptors",
    "write characteristic value",
    "write content to the clipboard",
    "write long characteristic descriptors",
    "write without response",
    "write-only storage texture",
    "writecharacteristicvalue",
    "writedatagrams",
    "writeencodeddata",
    "writer",
    "writing content",
    "writing mode",
    "writing system keys",
    "writing-mode",
    "wsp",
    "x",
    "x coordinate",
    "x-axis",
    "x-content-type-options",
    "x-frame-options",
    "x-height baseline",
    "x-mac-cyrillic",
    "x-middle baseline",
    "x-ua-compatible state",
    "x-user-defined",
    "x-user-defined decoder",
    "x-user-defined encoder",
    "xlink namespace",
    "xml document",
    "xml documents",
    "xml fragment parsing algorithm",
    "xml fragment serialization algorithm",
    "xml mime type",
    "xml namespace",
    "xml parser",
    "xml scripting support disabled",
    "xml scripting support enabled",
    "xml serialization",
    "xml serialization algorithm",
    "xml serialization of the attributes",
    "xml serializing a comment node",
    "xml serializing a document node",
    "xml serializing a documentfragment node",
    "xml serializing a documenttype node",
    "xml serializing a processinginstruction node",
    "xml serializing a text node",
    "xml serializing an element node",
    "xml-compatible",
    "xml-ns",
    "xmldocument",
    "xmlhttprequest",
    "xmlns namespace",
    "xmlns-ns",
    "xmp",
    "xpath selector",
    "xpathexception",
    "xr",
    "xr animation frame",
    "xr compatible",
    "xr compositor",
    "xr device",
    "xr input source",
    "xr task source",
    "xsltprocessor",
    "xyz-params",
    "y",
    "y coordinate",
    "y-axis",
    "yank",
    "yearless date",
    "z-index",
    "zero value",
    "zhuyin fuhao",
    "zip-based mime type",
    "zoom",
    "{a,b}",
    "{a}",
    "|",
    "||",
    "~",
    "ℝ",
    "ℤ",
    "𝔽"
  ],
  "<angle>": [
    "deg",
    "grad",
    "rad",
    "turn"
  ],
  "<baseline-position>": [
    "baseline",
    "first",
    "first baseline",
    "last",
    "last baseline"
  ],
  "<bg-clip>": [
    "<box>",
    "border",
    "text"
  ],
  "<blend-mode>": [
    "color",
    "color-burn",
    "color-dodge",
    "darken",
    "difference",
    "exclusion",
    "hard-light",
    "hue",
    "lighten",
    "luminosity",
    "multiply",
    "normal",
    "overlay",
    "saturation",
    "screen",
    "soft-light"
  ],
  "<border-style>": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "<border-width>": [
    "<length>",
    "medium",
    "thick",
    "thin"
  ],
  "<bottom>": [
    "auto"
  ],
  "<box>": [
    "border-box",
    "content-box",
    "fill-box",
    "margin-box",
    "padding-box",
    "stroke-box",
    "svg viewport origin box",
    "view-box"
  ],
  "<by-to>": [
    "by",
    "to"
  ],
  "<color-space>": [
    "hsl",
    "hwb",
    "lab",
    "lch",
    "srgb",
    "xyz"
  ],
  "<color>": [
    "aliceblue",
    "antiquewhite",
    "aqua",
    "aquamarine",
    "azure",
    "beige",
    "bisque",
    "black",
    "blanchedalmond",
    "blue",
    "blueviolet",
    "brown",
    "burlywood",
    "cadetblue",
    "chartreuse",
    "chocolate",
    "coral",
    "cornflowerblue",
    "cornsilk",
    "crimson",
    "currentcolor",
    "cyan",
    "darkblue",
    "darkcyan",
    "darkgoldenrod",
    "darkgray",
    "darkgreen",
    "darkgrey",
    "darkkhaki",
    "darkmagenta",
    "darkolivegreen",
    "darkorange",
    "darkorchid",
    "darkred",
    "darksalmon",
    "darkseagreen",
    "darkslateblue",
    "darkslategray",
    "darkslategrey",
    "darkturquoise",
    "darkviolet",
    "deeppink",
    "deepskyblue",
    "dimgray",
    "dimgrey",
    "dodgerblue",
    "firebrick",
    "floralwhite",
    "forestgreen",
    "fuchsia",
    "gainsboro",
    "ghostwhite",
    "gold",
    "goldenrod",
    "gray",
    "green",
    "greenyellow",
    "grey",
    "honeydew",
    "hotpink",
    "indianred",
    "indigo",
    "ivory",
    "khaki",
    "lavender",
    "lavenderblush",
    "lawngreen",
    "lemonchiffon",
    "lightblue",
    "lightcoral",
    "lightcyan",
    "lightgoldenrodyellow",
    "lightgray",
    "lightgreen",
    "lightgrey",
    "lightpink",
    "lightsalmon",
    "lightseagreen",
    "lightskyblue",
    "lightslategray",
    "lightslategrey",
    "lightsteelblue",
    "lightyellow",
    "lime",
    "limegreen",
    "linen",
    "magenta",
    "maroon",
    "mediumaquamarine",
    "mediumblue",
    "mediumorchid",
    "mediumpurple",
    "mediumseagreen",
    "mediumslateblue",
    "mediumspringgreen",
    "mediumturquoise",
    "mediumvioletred",
    "midnightblue",
    "mintcream",
    "mistyrose",
    "moccasin",
    "navajowhite",
    "navy",
    "oldlace",
    "olive",
    "olivedrab",
    "orange",
    "orangered",
    "orchid",
    "palegoldenrod",
    "palegreen",
    "paleturquoise",
    "palevioletred",
    "papayawhip",
    "peachpuff",
    "peru",
    "pink",
    "plum",
    "powderblue",
    "purple",
    "rebeccapurple",
    "red",
    "rosybrown",
    "royalblue",
    "saddlebrown",
    "salmon",
    "sandybrown",
    "seagreen",
    "seashell",
    "sienna",
    "silver",
    "skyblue",
    "slateblue",
    "slategray",
    "slategrey",
    "snow",
    "springgreen",
    "steelblue",
    "tan",
    "teal",
    "thistle",
    "tomato",
    "transparent",
    "turquoise",
    "violet",
    "wheat",
    "white",
    "whitesmoke",
    "yellow",
    "yellowgreen"
  ],
  "<content-distribution>": [
    "space-around",
    "space-between",
    "space-evenly",
    "stretch"
  ],
  "<content-list>": [
    "<image>",
    "<string>",
    "close-quote",
    "contents",
    "leader()",
    "no-close-quote",
    "no-open-quote",
    "open-quote"
  ],
  "<content-position>": [
    "center",
    "end",
    "flex-end",
    "flex-start",
    "start"
  ],
  "<counter-style-name>": [
    "arabic-indic",
    "armenian",
    "bengali",
    "cambodian",
    "circle",
    "cjk-decimal",
    "cjk-earthly-branch",
    "cjk-heavenly-stem",
    "decimal",
    "decimal-leading-zero",
    "devanagari",
    "disc",
    "disclosure-closed",
    "disclosure-open",
    "ethiopic-numeric",
    "georgian",
    "gujarati",
    "gurmukhi",
    "hebrew",
    "hiragana",
    "hiragana-iroha",
    "kannada",
    "katakana",
    "katakana-iroha",
    "khmer",
    "korean-hangul-formal",
    "korean-hanja-formal",
    "korean-hanja-informal",
    "lao",
    "lower-alpha",
    "lower-armenian",
    "lower-greek",
    "lower-latin",
    "lower-roman",
    "malayalam",
    "mongolian",
    "myanmar",
    "oriya",
    "persian",
    "square",
    "tamil",
    "telugu",
    "thai",
    "tibetan",
    "upper-alpha",
    "upper-armenian",
    "upper-latin",
    "upper-roman"
  ],
  "<counter-style>": [
    "cjk-ideographic",
    "japanese-formal",
    "japanese-informal",
    "simp-chinese-formal",
    "simp-chinese-informal",
    "trad-chinese-formal",
    "trad-chinese-informal"
  ],
  "<cubic-bezier-easing-function>": [
    "cubic-bezier()",
    "ease",
    "ease-in",
    "ease-in-out",
    "ease-out"
  ],
  "<display-box>": [
    "contents",
    "none"
  ],
  "<display-inside>": [
    "flex",
    "flow",
    "flow-root",
    "grid",
    "ruby",
    "table"
  ],
  "<display-internal>": [
    "ruby-base",
    "ruby-base-container",
    "ruby-text",
    "ruby-text-container",
    "table-caption",
    "table-cell",
    "table-column",
    "table-column-group",
    "table-footer-group",
    "table-header-group",
    "table-row",
    "table-row-group"
  ],
  "<display-legacy>": [
    "inline-block",
    "inline-flex",
    "inline-grid",
    "inline-table"
  ],
  "<display-list-item>": [
    "list-item"
  ],
  "<display-outside>": [
    "block",
    "inline",
    "run-in"
  ],
  "<ending-shape>": [
    "circle",
    "ellipse"
  ],
  "<flex>": [
    "fr",
    "fr unit"
  ],
  "<frequency>": [
    "hz",
    "khz"
  ],
  "<generic-family>": [
    "cursive",
    "emoji",
    "fangsong",
    "fantasy",
    "math",
    "monospace",
    "sans-serif",
    "serif",
    "system-ui",
    "ui-monospace",
    "ui-rounded",
    "ui-sans-serif",
    "ui-serif",
    "xxx"
  ],
  "<geometry-box>": [
    "border-box",
    "content-box",
    "fill-box",
    "margin-box",
    "padding-box",
    "stroke-box",
    "svg viewport origin box",
    "view-box"
  ],
  "<grid-line>": [
    "<custom-ident>",
    "<integer> && <custom-ident>?",
    "auto",
    "span && [ <integer> || <custom-ident> ]"
  ],
  "<left>": [
    "auto"
  ],
  "<length>": [
    "advance measure",
    "cap",
    "ch",
    "cm",
    "dvb",
    "dvh",
    "dvi",
    "dvmax",
    "dvmin",
    "dvw",
    "em",
    "ex",
    "ic",
    "in",
    "lh",
    "mm",
    "pc",
    "pixel unit",
    "pt",
    "px",
    "q",
    "rem",
    "rlh",
    "svb",
    "svh",
    "svi",
    "svmax",
    "svmin",
    "svw",
    "vb",
    "vh",
    "vi",
    "vmax",
    "vmin",
    "vw"
  ],
  "<line-style>": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "<line-width>": [
    "medium",
    "thick",
    "thin"
  ],
  "<overflow-position>": [
    "safe",
    "unsafe"
  ],
  "<padding-width>": [
    "<length>",
    "<percentage>"
  ],
  "<page-size>": [
    "a3",
    "a4",
    "a5",
    "b4",
    "b5",
    "jis-b4",
    "jis-b5",
    "ledger",
    "legal",
    "letter"
  ],
  "<paint>": [
    "none"
  ],
  "<quote>": [
    "close-quote",
    "no-close-quote",
    "no-open-quote",
    "open-quote"
  ],
  "<resolution>": [
    "dpcm",
    "dpi",
    "dppx",
    "x"
  ],
  "<right>": [
    "auto"
  ],
  "<rounding-strategy>": [
    "down",
    "nearest",
    "to-zero",
    "up"
  ],
  "<self-position>": [
    "center",
    "end",
    "flex-end",
    "flex-start",
    "self-end",
    "self-start",
    "start"
  ],
  "<shape-box>": [
    "border-box",
    "content-box",
    "fill-box",
    "margin-box",
    "padding-box",
    "stroke-box",
    "svg viewport origin box",
    "view-box"
  ],
  "<size>": [
    "<length-percentage>{2}",
    "<length>",
    "closest-corner",
    "closest-side",
    "farthest-corner",
    "farthest-side",
    "sides"
  ],
  "<step-easing-function>": [
    "step-end",
    "step-start",
    "steps()"
  ],
  "<svg-paint>": [
    "child",
    "child(<integer>)"
  ],
  "<system-color>": [
    "activetext",
    "buttonborder",
    "buttonface",
    "buttontext",
    "canvas",
    "canvastext",
    "field",
    "fieldtext",
    "graytext",
    "highlight",
    "highlighttext",
    "linktext",
    "mark",
    "marktext",
    "visitedtext"
  ],
  "<time>": [
    "ms",
    "s"
  ],
  "<top>": [
    "auto"
  ],
  "@color-profile": [
    "components",
    "rendering-intent",
    "src"
  ],
  "@color-profile/rendering-intent": [
    "absolute-colorimetric",
    "perceptual",
    "relative-colorimetric",
    "saturation"
  ],
  "@counter-style": [
    "additive-symbols",
    "fallback",
    "negative",
    "pad",
    "prefix",
    "range",
    "speak-as",
    "suffix",
    "symbols",
    "system"
  ],
  "@counter-style/range": [
    "auto"
  ],
  "@counter-style/speak-as": [
    "<counter-style-name>",
    "auto",
    "bullets",
    "numbers",
    "spell-out",
    "words"
  ],
  "@counter-style/system": [
    "additive",
    "alphabetic",
    "cyclic",
    "extends",
    "fixed",
    "numeric"
  ],
  "@custom-media": [
    "false",
    "true"
  ],
  "@font-face": [
    "ascent-override",
    "descent-override",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-language-override",
    "font-named-instance",
    "font-size",
    "font-stretch",
    "font-style",
    "font-variation-settings",
    "font-weight",
    "line-gap-override",
    "size-adjust",
    "src",
    "subscript-position-override",
    "subscript-size-override",
    "superscript-position-override",
    "superscript-size-override",
    "unicode-range"
  ],
  "@font-face/font-display": [
    "auto",
    "block",
    "fallback",
    "optional",
    "swap"
  ],
  "@font-face/font-size": [
    "<number>",
    "auto"
  ],
  "@font-feature-values": [
    "font-display"
  ],
  "@font-palette-values": [
    "base-palette",
    "font-family",
    "override-color"
  ],
  "@media": [
    "-webkit-device-pixel-ratio",
    "-webkit-max-device-pixel-ratio",
    "-webkit-min-device-pixel-ratio",
    "-webkit-transform-3d",
    "all",
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "aural",
    "braille",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "dynamic-range",
    "embossed",
    "environment-blending",
    "forced-colors",
    "grid",
    "handheld",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "not",
    "only",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-data",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "print",
    "projection",
    "resolution",
    "scan",
    "screen",
    "scripting",
    "shape",
    "speech",
    "tty",
    "tv",
    "update",
    "video-color-gamut",
    "video-dynamic-range",
    "video-height",
    "video-resolution",
    "video-width",
    "width"
  ],
  "@media/color-gamut": [
    "p3",
    "rec2020",
    "srgb"
  ],
  "@media/dynamic-range": [
    "high",
    "standard"
  ],
  "@media/environment-blending": [
    "additive",
    "opaque",
    "subtractive"
  ],
  "@media/forced-colors": [
    "active",
    "none"
  ],
  "@media/hover": [
    "hover",
    "none"
  ],
  "@media/inverted-colors": [
    "inverted",
    "none"
  ],
  "@media/orientation": [
    "landscape",
    "portrait"
  ],
  "@media/overflow-block": [
    "none",
    "paged",
    "scroll"
  ],
  "@media/overflow-inline": [
    "none",
    "scroll"
  ],
  "@media/pointer": [
    "coarse",
    "fine",
    "none"
  ],
  "@media/prefers-color-scheme": [
    "active",
    "dark",
    "light",
    "none"
  ],
  "@media/prefers-contrast": [
    "custom",
    "forced",
    "high",
    "less",
    "low",
    "more",
    "no-preference"
  ],
  "@media/prefers-reduced-data": [
    "no-preference",
    "reduce"
  ],
  "@media/prefers-reduced-motion": [
    "no-preference",
    "reduce"
  ],
  "@media/prefers-reduced-transparency": [
    "no-preference",
    "reduce"
  ],
  "@media/resolution": [
    "infinite"
  ],
  "@media/scan": [
    "interlace",
    "progressive"
  ],
  "@media/scripting": [
    "enabled",
    "initial-only",
    "none"
  ],
  "@media/shape": [
    "rect",
    "round"
  ],
  "@media/update": [
    "fast",
    "none",
    "slow"
  ],
  "@page": [
    ":blank",
    ":first",
    ":left",
    ":right",
    "bleed",
    "marks",
    "page-orientation",
    "size"
  ],
  "@page/bleed": [
    "<length>",
    "auto"
  ],
  "@page/marks": [
    "crop",
    "cross",
    "none"
  ],
  "@page/size": [
    "<length>",
    "<page-size>",
    "auto",
    "landscape",
    "portrait"
  ],
  "@property": [
    "inherits",
    "initial-value",
    "syntax"
  ],
  "@scroll-timeline": [
    "orientation",
    "scroll-offsets",
    "source"
  ],
  "@viewport": [
    "height",
    "max-height",
    "max-width",
    "max-zoom",
    "min-height",
    "min-width",
    "min-zoom",
    "orientation",
    "user-zoom",
    "viewport-fit",
    "width",
    "zoom"
  ],
  "ARIAMixin": [
    "ariaAtomic",
    "ariaAutoComplete",
    "ariaBusy",
    "ariaChecked",
    "ariaColCount",
    "ariaColIndex",
    "ariaColIndexText",
    "ariaColSpan",
    "ariaCurrent",
    "ariaDescription",
    "ariaDisabled",
    "ariaExpanded",
    "ariaHasPopup",
    "ariaHidden",
    "ariaInvalid",
    "ariaKeyShortcuts",
    "ariaLabel",
    "ariaLevel",
    "ariaLive",
    "ariaModal",
    "ariaMultiLine",
    "ariaMultiSelectable",
    "ariaOrientation",
    "ariaPlaceholder",
    "ariaPosInSet",
    "ariaPressed",
    "ariaReadOnly",
    "ariaRequired",
    "ariaRoleDescription",
    "ariaRowCount",
    "ariaRowIndex",
    "ariaRowIndexText",
    "ariaRowSpan",
    "ariaSelected",
    "ariaSetSize",
    "ariaSort",
    "ariaValueMax",
    "ariaValueMin",
    "ariaValueNow",
    "ariaValueText",
    "role"
  ],
  "AbortController": [
    "AbortController()",
    "abort()",
    "constructor()",
    "signal"
  ],
  "AbortSignal": [
    "abort",
    "abort algorithms",
    "abort()",
    "aborted",
    "aborted flag",
    "add",
    "follow",
    "onabort",
    "remove",
    "signal abort"
  ],
  "AbsoluteOrientationReadingValues": [
    "quaternion"
  ],
  "AbsoluteOrientationSensor": [
    "AbsoluteOrientationSensor()",
    "AbsoluteOrientationSensor(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)"
  ],
  "AbsoluteOrientationSensor/AbsoluteOrientationSensor()": [
    "sensorOptions"
  ],
  "AbsoluteOrientationSensor/AbsoluteOrientationSensor(sensorOptions)": [
    "sensorOptions"
  ],
  "AbsoluteOrientationSensor/constructor()": [
    "sensorOptions"
  ],
  "AbsoluteOrientationSensor/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "AbstractRange": [
    "collapsed",
    "endContainer",
    "endOffset",
    "startContainer",
    "startOffset"
  ],
  "AbstractWorker": [
    "error",
    "onerror"
  ],
  "Accelerometer": [
    "Accelerometer()",
    "Accelerometer(options)",
    "constructor()",
    "constructor(options)",
    "x",
    "y",
    "z"
  ],
  "Accelerometer/Accelerometer()": [
    "options"
  ],
  "Accelerometer/Accelerometer(options)": [
    "options"
  ],
  "Accelerometer/constructor()": [
    "options"
  ],
  "Accelerometer/constructor(options)": [
    "options"
  ],
  "AccelerometerLocalCoordinateSystem": [
    "\"device\"",
    "\"screen\""
  ],
  "AccelerometerReadingValues": [
    "x",
    "y",
    "z"
  ],
  "AccelerometerSensorOptions": [
    "referenceFrame"
  ],
  "AccessibilityRole": [
    "role"
  ],
  "AddEventListenerOptions": [
    "once",
    "passive",
    "signal"
  ],
  "AesCbcParams": [
    "iv"
  ],
  "AesCtrParams": [
    "counter",
    "length"
  ],
  "AesDerivedKeyParams": [
    "length"
  ],
  "AesGcmParams": [
    "additionalData",
    "iv",
    "tagLength"
  ],
  "AesKeyAlgorithm": [
    "length"
  ],
  "AesKeyGenParams": [
    "length"
  ],
  "Algorithm": [
    "name"
  ],
  "AlgorithmIdentifier": [
    "AlgorithmIdentifier"
  ],
  "AlignSetting": [
    "\"center\"",
    "\"end\"",
    "\"left\"",
    "\"right\"",
    "\"start\"",
    "center",
    "end",
    "left",
    "right",
    "start"
  ],
  "AllowedBluetoothDevice": [
    "[[device]]",
    "allowedManufacturerData",
    "allowedServices",
    "deviceId",
    "mayUseGATT"
  ],
  "AllowedUSBDevice": [
    "[[devices]]",
    "productId",
    "serialNumber",
    "vendorId"
  ],
  "AmbientLightReadingValues": [
    "illuminance"
  ],
  "AmbientLightSensor": [
    "AmbientLightSensor()",
    "AmbientLightSensor(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)",
    "illuminance"
  ],
  "AmbientLightSensor/AmbientLightSensor()": [
    "sensorOptions"
  ],
  "AmbientLightSensor/AmbientLightSensor(sensorOptions)": [
    "sensorOptions"
  ],
  "AmbientLightSensor/constructor()": [
    "sensorOptions"
  ],
  "AmbientLightSensor/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "AnalyserNode": [
    "AnalyserNode(context)",
    "AnalyserNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "fftSize",
    "frequencyBinCount",
    "getByteFrequencyData(array)",
    "getByteTimeDomainData(array)",
    "getFloatFrequencyData(array)",
    "getFloatTimeDomainData(array)",
    "maxDecibels",
    "minDecibels",
    "smoothingTimeConstant"
  ],
  "AnalyserNode/AnalyserNode(context)": [
    "context",
    "options"
  ],
  "AnalyserNode/AnalyserNode(context, options)": [
    "context",
    "options"
  ],
  "AnalyserNode/constructor()": [
    "context",
    "options"
  ],
  "AnalyserNode/constructor(context)": [
    "context",
    "options"
  ],
  "AnalyserNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "AnalyserNode/getByteFrequencyData()": [
    "array"
  ],
  "AnalyserNode/getByteFrequencyData(array)": [
    "array"
  ],
  "AnalyserNode/getByteTimeDomainData()": [
    "array"
  ],
  "AnalyserNode/getByteTimeDomainData(array)": [
    "array"
  ],
  "AnalyserNode/getFloatFrequencyData()": [
    "array"
  ],
  "AnalyserNode/getFloatFrequencyData(array)": [
    "array"
  ],
  "AnalyserNode/getFloatTimeDomainData()": [
    "array"
  ],
  "AnalyserNode/getFloatTimeDomainData(array)": [
    "array"
  ],
  "AnalyserOptions": [
    "fftSize",
    "maxDecibels",
    "minDecibels",
    "smoothingTimeConstant"
  ],
  "Animatable": [
    "animate(keyframes)",
    "animate(keyframes, options)",
    "getAnimations()",
    "getAnimations(options)"
  ],
  "Animatable/animate(keyframes, options)": [
    "keyframes",
    "options"
  ],
  "Animatable/getAnimations(options)": [
    "options"
  ],
  "Animation": [
    "Animation()",
    "Animation(effect)",
    "Animation(effect, timeline)",
    "cancel()",
    "commitStyles()",
    "constructor()",
    "constructor(effect)",
    "constructor(effect, timeline)",
    "currentTime",
    "effect",
    "finish()",
    "finished",
    "id",
    "oncancel",
    "onfinish",
    "onremove",
    "pause()",
    "pending",
    "persist()",
    "play()",
    "playState",
    "playbackRate",
    "ready",
    "replaceState",
    "reverse()",
    "startTime",
    "timeline",
    "updatePlaybackRate(playbackRate)"
  ],
  "Animation/Animation(effect, timeline)": [
    "effect",
    "timeline"
  ],
  "Animation/updatePlaybackRate(playbackRate)": [
    "playbackRate"
  ],
  "AnimationEffect": [
    "after()",
    "after(...effects)",
    "before()",
    "before(...effects)",
    "getComputedTiming()",
    "getTiming()",
    "localTime",
    "nextSibling",
    "parent",
    "previousSibling",
    "remove()",
    "replace()",
    "replace(...effects)",
    "updateTiming()",
    "updateTiming(timing)"
  ],
  "AnimationEffect/after()": [
    "effects"
  ],
  "AnimationEffect/after(...effects)": [
    "effects"
  ],
  "AnimationEffect/before()": [
    "effects"
  ],
  "AnimationEffect/before(...effects)": [
    "effects"
  ],
  "AnimationEffect/replace()": [
    "effects"
  ],
  "AnimationEffect/replace(...effects)": [
    "effects"
  ],
  "AnimationEffect/updateTiming(timing)": [
    "timing"
  ],
  "AnimationEvent": [
    "AnimationEvent(type)",
    "AnimationEvent(type, animationEventInitDict)",
    "animationName",
    "constructor(type)",
    "constructor(type, animationEventInitDict)",
    "elapsedTime",
    "pseudoElement"
  ],
  "AnimationEvent/AnimationEvent(type)": [
    "animationEventInitDict",
    "type"
  ],
  "AnimationEvent/AnimationEvent(type, animationEventInitDict)": [
    "animationEventInitDict",
    "type"
  ],
  "AnimationEvent/constructor(type)": [
    "animationEventInitDict",
    "type"
  ],
  "AnimationEvent/constructor(type, animationEventInitDict)": [
    "animationEventInitDict",
    "type"
  ],
  "AnimationEventInit": [
    "animationName",
    "elapsedTime",
    "pseudoElement"
  ],
  "AnimationFrameProvider": [
    "cancelAnimationFrame(handle)",
    "requestAnimationFrame(callback)"
  ],
  "AnimationNodeList": [
    "item(index)",
    "length"
  ],
  "AnimationNodeList/item(index)": [
    "index"
  ],
  "AnimationPlayState": [
    "\"finished\"",
    "\"idle\"",
    "\"paused\"",
    "\"running\""
  ],
  "AnimationPlaybackEvent": [
    "AnimationPlaybackEvent(type)",
    "AnimationPlaybackEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "currentTime",
    "timelineTime"
  ],
  "AnimationPlaybackEvent/AnimationPlaybackEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "AnimationPlaybackEvent/AnimationPlaybackEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "AnimationPlaybackEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "AnimationPlaybackEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "AnimationPlaybackEventInit": [
    "currentTime",
    "timelineTime"
  ],
  "AnimationReplaceState": [
    "\"active\"",
    "\"persisted\"",
    "\"removed\""
  ],
  "AnimationTimeline": [
    "currentTime",
    "duration",
    "phase",
    "play()",
    "play(effect)"
  ],
  "AnimationTimeline/play(effect)": [
    "effect"
  ],
  "AnimationWorkletGlobalScope": [
    "registerAnimator(name, animatorCtor)"
  ],
  "AnimationWorkletGlobalScope/registerAnimator(name, animatorCtor)": [
    "animatorCtor",
    "name"
  ],
  "AnimatorInstanceConstructor": [
    "options",
    "state"
  ],
  "AppendMode": [
    "AppendMode",
    "segments",
    "sequence"
  ],
  "AriaAttributes": [
    "ariaAtomic",
    "ariaAutoComplete",
    "ariaBusy",
    "ariaChecked",
    "ariaColCount",
    "ariaColIndex",
    "ariaColSpan",
    "ariaCurrent",
    "ariaDescription",
    "ariaDisabled",
    "ariaExpanded",
    "ariaHasPopup",
    "ariaHidden",
    "ariaInvalid",
    "ariaKeyShortcuts",
    "ariaLabel",
    "ariaLevel",
    "ariaLive",
    "ariaModal",
    "ariaMultiLine",
    "ariaMultiSelectable",
    "ariaOrientation",
    "ariaPlaceholder",
    "ariaPosInSet",
    "ariaPressed",
    "ariaReadOnly",
    "ariaRequired",
    "ariaRoleDescription",
    "ariaRowCount",
    "ariaRowIndex",
    "ariaRowSpan",
    "ariaSelected",
    "ariaSetSize",
    "ariaSort",
    "ariaValueMax",
    "ariaValueMin",
    "ariaValueNow",
    "ariaValueText"
  ],
  "ArrayBuffer": [
    "create",
    "detach",
    "transfer",
    "write"
  ],
  "ArrayBuffer/write": [
    "startingoffset"
  ],
  "ArrayBufferView": [
    "create",
    "write"
  ],
  "ArrayBufferView/write": [
    "startingoffset"
  ],
  "AssignedNodeOptions": [
    "flatten"
  ],
  "AttestationConveyancePreference": [
    "\"direct\"",
    "\"enterprise\"",
    "\"indirect\"",
    "\"none\"",
    "direct",
    "enterprise",
    "indirect",
    "none"
  ],
  "Attr": [
    "element",
    "isId",
    "local name",
    "localName",
    "name",
    "namespace",
    "namespace prefix",
    "namespaceURI",
    "ownerElement",
    "prefix",
    "qualified name",
    "reflect",
    "schemaTypeInfo",
    "specified",
    "value"
  ],
  "AudioBuffer": [
    "AudioBuffer(options)",
    "[[internal data]]",
    "[[length]]",
    "[[number of channels]]",
    "[[sample rate]]",
    "constructor(options)",
    "copyFromChannel(destination, channelNumber)",
    "copyFromChannel(destination, channelNumber, bufferOffset)",
    "copyToChannel(source, channelNumber)",
    "copyToChannel(source, channelNumber, bufferOffset)",
    "duration",
    "getChannelData(channel)",
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "AudioBuffer/AudioBuffer(options)": [
    "options"
  ],
  "AudioBuffer/constructor()": [
    "options"
  ],
  "AudioBuffer/constructor(options)": [
    "options"
  ],
  "AudioBuffer/copyFromChannel()": [
    "bufferOffset",
    "channelNumber",
    "destination"
  ],
  "AudioBuffer/copyFromChannel(destination, channelNumber)": [
    "bufferOffset",
    "channelNumber",
    "destination"
  ],
  "AudioBuffer/copyFromChannel(destination, channelNumber, bufferOffset)": [
    "bufferOffset",
    "channelNumber",
    "destination"
  ],
  "AudioBuffer/copyToChannel()": [
    "bufferOffset",
    "channelNumber",
    "source"
  ],
  "AudioBuffer/copyToChannel(source, channelNumber)": [
    "bufferOffset",
    "channelNumber",
    "source"
  ],
  "AudioBuffer/copyToChannel(source, channelNumber, bufferOffset)": [
    "bufferOffset",
    "channelNumber",
    "source"
  ],
  "AudioBuffer/getChannelData()": [
    "channel"
  ],
  "AudioBuffer/getChannelData(channel)": [
    "channel"
  ],
  "AudioBufferOptions": [
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "AudioBufferSourceNode": [
    "AudioBufferSourceNode(context)",
    "AudioBufferSourceNode(context, options)",
    "[[buffer set]]",
    "buffer",
    "constructor(context)",
    "constructor(context, options)",
    "detune",
    "loop",
    "loopEnd",
    "loopStart",
    "playbackRate",
    "start()",
    "start(when)",
    "start(when, offset)",
    "start(when, offset, duration)"
  ],
  "AudioBufferSourceNode/AudioBufferSourceNode(context)": [
    "context",
    "options"
  ],
  "AudioBufferSourceNode/AudioBufferSourceNode(context, options)": [
    "context",
    "options"
  ],
  "AudioBufferSourceNode/constructor": [
    "AudioBufferSourceNode(context, options)"
  ],
  "AudioBufferSourceNode/constructor()": [
    "context",
    "options"
  ],
  "AudioBufferSourceNode/constructor(context)": [
    "context",
    "options"
  ],
  "AudioBufferSourceNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "AudioBufferSourceNode/start(when, offset, duration)": [
    "duration",
    "offset",
    "when"
  ],
  "AudioBufferSourceOptions": [
    "buffer",
    "detune",
    "loop",
    "loopEnd",
    "loopStart",
    "playbackRate"
  ],
  "AudioConfiguration": [
    "bitrate",
    "channels",
    "contentType",
    "samplerate",
    "spatialRendering"
  ],
  "AudioContext": [
    "AudioContext()",
    "AudioContext(contextOptions)",
    "[[pending resume promises]]",
    "[[suspended by user]]",
    "baseLatency",
    "close()",
    "constructor()",
    "constructor(contextOptions)",
    "createMediaElementSource(mediaElement)",
    "createMediaStreamDestination()",
    "createMediaStreamSource(mediaStream)",
    "createMediaStreamTrackSource(mediaStreamTrack)",
    "getOutputTimestamp()",
    "outputLatency",
    "resume()",
    "suspend()"
  ],
  "AudioContext/constructor(contextOptions)": [
    "contextOptions"
  ],
  "AudioContext/createMediaElementSource()": [
    "mediaElement"
  ],
  "AudioContext/createMediaElementSource(mediaElement)": [
    "mediaElement"
  ],
  "AudioContext/createMediaStreamSource()": [
    "mediaStream"
  ],
  "AudioContext/createMediaStreamSource(mediaStream)": [
    "mediaStream"
  ],
  "AudioContext/createMediaStreamTrackSource()": [
    "mediaStreamTrack"
  ],
  "AudioContext/createMediaStreamTrackSource(mediaStreamTrack)": [
    "mediaStreamTrack"
  ],
  "AudioContextLatencyCategory": [
    "\"balanced\"",
    "\"interactive\"",
    "\"playback\"",
    "balanced",
    "interactive",
    "playback"
  ],
  "AudioContextOptions": [
    "latencyHint",
    "sampleRate"
  ],
  "AudioContextState": [
    "\"closed\"",
    "\"running\"",
    "\"suspended\"",
    "closed",
    "running",
    "suspended"
  ],
  "AudioData": [
    "AudioData(init)",
    "[[detached]]",
    "[[format]]",
    "[[number of channels]]",
    "[[number of frames]]",
    "[[resource reference]]",
    "[[sample rate]]",
    "[[timestamp]]",
    "allocationSize(options)",
    "clone()",
    "close()",
    "constructor(init)",
    "copyTo(destination, options)",
    "duration",
    "format",
    "numberOfChannels",
    "numberOfFrames",
    "sampleRate",
    "timestamp"
  ],
  "AudioData/AudioData(init)": [
    "init"
  ],
  "AudioData/allocationSize(options)": [
    "options"
  ],
  "AudioData/constructor(init)": [
    "init"
  ],
  "AudioData/copyTo(destination, options)": [
    "destination",
    "options"
  ],
  "AudioDataCopyToOptions": [
    "frameCount",
    "frameOffset",
    "planeIndex"
  ],
  "AudioDataInit": [
    "data",
    "format",
    "numberOfChannels",
    "numberOfFrames",
    "sampleRate",
    "timestamp"
  ],
  "AudioDataOutputCallback": [
    "output"
  ],
  "AudioDecoder": [
    "AudioDecoder(init)",
    "[[codec implementation]]",
    "[[decodeQueueSize]]",
    "[[error callback]]",
    "[[key chunk required]]",
    "[[output callback]]",
    "[[pending flush promises]]",
    "[[state]]",
    "close()",
    "configure(config)",
    "constructor(init)",
    "decode(chunk)",
    "decodeQueueSize",
    "flush()",
    "isConfigSupported(config)",
    "reset()",
    "state"
  ],
  "AudioDecoder/AudioDecoder(init)": [
    "init"
  ],
  "AudioDecoder/configure(config)": [
    "config"
  ],
  "AudioDecoder/constructor(init)": [
    "init"
  ],
  "AudioDecoder/decode(chunk)": [
    "chunk"
  ],
  "AudioDecoder/isConfigSupported(config)": [
    "config"
  ],
  "AudioDecoderConfig": [
    "codec",
    "description",
    "numberOfChannels",
    "sampleRate"
  ],
  "AudioDecoderInit": [
    "error",
    "output"
  ],
  "AudioDecoderSupport": [
    "config",
    "supported"
  ],
  "AudioDestinationNode": [
    "maxChannelCount"
  ],
  "AudioEncoder": [
    "AudioEncoder(init)",
    "[[active encoder config]]",
    "[[active output config]]",
    "[[codec implementation]]",
    "[[encodeQueueSize]]",
    "[[error callback]]",
    "[[output callback]]",
    "[[pending flush promises]]",
    "[[state]]",
    "close()",
    "configure(config)",
    "constructor(init)",
    "encode(data)",
    "encodeQueueSize",
    "flush()",
    "isConfigSupported(config)",
    "reset()",
    "state"
  ],
  "AudioEncoder/AudioEncoder(init)": [
    "init"
  ],
  "AudioEncoder/configure(config)": [
    "config"
  ],
  "AudioEncoder/constructor(init)": [
    "init"
  ],
  "AudioEncoder/encode(data)": [
    "data"
  ],
  "AudioEncoder/isConfigSupported(config)": [
    "config"
  ],
  "AudioEncoderConfig": [
    "bitrate",
    "codec",
    "numberOfChannels",
    "sampleRate"
  ],
  "AudioEncoderInit": [
    "error",
    "output"
  ],
  "AudioEncoderSupport": [
    "config",
    "supported"
  ],
  "AudioListener": [
    "forward",
    "forwardX",
    "forwardY",
    "forwardZ",
    "positionX",
    "positionY",
    "positionZ",
    "setOrientation(x, y, z, xUp, yUp, zUp)",
    "setPosition(x, y, z)",
    "up",
    "upX",
    "upY",
    "upZ"
  ],
  "AudioListener/setOrientation()": [
    "x",
    "xUp",
    "y",
    "yUp",
    "z",
    "zUp"
  ],
  "AudioListener/setOrientation(x, y, z, xUp, yUp, zUp)": [
    "x",
    "xUp",
    "y",
    "yUp",
    "z",
    "zUp"
  ],
  "AudioListener/setPosition()": [
    "x",
    "y",
    "z"
  ],
  "AudioListener/setPosition(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "AudioNode": [
    "channelCount",
    "channelCountMode",
    "channelInterpretation",
    "channelcount constraints",
    "channelcountmode constraints",
    "channelinterpretation constraints",
    "connect(destinationNode)",
    "connect(destinationNode, output)",
    "connect(destinationNode, output, input)",
    "connect(destinationParam)",
    "connect(destinationParam, output)",
    "context",
    "disconnect()",
    "disconnect(destinationNode)",
    "disconnect(destinationNode, output)",
    "disconnect(destinationNode, output, input)",
    "disconnect(destinationParam)",
    "disconnect(destinationParam, output)",
    "disconnect(output)",
    "numberOfInputs",
    "numberOfOutputs",
    "source nodes"
  ],
  "AudioNode/connect(destinationNode, output, input)": [
    "destinationNode",
    "input",
    "output"
  ],
  "AudioNode/connect(destinationParam, output)": [
    "destinationParam",
    "output"
  ],
  "AudioNode/disconnect(destinationNode)": [
    "destinationNode"
  ],
  "AudioNode/disconnect(destinationNode, output)": [
    "destinationNode",
    "output"
  ],
  "AudioNode/disconnect(destinationNode, output, input)": [
    "destinationNode",
    "input",
    "output"
  ],
  "AudioNode/disconnect(destinationParam)": [
    "destinationParam"
  ],
  "AudioNode/disconnect(destinationParam, output)": [
    "destinationParam",
    "output"
  ],
  "AudioNode/disconnect(output)": [
    "output"
  ],
  "AudioNodeOptions": [
    "channelCount",
    "channelCountMode",
    "channelInterpretation"
  ],
  "AudioOutputOptions": [
    "deviceId"
  ],
  "AudioParam": [
    "[[current value]]",
    "automation rate constraints",
    "automationRate",
    "cancelAndHoldAtTime(cancelTime)",
    "cancelScheduledValues(cancelTime)",
    "defaultValue",
    "exponentialRampToValueAtTime(value, endTime)",
    "linearRampToValueAtTime(value, endTime)",
    "maxValue",
    "minValue",
    "setTargetAtTime(target, startTime, timeConstant)",
    "setValueAtTime(value, startTime)",
    "setValueCurveAtTime(values, startTime, duration)",
    "value"
  ],
  "AudioParam/cancelAndHoldAtTime()": [
    "cancelTime"
  ],
  "AudioParam/cancelAndHoldAtTime(cancelTime)": [
    "cancelTime"
  ],
  "AudioParam/cancelScheduledValues()": [
    "cancelTime"
  ],
  "AudioParam/cancelScheduledValues(cancelTime)": [
    "cancelTime"
  ],
  "AudioParam/exponentialRampToValueAtTime()": [
    "endTime",
    "value"
  ],
  "AudioParam/exponentialRampToValueAtTime(value, endTime)": [
    "endTime",
    "value"
  ],
  "AudioParam/linearRampToValueAtTime()": [
    "endTime",
    "value"
  ],
  "AudioParam/linearRampToValueAtTime(value, endTime)": [
    "endTime",
    "value"
  ],
  "AudioParam/setTargetAtTime()": [
    "startTime",
    "target",
    "timeConstant"
  ],
  "AudioParam/setTargetAtTime(target, startTime, timeConstant)": [
    "startTime",
    "target",
    "timeConstant"
  ],
  "AudioParam/setValueAtTime()": [
    "startTime",
    "value"
  ],
  "AudioParam/setValueAtTime(value, startTime)": [
    "startTime",
    "value"
  ],
  "AudioParam/setValueCurveAtTime()": [
    "duration",
    "startTime",
    "values"
  ],
  "AudioParam/setValueCurveAtTime(values, startTime, duration)": [
    "duration",
    "startTime",
    "values"
  ],
  "AudioParamDescriptor": [
    "automationRate",
    "defaultValue",
    "maxValue",
    "minValue",
    "name"
  ],
  "AudioProcessingEvent": [
    "AudioProcessingEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "inputBuffer",
    "outputBuffer",
    "playbackTime"
  ],
  "AudioProcessingEvent/AudioProcessingEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "AudioProcessingEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "AudioProcessingEventInit": [
    "inputBuffer",
    "outputBuffer",
    "playbackTime"
  ],
  "AudioSampleFormat": [
    "\"FLT\"",
    "\"FLTP\"",
    "\"S16\"",
    "\"S16P\"",
    "\"S24\"",
    "\"S24P\"",
    "\"S32\"",
    "\"S32P\"",
    "\"U8\"",
    "\"U8P\"",
    "FLT",
    "FLTP",
    "S16",
    "S16P",
    "S24",
    "S24P",
    "S32",
    "S32P",
    "U8",
    "U8P"
  ],
  "AudioScheduledSourceNode": [
    "[[source started]]",
    "onended",
    "start()",
    "start(when)",
    "stop()",
    "stop(when)"
  ],
  "AudioScheduledSourceNode/start(when)": [
    "when"
  ],
  "AudioScheduledSourceNode/stop(when)": [
    "when"
  ],
  "AudioTimestamp": [
    "contextTime",
    "performanceTime"
  ],
  "AudioTrack": [
    "enabled",
    "id",
    "kind",
    "label",
    "language",
    "sourceBuffer"
  ],
  "AudioTrackList": [
    "addtrack",
    "change",
    "getTrackById(id)",
    "length",
    "onaddtrack",
    "onchange",
    "onremovetrack",
    "removetrack"
  ],
  "AudioWorkletGlobalScope": [
    "currentFrame",
    "currentTime",
    "registerProcessor(name, processorCtor)",
    "sampleRate"
  ],
  "AudioWorkletGlobalScope/registerProcessor(name, processorCtor)": [
    "name",
    "processorCtor"
  ],
  "AudioWorkletNode": [
    "AudioWorkletNode(context, name)",
    "AudioWorkletNode(context, name, options)",
    "constructor(context, name)",
    "constructor(context, name, options)",
    "onprocessorerror",
    "parameters",
    "port"
  ],
  "AudioWorkletNode/AudioWorkletNode(context, name)": [
    "context",
    "name",
    "options"
  ],
  "AudioWorkletNode/AudioWorkletNode(context, name, options)": [
    "context",
    "name",
    "options"
  ],
  "AudioWorkletNode/constructor()": [
    "context",
    "name",
    "options"
  ],
  "AudioWorkletNode/constructor(context, name)": [
    "context",
    "name",
    "options"
  ],
  "AudioWorkletNode/constructor(context, name, options)": [
    "context",
    "name",
    "options"
  ],
  "AudioWorkletNodeOptions": [
    "numberOfInputs",
    "numberOfOutputs",
    "outputChannelCount",
    "parameterData",
    "processorOptions"
  ],
  "AudioWorkletProcessCallback": [
    "inputs",
    "outputs",
    "parameters"
  ],
  "AudioWorkletProcessor": [
    "AudioWorkletProcessor()",
    "[[callable process]]",
    "[[node reference]]",
    "constructor()",
    "port"
  ],
  "AudioWorkletProcessorConstructor": [
    "options"
  ],
  "AuthenticationExtensionsClientInputs": [
    "appid",
    "appidExclude",
    "credProps",
    "largeBlob",
    "uvm"
  ],
  "AuthenticationExtensionsClientOutputs": [
    "appid",
    "appidExclude",
    "credProps",
    "largeBlob",
    "uvm"
  ],
  "AuthenticationExtensionsLargeBlobInputs": [
    "read",
    "support",
    "write"
  ],
  "AuthenticationExtensionsLargeBlobOutputs": [
    "blob",
    "supported",
    "written"
  ],
  "AuthenticatorAssertionResponse": [
    "authenticatorData",
    "signature",
    "userHandle"
  ],
  "AuthenticatorAttachment": [
    "\"cross-platform\"",
    "\"platform\"",
    "cross-platform",
    "platform"
  ],
  "AuthenticatorAttestationResponse": [
    "[[transports]]",
    "attestationObject",
    "getAuthenticatorData()",
    "getPublicKey()",
    "getPublicKeyAlgorithm()",
    "getTransports()"
  ],
  "AuthenticatorResponse": [
    "clientDataJSON"
  ],
  "AuthenticatorSelectionCriteria": [
    "authenticatorAttachment",
    "requireResidentKey",
    "residentKey",
    "userVerification"
  ],
  "AuthenticatorTransport": [
    "\"ble\"",
    "\"internal\"",
    "\"nfc\"",
    "\"usb\"",
    "ble",
    "internal",
    "nfc",
    "usb"
  ],
  "AutoKeyword": [
    "\"auto\"",
    "auto"
  ],
  "AutomationRate": [
    "\"a-rate\"",
    "\"k-rate\"",
    "a-rate",
    "k-rate"
  ],
  "BackgroundFetchEvent": [
    "BackgroundFetchEvent(type, init)",
    "background fetch",
    "constructor(type, init)",
    "registration"
  ],
  "BackgroundFetchEvent/BackgroundFetchEvent(type, init)": [
    "init",
    "type"
  ],
  "BackgroundFetchEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "BackgroundFetchEventInit": [
    "registration"
  ],
  "BackgroundFetchFailureReason": [
    "\"\"",
    "\"aborted\"",
    "\"bad-status\"",
    "\"download-total-exceeded\"",
    "\"fetch-error\"",
    "\"quota-exceeded\""
  ],
  "BackgroundFetchManager": [
    "backgroundfetchregistration instances",
    "fetch(id, requests)",
    "fetch(id, requests, options)",
    "get(id)",
    "getIds()",
    "service worker registration"
  ],
  "BackgroundFetchManager/fetch(id, requests)": [
    "id",
    "options",
    "requests"
  ],
  "BackgroundFetchManager/fetch(id, requests, options)": [
    "id",
    "options",
    "requests"
  ],
  "BackgroundFetchManager/get(id)": [
    "id"
  ],
  "BackgroundFetchOptions": [
    "downloadTotal"
  ],
  "BackgroundFetchRecord": [
    "request",
    "response promise",
    "responseReady"
  ],
  "BackgroundFetchRegistration": [
    "abort()",
    "background fetch",
    "download total",
    "downloadTotal",
    "downloaded",
    "failure reason",
    "failureReason",
    "id",
    "match(request)",
    "match(request, options)",
    "matchAll()",
    "matchAll(request)",
    "matchAll(request, options)",
    "onprogress",
    "progress",
    "records available flag",
    "recordsAvailable",
    "result",
    "upload total",
    "uploadTotal",
    "uploaded"
  ],
  "BackgroundFetchRegistration/match(request)": [
    "options",
    "request"
  ],
  "BackgroundFetchRegistration/match(request, options)": [
    "options",
    "request"
  ],
  "BackgroundFetchRegistration/matchAll()": [
    "options",
    "request"
  ],
  "BackgroundFetchRegistration/matchAll(request)": [
    "options",
    "request"
  ],
  "BackgroundFetchRegistration/matchAll(request, options)": [
    "options",
    "request"
  ],
  "BackgroundFetchResult": [
    "\"\"",
    "\"failure\"",
    "\"success\""
  ],
  "BackgroundFetchUIOptions": [
    "icons",
    "title"
  ],
  "BackgroundFetchUpdateUIEvent": [
    "BackgroundFetchUpdateUIEvent(type, init)",
    "constructor(type, init)",
    "ui updated flag",
    "updateUI()",
    "updateUI(options)"
  ],
  "BackgroundFetchUpdateUIEvent/BackgroundFetchUpdateUIEvent(type, init)": [
    "init",
    "type"
  ],
  "BackgroundFetchUpdateUIEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "BackgroundFetchUpdateUIEvent/updateUI()": [
    "options"
  ],
  "BackgroundFetchUpdateUIEvent/updateUI(options)": [
    "options"
  ],
  "BackgroundSyncOptions": [
    "minInterval"
  ],
  "BarProp": [
    "visible"
  ],
  "BarcodeDetector": [
    "BarcodeDetector()",
    "BarcodeDetector(barcodeDetectorOptions)",
    "constructor()",
    "constructor(barcodeDetectorOptions)",
    "detect(image)",
    "getSupportedFormats()"
  ],
  "BarcodeDetector/BarcodeDetector()": [
    "barcodeDetectorOptions"
  ],
  "BarcodeDetector/BarcodeDetector(barcodeDetectorOptions)": [
    "barcodeDetectorOptions"
  ],
  "BarcodeDetector/constructor()": [
    "barcodeDetectorOptions"
  ],
  "BarcodeDetector/constructor(barcodeDetectorOptions)": [
    "barcodeDetectorOptions"
  ],
  "BarcodeDetector/detect(image)": [
    "image"
  ],
  "BarcodeDetectorOptions": [
    "formats"
  ],
  "BarcodeFormat": [
    "\"aztec\"",
    "\"codabar\"",
    "\"code_128\"",
    "\"code_39\"",
    "\"code_93\"",
    "\"data_matrix\"",
    "\"ean_13\"",
    "\"ean_8\"",
    "\"itf\"",
    "\"pdf417\"",
    "\"qr_code\"",
    "\"unknown\"",
    "\"upc_a\"",
    "\"upc_e\"",
    "aztec",
    "codabar",
    "code_128",
    "code_39",
    "code_93",
    "data_matrix",
    "ean_13",
    "ean_8",
    "itf",
    "pdf417",
    "qr_code",
    "unknown",
    "upc_a",
    "upc_e"
  ],
  "BaseAudioContext": [
    "[[control thread state]]",
    "[[current frame]]",
    "[[pending promises]]",
    "[[rendering thread state]]",
    "associated task queue",
    "audioWorklet",
    "createAnalyser()",
    "createBiquadFilter()",
    "createBuffer(numberOfChannels, length, sampleRate)",
    "createBufferSource()",
    "createChannelMerger()",
    "createChannelMerger(numberOfInputs)",
    "createChannelSplitter()",
    "createChannelSplitter(numberOfOutputs)",
    "createConstantSource()",
    "createConvolver()",
    "createDelay()",
    "createDelay(maxDelayTime)",
    "createDynamicsCompressor()",
    "createGain()",
    "createIIRFilter(feedforward, feedback)",
    "createOscillator()",
    "createPanner()",
    "createPeriodicWave(real, imag)",
    "createPeriodicWave(real, imag, constraints)",
    "createScriptProcessor()",
    "createScriptProcessor(bufferSize)",
    "createScriptProcessor(bufferSize, numberOfInputChannels)",
    "createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels)",
    "createStereoPanner()",
    "createWaveShaper()",
    "currentTime",
    "decodeAudioData(audioData)",
    "decodeAudioData(audioData, successCallback)",
    "decodeAudioData(audioData, successCallback, errorCallback)",
    "decoding thread",
    "destination",
    "listener",
    "onstatechange",
    "sampleRate",
    "state"
  ],
  "BaseAudioContext/createBuffer()": [
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "BaseAudioContext/createBuffer(numberOfChannels, length, sampleRate)": [
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "BaseAudioContext/createChannelMerger(numberOfInputs)": [
    "numberOfInputs"
  ],
  "BaseAudioContext/createChannelSplitter(numberOfOutputs)": [
    "numberOfOutputs"
  ],
  "BaseAudioContext/createDelay(maxDelayTime)": [
    "maxDelayTime"
  ],
  "BaseAudioContext/createIIRFilter()": [
    "feedback",
    "feedforward"
  ],
  "BaseAudioContext/createIIRFilter(feedforward, feedback)": [
    "feedback",
    "feedforward"
  ],
  "BaseAudioContext/createPeriodicWave()": [
    "constraints",
    "imag",
    "real"
  ],
  "BaseAudioContext/createPeriodicWave(real, imag)": [
    "constraints",
    "imag",
    "real"
  ],
  "BaseAudioContext/createPeriodicWave(real, imag, constraints)": [
    "constraints",
    "imag",
    "real"
  ],
  "BaseAudioContext/createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels)": [
    "bufferSize",
    "numberOfInputChannels",
    "numberOfOutputChannels"
  ],
  "BaseAudioContext/decodeAudioData()": [
    "audioData",
    "errorCallback",
    "successCallback"
  ],
  "BaseAudioContext/decodeAudioData(audioData)": [
    "audioData",
    "errorCallback",
    "successCallback"
  ],
  "BaseAudioContext/decodeAudioData(audioData, successCallback)": [
    "audioData",
    "errorCallback",
    "successCallback"
  ],
  "BaseAudioContext/decodeAudioData(audioData, successCallback, errorCallback)": [
    "audioData",
    "errorCallback",
    "successCallback"
  ],
  "BaseComputedKeyframe": [
    "composite",
    "computedOffset",
    "easing",
    "offset"
  ],
  "BaseKeyframe": [
    "composite",
    "easing",
    "offset"
  ],
  "BasePropertyIndexedKeyframe": [
    "composite",
    "easing",
    "offset"
  ],
  "Baseline": [
    "name",
    "value"
  ],
  "BasicCardChangeDetails": [
    "billingAddress"
  ],
  "BasicCardErrors": [
    "billingAddress",
    "cardNumber",
    "cardSecurityCode",
    "cardholderName",
    "expiryMonth",
    "expiryYear"
  ],
  "BasicCardRequest": [
    "requestSecurityCode",
    "supportedNetworks"
  ],
  "BasicCardResponse": [
    "billingAddress",
    "cardNumber",
    "cardSecurityCode",
    "cardholderName",
    "expiryMonth",
    "expiryYear"
  ],
  "BatteryManager": [
    "charging",
    "chargingTime",
    "dischargingTime",
    "level",
    "onchargingchange",
    "onchargingtimechange",
    "ondischargingtimechange",
    "onlevelchange"
  ],
  "BeforeUnloadEvent": [
    "returnValue"
  ],
  "BidirectionalStream": [
    "[[Readable]]",
    "[[Writable]]",
    "[[readable]]",
    "[[transport]]",
    "[[writable]]",
    "create",
    "creating",
    "readable",
    "writable"
  ],
  "BidirectionalStreamsTransport": [
    "createBidirectionalStream()",
    "incomingBidirectionalStreams"
  ],
  "BinaryType": [
    "arraybuffer",
    "blob"
  ],
  "BiquadFilterNode": [
    "BiquadFilterNode(context)",
    "BiquadFilterNode(context, options)",
    "Q",
    "constructor(context)",
    "constructor(context, options)",
    "detune",
    "frequency",
    "gain",
    "getFrequencyResponse(frequencyHz, magResponse, phaseResponse)",
    "type"
  ],
  "BiquadFilterNode/BiquadFilterNode(context)": [
    "context",
    "options"
  ],
  "BiquadFilterNode/BiquadFilterNode(context, options)": [
    "context",
    "options"
  ],
  "BiquadFilterNode/constructor()": [
    "context",
    "options"
  ],
  "BiquadFilterNode/constructor(context)": [
    "context",
    "options"
  ],
  "BiquadFilterNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "BiquadFilterNode/getFrequencyResponse()": [
    "frequencyHz",
    "magResponse",
    "phaseResponse"
  ],
  "BiquadFilterNode/getFrequencyResponse(frequencyHz, magResponse, phaseResponse)": [
    "frequencyHz",
    "magResponse",
    "phaseResponse"
  ],
  "BiquadFilterOptions": [
    "Q",
    "detune",
    "frequency",
    "gain",
    "type"
  ],
  "BiquadFilterType": [
    "\"allpass\"",
    "\"bandpass\"",
    "\"highpass\"",
    "\"highshelf\"",
    "\"lowpass\"",
    "\"lowshelf\"",
    "\"notch\"",
    "\"peaking\"",
    "allpass",
    "bandpass",
    "highpass",
    "highshelf",
    "lowpass",
    "lowshelf",
    "notch",
    "peaking"
  ],
  "BitrateMode": [
    "\"constant\"",
    "\"variable\"",
    "constant",
    "variable"
  ],
  "Blob": [
    "Blob()",
    "Blob(blobParts)",
    "Blob(blobParts, options)",
    "arrayBuffer()",
    "constructor()",
    "constructor(blobParts)",
    "constructor(blobParts, options)",
    "get stream",
    "package data",
    "size",
    "slice()",
    "slice(start)",
    "slice(start, end)",
    "slice(start, end, contentType)",
    "slice(start, end, contentType), slice(start, end), slice(start), slice()",
    "snapshot state",
    "stream()",
    "text()",
    "type"
  ],
  "Blob/Blob()": [
    "options"
  ],
  "Blob/Blob(blobParts)": [
    "options"
  ],
  "Blob/Blob(blobParts, options)": [
    "blobParts",
    "options"
  ],
  "Blob/constructor()": [
    "options"
  ],
  "Blob/constructor(blobParts)": [
    "options"
  ],
  "Blob/constructor(blobParts, options)": [
    "options"
  ],
  "Blob/slice(start, end, contentType)": [
    "contentType",
    "end",
    "start"
  ],
  "BlobEvent": [
    "BlobEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "data",
    "timecode"
  ],
  "BlobEvent/BlobEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "BlobEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "BlobEventInit": [
    "data",
    "timecode"
  ],
  "BlobPropertyBag": [
    "endings",
    "type"
  ],
  "BlockFragmentationType": [
    "\"column\"",
    "\"none\"",
    "\"page\"",
    "\"region\"",
    "column",
    "none",
    "page",
    "region"
  ],
  "Bluetooth": [
    "[[attributeInstanceMap]]",
    "[[deviceInstanceMap]]",
    "[[referringDevice]]",
    "availabilitychanged",
    "getAvailability()",
    "getDevices()",
    "onavailabilitychanged",
    "referringDevice",
    "requestDevice()",
    "requestDevice(options)"
  ],
  "Bluetooth cache": [
    "bluetooth cache"
  ],
  "Bluetooth tree": [
    "bluetooth tree"
  ],
  "Bluetooth/requestDevice()": [
    "options"
  ],
  "Bluetooth/requestDevice(options)": [
    "options"
  ],
  "BluetoothAdvertisingEvent": [
    "BluetoothAdvertisingEvent(type, init)",
    "appearance",
    "constructor(type, init)",
    "device",
    "manufacturerData",
    "name",
    "rssi",
    "serviceData",
    "txPower",
    "uuids"
  ],
  "BluetoothAdvertisingEvent/BluetoothAdvertisingEvent(type, init)": [
    "init",
    "type"
  ],
  "BluetoothAdvertisingEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "BluetoothAdvertisingEventInit": [
    "appearance",
    "device",
    "manufacturerData",
    "name",
    "rssi",
    "serviceData",
    "txPower",
    "uuids"
  ],
  "BluetoothCharacteristicProperties": [
    "authenticatedSignedWrites",
    "broadcast",
    "indicate",
    "notify",
    "read",
    "reliableWrite",
    "writableAuxiliaries",
    "write",
    "writeWithoutResponse"
  ],
  "BluetoothDataFilterInit": [
    "canonicalizing",
    "dataPrefix",
    "mask",
    "matches"
  ],
  "BluetoothDevice": [
    "[[allowedManufacturerData]]",
    "[[allowedServices]]",
    "[[context]]",
    "[[gatt]]",
    "[[representedDevice]]",
    "[[watchAdvertisementsState]]",
    "advertisementreceived",
    "gatt",
    "gattserverdisconnected",
    "id",
    "name",
    "watchAdvertisements()",
    "watchAdvertisements(options)",
    "watchingAdvertisements"
  ],
  "BluetoothDevice/watchAdvertisements()": [
    "options"
  ],
  "BluetoothDevice/watchAdvertisements(options)": [
    "options"
  ],
  "BluetoothDeviceEventHandlers": [
    "onadvertisementreceived",
    "ongattserverdisconnected"
  ],
  "BluetoothLEScanFilterInit": [
    "canonicalizing",
    "manufacturerData",
    "name",
    "namePrefix",
    "serviceData",
    "services"
  ],
  "BluetoothManufacturerDataFilterInit": [
    "companyIdentifier"
  ],
  "BluetoothManufacturerDataMap": [
    "[[BackingMap]]"
  ],
  "BluetoothPermissionDescriptor": [
    "acceptAllDevices",
    "deviceId",
    "filters",
    "optionalManufacturerData",
    "optionalServices"
  ],
  "BluetoothPermissionResult": [
    "devices"
  ],
  "BluetoothPermissionStorage": [
    "allowedDevices"
  ],
  "BluetoothRemoteGATTCharacteristic": [
    "[[representedCharacteristic]]",
    "characteristicvaluechanged",
    "getDescriptor(descriptor)",
    "getDescriptors()",
    "getDescriptors(descriptor)",
    "properties",
    "readValue()",
    "service",
    "startNotifications()",
    "stopNotifications()",
    "uuid",
    "value",
    "writeValue(value)",
    "writeValueWithResponse(value)",
    "writeValueWithoutResponse(value)"
  ],
  "BluetoothRemoteGATTCharacteristic/getDescriptor(descriptor)": [
    "descriptor"
  ],
  "BluetoothRemoteGATTCharacteristic/getDescriptors()": [
    "descriptor"
  ],
  "BluetoothRemoteGATTCharacteristic/getDescriptors(descriptor)": [
    "descriptor"
  ],
  "BluetoothRemoteGATTCharacteristic/writeValue(value)": [
    "value"
  ],
  "BluetoothRemoteGATTCharacteristic/writeValueWithResponse(value)": [
    "value"
  ],
  "BluetoothRemoteGATTCharacteristic/writeValueWithoutResponse(value)": [
    "value"
  ],
  "BluetoothRemoteGATTDescriptor": [
    "[[representedDescriptor]]",
    "characteristic",
    "readValue()",
    "uuid",
    "value",
    "writeValue(value)"
  ],
  "BluetoothRemoteGATTDescriptor/writeValue(value)": [
    "value"
  ],
  "BluetoothRemoteGATTServer": [
    "[[activeAlgorithms]]",
    "connect()",
    "connected",
    "device",
    "disconnect()",
    "getPrimaryService(service)",
    "getPrimaryServices()",
    "getPrimaryServices(service)"
  ],
  "BluetoothRemoteGATTServer/getPrimaryService(service)": [
    "service"
  ],
  "BluetoothRemoteGATTServer/getPrimaryServices()": [
    "service"
  ],
  "BluetoothRemoteGATTServer/getPrimaryServices(service)": [
    "service"
  ],
  "BluetoothRemoteGATTService": [
    "[[representedService]]",
    "device",
    "getCharacteristic(characteristic)",
    "getCharacteristics()",
    "getCharacteristics(characteristic)",
    "getIncludedService(service)",
    "getIncludedServices()",
    "getIncludedServices(service)",
    "isPrimary",
    "serviceadded",
    "servicechanged",
    "serviceremoved",
    "uuid"
  ],
  "BluetoothRemoteGATTService/getCharacteristic(characteristic)": [
    "characteristic"
  ],
  "BluetoothRemoteGATTService/getCharacteristics()": [
    "characteristic"
  ],
  "BluetoothRemoteGATTService/getCharacteristics(characteristic)": [
    "characteristic"
  ],
  "BluetoothRemoteGATTService/getIncludedService(service)": [
    "service"
  ],
  "BluetoothRemoteGATTService/getIncludedServices()": [
    "service"
  ],
  "BluetoothRemoteGATTService/getIncludedServices(service)": [
    "service"
  ],
  "BluetoothServiceDataFilterInit": [
    "service"
  ],
  "BluetoothServiceDataMap": [
    "[[BackingMap]]"
  ],
  "BluetoothUUID": [
    "canonicalUUID(alias)",
    "getCharacteristic(name)",
    "getDescriptor(name)",
    "getService(name)"
  ],
  "BluetoothUUID/canonicalUUID(alias)": [
    "alias"
  ],
  "BluetoothUUID/getCharacteristic(name)": [
    "name"
  ],
  "BluetoothUUID/getDescriptor(name)": [
    "name"
  ],
  "BluetoothUUID/getService(name)": [
    "name"
  ],
  "Body": [
    "arrayBuffer()",
    "blob()",
    "body",
    "bodyUsed",
    "consume body",
    "formData()",
    "json()",
    "mime type",
    "package data",
    "text()",
    "unusable"
  ],
  "BodyInit": [
    "extract",
    "safely extract"
  ],
  "BodyInit/extract": [
    "keepalive"
  ],
  "BoxQuadOptions": [
    "box",
    "relativeTo"
  ],
  "BreakToken": [
    "childBreakTokens",
    "data"
  ],
  "BreakTokenOptions": [
    "childBreakTokens",
    "data"
  ],
  "BreakType": [
    "\"column\"",
    "\"line\"",
    "\"none\"",
    "\"page\"",
    "\"region\"",
    "column",
    "line",
    "none",
    "page",
    "region"
  ],
  "BroadcastChannel": [
    "close()",
    "message",
    "messageerror",
    "name",
    "onmessage",
    "onmessageerror",
    "postMessage(message)"
  ],
  "BufferSource": [
    "byte length",
    "detached",
    "underlying buffer"
  ],
  "ByteLengthQueuingStrategy": [
    "ByteLengthQueuingStrategy(init)",
    "[[highwatermark]]",
    "constructor(init)",
    "highWaterMark",
    "size"
  ],
  "ByteLengthQueuingStrategy/ByteLengthQueuingStrategy(init)": [
    "init"
  ],
  "ByteLengthQueuingStrategy/constructor(init)": [
    "init"
  ],
  "CSP list": [
    "intersection"
  ],
  "CSPViolationReportBody": [
    "blockedURL",
    "columnNumber",
    "disposition",
    "documentURL",
    "effectiveDirective",
    "lineNumber",
    "originalPolicy",
    "referrer",
    "sample",
    "sourceFile",
    "statusCode"
  ],
  "CSS": [
    "Hz(value)",
    "Q(value)",
    "ambiguous image url",
    "animationWorklet",
    "anonymous",
    "anonymous box",
    "apply to",
    "at-rule",
    "box",
    "box tree",
    "ch(value)",
    "cm(value)",
    "component value",
    "css ident",
    "css identifier",
    "declaration",
    "decode bytes",
    "deg(value)",
    "descriptor",
    "descriptor declarations",
    "dpcm(value)",
    "dpi(value)",
    "dppx(value)",
    "element",
    "element tree",
    "elementSources",
    "em(value)",
    "end",
    "environment variable",
    "escape(ident)",
    "ex(value)",
    "filter code points",
    "filtered code points",
    "fr(value)",
    "function",
    "grad(value)",
    "highlights",
    "ic(value)",
    "ident",
    "identifier",
    "in(value)",
    "internal representation",
    "kHz(value)",
    "keyword",
    "layoutWorklet",
    "lh(value)",
    "mm(value)",
    "ms(value)",
    "number(value)",
    "paintWorklet",
    "parent box",
    "parse",
    "parse a comma-separated list according to a css grammar",
    "parse a list",
    "parse something according to a css grammar",
    "parseCommaValueList(css)",
    "parseDeclaration(css)",
    "parseDeclaration(css, options)",
    "parseDeclarationList(css)",
    "parseDeclarationList(css, options)",
    "parseRule(css)",
    "parseRule(css, options)",
    "parseRuleList(css)",
    "parseRuleList(css, options)",
    "parseStylesheet(css)",
    "parseStylesheet(css, options)",
    "parseValue(css)",
    "parseValueList(css)",
    "parsing a list",
    "pc(value)",
    "percent(value)",
    "preserved tokens",
    "property",
    "property declarations",
    "pt(value)",
    "px(value)",
    "qualified rule",
    "rad(value)",
    "registerProperty(definition)",
    "reification",
    "reify",
    "rem(value)",
    "rlh(value)",
    "s(value)",
    "simple block",
    "start",
    "support",
    "support a css selector",
    "supported syntax component name",
    "supports(conditionText)",
    "supports(property, value)",
    "text node",
    "text run",
    "textual data types",
    "tokenization",
    "tokenize",
    "tree-scoped name",
    "tree-scoped reference",
    "turn(value)",
    "value definition syntax",
    "vb(value)",
    "vh(value)",
    "vi(value)",
    "vmax(value)",
    "vmin(value)",
    "vw(value)"
  ],
  "CSS counter": [
    "creator",
    "name",
    "reversed",
    "value"
  ],
  "CSS declaration": [
    "case-sensitive flag",
    "important flag",
    "property name",
    "value"
  ],
  "CSS/Hz(value)": [
    "value"
  ],
  "CSS/Q(value)": [
    "value"
  ],
  "CSS/ch(value)": [
    "value"
  ],
  "CSS/cm(value)": [
    "value"
  ],
  "CSS/deg(value)": [
    "value"
  ],
  "CSS/dpcm(value)": [
    "value"
  ],
  "CSS/dpi(value)": [
    "value"
  ],
  "CSS/dppx(value)": [
    "value"
  ],
  "CSS/em(value)": [
    "value"
  ],
  "CSS/escape(ident)": [
    "ident"
  ],
  "CSS/ex(value)": [
    "value"
  ],
  "CSS/fr(value)": [
    "value"
  ],
  "CSS/grad(value)": [
    "value"
  ],
  "CSS/ic(value)": [
    "value"
  ],
  "CSS/in(value)": [
    "value"
  ],
  "CSS/kHz(value)": [
    "value"
  ],
  "CSS/lh(value)": [
    "value"
  ],
  "CSS/mm(value)": [
    "value"
  ],
  "CSS/ms(value)": [
    "value"
  ],
  "CSS/number(value)": [
    "value"
  ],
  "CSS/parseCommaValueList(css)": [
    "css"
  ],
  "CSS/parseDeclaration(css)": [
    "css",
    "options"
  ],
  "CSS/parseDeclaration(css, options)": [
    "css",
    "options"
  ],
  "CSS/parseDeclarationList(css)": [
    "css",
    "options"
  ],
  "CSS/parseDeclarationList(css, options)": [
    "css",
    "options"
  ],
  "CSS/parseRule(css)": [
    "css",
    "options"
  ],
  "CSS/parseRule(css, options)": [
    "css",
    "options"
  ],
  "CSS/parseRuleList(css)": [
    "css",
    "options"
  ],
  "CSS/parseRuleList(css, options)": [
    "css",
    "options"
  ],
  "CSS/parseStylesheet(css)": [
    "css",
    "options"
  ],
  "CSS/parseStylesheet(css, options)": [
    "css",
    "options"
  ],
  "CSS/parseValue(css)": [
    "css"
  ],
  "CSS/parseValueList(css)": [
    "css"
  ],
  "CSS/pc(value)": [
    "value"
  ],
  "CSS/percent(value)": [
    "value"
  ],
  "CSS/pt(value)": [
    "value"
  ],
  "CSS/px(value)": [
    "value"
  ],
  "CSS/rad(value)": [
    "value"
  ],
  "CSS/registerProperty(definition)": [
    "definition"
  ],
  "CSS/rem(value)": [
    "value"
  ],
  "CSS/rlh(value)": [
    "value"
  ],
  "CSS/s(value)": [
    "value"
  ],
  "CSS/supports(conditionText)": [
    "conditionText"
  ],
  "CSS/supports(property, value)": [
    "property",
    "value"
  ],
  "CSS/turn(value)": [
    "value"
  ],
  "CSS/vb(value)": [
    "value"
  ],
  "CSS/vh(value)": [
    "value"
  ],
  "CSS/vi(value)": [
    "value"
  ],
  "CSS/vmax(value)": [
    "value"
  ],
  "CSS/vmin(value)": [
    "value"
  ],
  "CSS/vw(value)": [
    "value"
  ],
  "CSSAnimation": [
    "animationName"
  ],
  "CSSBoxType": [
    "\"border\"",
    "\"content\"",
    "\"margin\"",
    "\"padding\""
  ],
  "CSSColor": [
    "CSSColor(colorSpace, channels)",
    "CSSColor(colorSpace, channels, alpha)",
    "CSSColor(colorSpace, channels, optional alpha)",
    "alpha",
    "channels",
    "colorSpace",
    "colorspace",
    "constructor(colorSpace, channels)",
    "constructor(colorSpace, channels, alpha)"
  ],
  "CSSColor/CSSColor(colorSpace, channels)": [
    "alpha",
    "channels",
    "colorSpace"
  ],
  "CSSColor/CSSColor(colorSpace, channels, alpha)": [
    "alpha",
    "channels",
    "colorSpace"
  ],
  "CSSColor/constructor(colorSpace, channels)": [
    "alpha",
    "channels",
    "colorSpace"
  ],
  "CSSColor/constructor(colorSpace, channels, alpha)": [
    "alpha",
    "channels",
    "colorSpace"
  ],
  "CSSColorValue": [
    "colorSpace",
    "parse(cssText)",
    "to(colorSpace)"
  ],
  "CSSColorValue/parse(cssText)": [
    "cssText"
  ],
  "CSSColorValue/to(colorSpace)": [
    "colorSpace"
  ],
  "CSSConditionRule": [
    "conditionText"
  ],
  "CSSCounterStyleRule": [
    "additiveSymbols",
    "fallback",
    "name",
    "negative",
    "pad",
    "prefix",
    "range",
    "speakAs",
    "suffix",
    "symbols",
    "system"
  ],
  "CSSDeviceCMYK": [
    "CSSDeviceCMYK(c, m, y, k)",
    "CSSDeviceCMYK(c, m, y, k, alpha)",
    "CSSDeviceCMYK(c, m, y, k, optional alpha)",
    "alpha",
    "c",
    "constructor(c, m, y, k)",
    "constructor(c, m, y, k, alpha)",
    "k",
    "m",
    "y"
  ],
  "CSSDeviceCMYK/CSSDeviceCMYK(c, m, y, k)": [
    "alpha",
    "c",
    "k",
    "m",
    "y"
  ],
  "CSSDeviceCMYK/CSSDeviceCMYK(c, m, y, k, alpha)": [
    "alpha",
    "c",
    "k",
    "m",
    "y"
  ],
  "CSSDeviceCMYK/constructor(c, m, y, k)": [
    "alpha",
    "c",
    "k",
    "m",
    "y"
  ],
  "CSSDeviceCMYK/constructor(c, m, y, k, alpha)": [
    "alpha",
    "c",
    "k",
    "m",
    "y"
  ],
  "CSSFontFaceLoadEvent": [
    "fontfaces"
  ],
  "CSSFontFaceLoadEvent/CSSFontFaceLoadEvent()": [
    "eventInitDict",
    "type"
  ],
  "CSSFontFaceLoadEventInit": [
    "fontfaces"
  ],
  "CSSFontFaceRule": [
    "style"
  ],
  "CSSFontFeatureValuesMap": [
    "set(featureValueName, values)"
  ],
  "CSSFontFeatureValuesMap/set(featureValueName, values)": [
    "featureValueName",
    "values"
  ],
  "CSSFontFeatureValuesRule": [
    "annotation",
    "characterVariant",
    "fontFamily",
    "ornaments",
    "styleset",
    "stylistic",
    "swash"
  ],
  "CSSFontPaletteValuesRule": [
    "basePalette",
    "fontFamily"
  ],
  "CSSGroupingRule": [
    "cssRules",
    "deleteRule(index)",
    "insertRule(rule)",
    "insertRule(rule, index)",
    "media",
    "selectorText",
    "style"
  ],
  "CSSGroupingRule/deleteRule(index)": [
    "index"
  ],
  "CSSGroupingRule/insertRule(rule)": [
    "index",
    "rule"
  ],
  "CSSGroupingRule/insertRule(rule, index)": [
    "index",
    "rule"
  ],
  "CSSHSL": [
    "CSSHSL(h, s, l)",
    "CSSHSL(h, s, l, alpha)",
    "CSSHSL(h, s, l, optional alpha)",
    "alpha",
    "constructor(h, s, l)",
    "constructor(h, s, l, alpha)",
    "h",
    "l",
    "s"
  ],
  "CSSHSL/CSSHSL(h, s, l)": [
    "alpha",
    "h",
    "l",
    "s"
  ],
  "CSSHSL/CSSHSL(h, s, l, alpha)": [
    "alpha",
    "h",
    "l",
    "s"
  ],
  "CSSHSL/constructor(h, s, l)": [
    "alpha",
    "h",
    "l",
    "s"
  ],
  "CSSHSL/constructor(h, s, l, alpha)": [
    "alpha",
    "h",
    "l",
    "s"
  ],
  "CSSHWB": [
    "CSSHWB(h, w, b)",
    "CSSHWB(h, w, b, alpha)",
    "CSSHWB(h, w, b, optional alpha)",
    "alpha",
    "b",
    "constructor(h, w, b)",
    "constructor(h, w, b, alpha)",
    "h",
    "w"
  ],
  "CSSHWB/CSSHWB(h, w, b)": [
    "alpha",
    "b",
    "h",
    "w"
  ],
  "CSSHWB/CSSHWB(h, w, b, alpha)": [
    "alpha",
    "b",
    "h",
    "w"
  ],
  "CSSHWB/constructor(h, w, b)": [
    "alpha",
    "b",
    "h",
    "w"
  ],
  "CSSHWB/constructor(h, w, b, alpha)": [
    "alpha",
    "b",
    "h",
    "w"
  ],
  "CSSImportRule": [
    "href",
    "media",
    "styleSheet"
  ],
  "CSSKeyframeRule": [
    "keyText",
    "style"
  ],
  "CSSKeyframesRule": [
    "appendRule(rule)",
    "cssRules",
    "deleteRule(select)",
    "findRule(select)",
    "name"
  ],
  "CSSKeyframesRule/appendRule(rule)": [
    "rule"
  ],
  "CSSKeyframesRule/deleteRule(select)": [
    "select"
  ],
  "CSSKeyframesRule/findRule(select)": [
    "select"
  ],
  "CSSKeywordValue": [
    "CSSKeywordValue(value)",
    "constructor(value)",
    "value"
  ],
  "CSSKeywordValue/CSSKeywordValue(value)": [
    "value"
  ],
  "CSSKeywordValue/constructor(value)": [
    "value"
  ],
  "CSSLCH": [
    "CSSLCH(l, c, h)",
    "CSSLCH(l, c, h, alpha)",
    "CSSLCH(l, c, h, optional alpha)",
    "alpha",
    "c",
    "constructor(l, c, h)",
    "constructor(l, c, h, alpha)",
    "h",
    "l"
  ],
  "CSSLCH/CSSLCH(l, c, h)": [
    "alpha",
    "c",
    "h",
    "l"
  ],
  "CSSLCH/CSSLCH(l, c, h, alpha)": [
    "alpha",
    "c",
    "h",
    "l"
  ],
  "CSSLCH/constructor(l, c, h)": [
    "alpha",
    "c",
    "h",
    "l"
  ],
  "CSSLCH/constructor(l, c, h, alpha)": [
    "alpha",
    "c",
    "h",
    "l"
  ],
  "CSSLab": [
    "CSSLab(l, a, b)",
    "CSSLab(l, a, b, alpha)",
    "CSSLab(l, a, b, optional alpha)",
    "a",
    "alpha",
    "b",
    "constructor(l, a, b)",
    "constructor(l, a, b, alpha)",
    "l"
  ],
  "CSSLab/CSSLab(l, a, b)": [
    "a",
    "alpha",
    "b",
    "l"
  ],
  "CSSLab/CSSLab(l, a, b, alpha)": [
    "a",
    "alpha",
    "b",
    "l"
  ],
  "CSSLab/constructor(l, a, b)": [
    "a",
    "alpha",
    "b",
    "l"
  ],
  "CSSLab/constructor(l, a, b, alpha)": [
    "a",
    "alpha",
    "b",
    "l"
  ],
  "CSSMarginRule": [
    "name",
    "style"
  ],
  "CSSMath": [
    "invert",
    "invert a cssnumericvalue",
    "negate",
    "negate a cssnumericvalue"
  ],
  "CSSMathClamp": [
    "CSSMathClamp(lower, value, upper)",
    "constructor(lower, value, upper)",
    "lower",
    "operator",
    "upper",
    "value"
  ],
  "CSSMathClamp/CSSMathClamp(lower, value, upper)": [
    "lower",
    "upper",
    "value"
  ],
  "CSSMathClamp/constructor(lower, value, upper)": [
    "lower",
    "upper",
    "value"
  ],
  "CSSMathInvert": [
    "CSSMathInvert(arg)",
    "constructor(arg)",
    "operator",
    "value"
  ],
  "CSSMathInvert/CSSMathInvert(arg)": [
    "arg"
  ],
  "CSSMathInvert/constructor(arg)": [
    "arg"
  ],
  "CSSMathMax": [
    "CSSMathMax()",
    "CSSMathMax(...args)",
    "constructor()",
    "constructor(...args)",
    "operator",
    "values"
  ],
  "CSSMathMax/CSSMathMax()": [
    "args"
  ],
  "CSSMathMax/CSSMathMax(...args)": [
    "args"
  ],
  "CSSMathMax/CSSMathMax(args)": [
    "args"
  ],
  "CSSMathMax/constructor()": [
    "args"
  ],
  "CSSMathMax/constructor(...args)": [
    "args"
  ],
  "CSSMathMin": [
    "CSSMathMin()",
    "CSSMathMin(...args)",
    "constructor()",
    "constructor(...args)",
    "operator",
    "values"
  ],
  "CSSMathMin/CSSMathMin()": [
    "args"
  ],
  "CSSMathMin/CSSMathMin(...args)": [
    "args"
  ],
  "CSSMathMin/CSSMathMin(args)": [
    "args"
  ],
  "CSSMathMin/constructor()": [
    "args"
  ],
  "CSSMathMin/constructor(...args)": [
    "args"
  ],
  "CSSMathNegate": [
    "CSSMathNegate(arg)",
    "constructor(arg)",
    "operator",
    "value"
  ],
  "CSSMathNegate/CSSMathNegate(arg)": [
    "arg"
  ],
  "CSSMathNegate/constructor(arg)": [
    "arg"
  ],
  "CSSMathOperator": [
    "\"clamp\"",
    "\"invert\"",
    "\"max\"",
    "\"min\"",
    "\"negate\"",
    "\"product\"",
    "\"sum\"",
    "invert",
    "max",
    "min",
    "negate",
    "product",
    "sum"
  ],
  "CSSMathProduct": [
    "CSSMathProduct()",
    "CSSMathProduct(...args)",
    "constructor()",
    "constructor(...args)",
    "operator",
    "values"
  ],
  "CSSMathProduct/CSSMathProduct()": [
    "args"
  ],
  "CSSMathProduct/CSSMathProduct(...args)": [
    "args"
  ],
  "CSSMathProduct/CSSMathProduct(args)": [
    "args"
  ],
  "CSSMathProduct/constructor()": [
    "args"
  ],
  "CSSMathProduct/constructor(...args)": [
    "args"
  ],
  "CSSMathSum": [
    "CSSMathSum()",
    "CSSMathSum(...args)",
    "constructor()",
    "constructor(...args)",
    "operator",
    "values"
  ],
  "CSSMathSum/CSSMathSum()": [
    "args"
  ],
  "CSSMathSum/CSSMathSum(...args)": [
    "args"
  ],
  "CSSMathSum/CSSMathSum(args)": [
    "args"
  ],
  "CSSMathSum/constructor()": [
    "args"
  ],
  "CSSMathSum/constructor(...args)": [
    "args"
  ],
  "CSSMathValue": [
    "operator"
  ],
  "CSSMatrixComponent": [
    "CSSMatrixComponent(matrix)",
    "CSSMatrixComponent(matrix, options)",
    "constructor(matrix)",
    "constructor(matrix, options)",
    "matrix"
  ],
  "CSSMatrixComponent/CSSMatrixComponent(matrix)": [
    "matrix",
    "options"
  ],
  "CSSMatrixComponent/CSSMatrixComponent(matrix, options)": [
    "matrix",
    "options"
  ],
  "CSSMatrixComponent/constructor(matrix)": [
    "matrix",
    "options"
  ],
  "CSSMatrixComponent/constructor(matrix, options)": [
    "matrix",
    "options"
  ],
  "CSSMatrixComponentOptions": [
    "is2D"
  ],
  "CSSMediaRule": [
    "media"
  ],
  "CSSNamespaceRule": [
    "namespaceURI",
    "prefix"
  ],
  "CSSNestingRule": [
    "cssRules",
    "deleteRule(index)",
    "insertRule(rule)",
    "insertRule(rule, index)",
    "selectorText",
    "style"
  ],
  "CSSNestingRule/deleteRule(index)": [
    "index"
  ],
  "CSSNestingRule/insertRule(rule)": [
    "index",
    "rule"
  ],
  "CSSNestingRule/insertRule(rule, index)": [
    "index",
    "rule"
  ],
  "CSSNumericArray": [
    "indexed getter",
    "indexed property getter",
    "length"
  ],
  "CSSNumericArray/__getter__(index)": [
    "index"
  ],
  "CSSNumericBaseType": [
    "\"angle\"",
    "\"flex\"",
    "\"frequency\"",
    "\"length\"",
    "\"percent\"",
    "\"resolution\"",
    "\"time\"",
    "angle",
    "flex",
    "frequency",
    "length",
    "percent",
    "resolution",
    "time"
  ],
  "CSSNumericType": [
    "angle",
    "flex",
    "frequency",
    "length",
    "percent",
    "percentHint",
    "resolution",
    "time"
  ],
  "CSSNumericValue": [
    "add two types",
    "add()",
    "add(...values)",
    "base type",
    "create a type",
    "creating a type",
    "div()",
    "div(...values)",
    "equals()",
    "equals(...value)",
    "equals(...values)",
    "invert a type",
    "match",
    "max()",
    "max(...values)",
    "min()",
    "min(...values)",
    "mul()",
    "mul(...values)",
    "multiply two types",
    "parse(cssText)",
    "percent hint",
    "sub()",
    "sub(...values)",
    "sum value",
    "to(unit)",
    "toSum()",
    "toSum(...units)",
    "type",
    "type()"
  ],
  "CSSNumericValue/add()": [
    "values"
  ],
  "CSSNumericValue/add(...values)": [
    "values"
  ],
  "CSSNumericValue/div()": [
    "values"
  ],
  "CSSNumericValue/div(...values)": [
    "values"
  ],
  "CSSNumericValue/equals()": [
    "value"
  ],
  "CSSNumericValue/equals(...value)": [
    "value"
  ],
  "CSSNumericValue/max()": [
    "values"
  ],
  "CSSNumericValue/max(...values)": [
    "values"
  ],
  "CSSNumericValue/min()": [
    "values"
  ],
  "CSSNumericValue/min(...values)": [
    "values"
  ],
  "CSSNumericValue/mul()": [
    "values"
  ],
  "CSSNumericValue/mul(...values)": [
    "values"
  ],
  "CSSNumericValue/parse(cssText)": [
    "cssText"
  ],
  "CSSNumericValue/sub()": [
    "values"
  ],
  "CSSNumericValue/sub(...values)": [
    "values"
  ],
  "CSSNumericValue/to(unit)": [
    "unit"
  ],
  "CSSNumericValue/toSum()": [
    "units"
  ],
  "CSSNumericValue/toSum(...units)": [
    "units"
  ],
  "CSSPageRule": [
    "selectorText",
    "style"
  ],
  "CSSParserAtRule": [
    "CSSParserAtRule(name, prelude)",
    "CSSParserAtRule(name, prelude, body)",
    "body",
    "constructor(name, prelude)",
    "constructor(name, prelude, body)",
    "name",
    "prelude",
    "stringification behavior"
  ],
  "CSSParserAtRule/CSSParserAtRule(name, prelude)": [
    "body",
    "name",
    "prelude"
  ],
  "CSSParserAtRule/CSSParserAtRule(name, prelude, body)": [
    "body",
    "name",
    "prelude"
  ],
  "CSSParserAtRule/constructor(name, prelude)": [
    "body",
    "name",
    "prelude"
  ],
  "CSSParserAtRule/constructor(name, prelude, body)": [
    "body",
    "name",
    "prelude"
  ],
  "CSSParserBlock": [
    "CSSParserBlock(name, body)",
    "body",
    "constructor(name, body)",
    "name",
    "stringification behavior"
  ],
  "CSSParserBlock/CSSParserBlock(name, body)": [
    "body",
    "name"
  ],
  "CSSParserBlock/constructor(name, body)": [
    "body",
    "name"
  ],
  "CSSParserDeclaration": [
    "CSSParserDeclaration(name)",
    "CSSParserDeclaration(name, body)",
    "body",
    "constructor(name)",
    "constructor(name, body)",
    "name",
    "stringification behavior"
  ],
  "CSSParserDeclaration/CSSParserDeclaration(name)": [
    "body",
    "name"
  ],
  "CSSParserDeclaration/CSSParserDeclaration(name, body)": [
    "body",
    "name"
  ],
  "CSSParserDeclaration/constructor(name)": [
    "body",
    "name"
  ],
  "CSSParserDeclaration/constructor(name, body)": [
    "body",
    "name"
  ],
  "CSSParserFunction": [
    "CSSParserFunction(name, args)",
    "args",
    "constructor(name, args)",
    "name",
    "stringification behavior"
  ],
  "CSSParserFunction/CSSParserFunction(name, args)": [
    "args",
    "name"
  ],
  "CSSParserFunction/constructor(name, args)": [
    "args",
    "name"
  ],
  "CSSParserOptions": [
    "atRules"
  ],
  "CSSParserQualifiedRule": [
    "CSSParserQualifiedRule(prelude)",
    "CSSParserQualifiedRule(prelude, body)",
    "body",
    "constructor(prelude)",
    "constructor(prelude, body)",
    "prelude",
    "stringification behavior"
  ],
  "CSSParserQualifiedRule/CSSParserQualifiedRule(prelude)": [
    "body",
    "prelude"
  ],
  "CSSParserQualifiedRule/CSSParserQualifiedRule(prelude, body)": [
    "body",
    "prelude"
  ],
  "CSSParserQualifiedRule/constructor(prelude)": [
    "body",
    "prelude"
  ],
  "CSSParserQualifiedRule/constructor(prelude, body)": [
    "body",
    "prelude"
  ],
  "CSSPerspective": [
    "CSSPerspective(length)",
    "constructor(length)",
    "is2D",
    "length"
  ],
  "CSSPerspective/CSSPerspective(length)": [
    "length"
  ],
  "CSSPerspective/constructor(length)": [
    "length"
  ],
  "CSSPositionValue": [
    "CSSPositionValue(x, y)",
    "x",
    "y"
  ],
  "CSSPositionValue/CSSPositionValue(x, y)": [
    "x",
    "y"
  ],
  "CSSPropertyRule": [
    "inherits",
    "initialValue",
    "name",
    "syntax"
  ],
  "CSSPseudoElement": [
    "element",
    "type"
  ],
  "CSSRGB": [
    "CSSRGB(r, g, b)",
    "CSSRGB(r, g, b, alpha)",
    "CSSRGB(r, g, b, optional alpha)",
    "alpha",
    "b",
    "constructor(r, g, b)",
    "constructor(r, g, b, alpha)",
    "g",
    "r"
  ],
  "CSSRGB/CSSRGB(r, g, b)": [
    "alpha",
    "b",
    "g",
    "r"
  ],
  "CSSRGB/CSSRGB(r, g, b, alpha)": [
    "alpha",
    "b",
    "g",
    "r"
  ],
  "CSSRGB/constructor(r, g, b)": [
    "alpha",
    "b",
    "g",
    "r"
  ],
  "CSSRGB/constructor(r, g, b, alpha)": [
    "alpha",
    "b",
    "g",
    "r"
  ],
  "CSSRotate": [
    "CSSRotate(angle)",
    "CSSRotate(x, y, z, angle)",
    "angle",
    "constructor(angle)",
    "constructor(x, y, z, angle)",
    "x",
    "y",
    "z"
  ],
  "CSSRotate/CSSRotate(angle)": [
    "angle"
  ],
  "CSSRotate/CSSRotate(x, y, z, angle)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "CSSRotate/constructor(angle)": [
    "angle"
  ],
  "CSSRotate/constructor(x, y, z, angle)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "CSSRule": [
    "CHARSET_RULE",
    "COUNTER_STYLE_RULE",
    "FONT_FACE_RULE",
    "FONT_FEATURE_VALUES_RULE",
    "FONT_PALETTE_VALUES_RULE",
    "IMPORT_RULE",
    "KEYFRAMES_RULE",
    "KEYFRAME_RULE",
    "MARGIN_RULE",
    "MEDIA_RULE",
    "NAMESPACE_RULE",
    "PAGE_RULE",
    "STYLE_RULE",
    "SUPPORTS_RULE",
    "VIEWPORT_RULE",
    "child css rules",
    "cssText",
    "parent css rule",
    "parent css style sheet",
    "parentRule",
    "parentStyleSheet",
    "text",
    "type"
  ],
  "CSSRuleList": [
    "item(index)",
    "length"
  ],
  "CSSRuleList/item(index)": [
    "index"
  ],
  "CSSScale": [
    "CSSScale(x, y)",
    "CSSScale(x, y, z)",
    "constructor(x, y)",
    "constructor(x, y, z)",
    "x",
    "y",
    "z"
  ],
  "CSSScale/CSSScale(x, y)": [
    "x",
    "y",
    "z"
  ],
  "CSSScale/CSSScale(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "CSSScale/constructor(x, y)": [
    "x",
    "y",
    "z"
  ],
  "CSSScale/constructor(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "CSSScrollTimelineRule": [
    "name",
    "orientation",
    "scrollOffsets",
    "source"
  ],
  "CSSSkew": [
    "CSSSkew(ax, ay)",
    "ax",
    "ay",
    "constructor(ax, ay)",
    "is2D"
  ],
  "CSSSkew/CSSSkew(ax, ay)": [
    "ax",
    "ay"
  ],
  "CSSSkew/constructor(ax, ay)": [
    "ax",
    "ay"
  ],
  "CSSSkewX": [
    "CSSSkewX(ax)",
    "ax",
    "constructor(ax)",
    "is2D"
  ],
  "CSSSkewX/CSSSkewX(ax)": [
    "ax"
  ],
  "CSSSkewX/constructor(ax)": [
    "ax"
  ],
  "CSSSkewY": [
    "CSSSkewY(ay)",
    "ay",
    "constructor(ay)",
    "is2D"
  ],
  "CSSSkewY/CSSSkewY(ay)": [
    "ay"
  ],
  "CSSSkewY/constructor(ay)": [
    "ay"
  ],
  "CSSStyleDeclaration": [
    "_camel_cased_attribute",
    "_dashed_attribute",
    "_webkit_cased_attribute",
    "camel-cased attribute",
    "camel_cased_attribute",
    "computed flag",
    "cssFloat",
    "cssText",
    "dashed attribute",
    "dashed_attribute",
    "declarations",
    "getPropertyPriority(property)",
    "getPropertyValue(property)",
    "item(index)",
    "length",
    "owner node",
    "parent css rule",
    "parentRule",
    "readonly flag",
    "removeProperty(property)",
    "setProperty(property, value)",
    "setProperty(property, value, priority)",
    "setPropertyPriority(property, priority)",
    "setPropertyValue(property, value)",
    "updating flag",
    "webkit-cased attribute",
    "webkit_cased_attribute"
  ],
  "CSSStyleDeclaration/getPropertyPriority(property)": [
    "property"
  ],
  "CSSStyleDeclaration/getPropertyValue(property)": [
    "property"
  ],
  "CSSStyleDeclaration/item(index)": [
    "index"
  ],
  "CSSStyleDeclaration/removeProperty(property)": [
    "property"
  ],
  "CSSStyleDeclaration/setProperty(property, value)": [
    "priority",
    "property",
    "value"
  ],
  "CSSStyleDeclaration/setProperty(property, value, priority)": [
    "priority",
    "property",
    "value"
  ],
  "CSSStyleDeclaration/setPropertyPriority(property, priority)": [
    "priority",
    "property"
  ],
  "CSSStyleDeclaration/setPropertyValue(property, value)": [
    "property",
    "value"
  ],
  "CSSStyleRule": [
    "cssRules",
    "deleteRule(index)",
    "insertRule(rule)",
    "insertRule(rule, index)",
    "selectorText",
    "style",
    "styleMap"
  ],
  "CSSStyleRule/deleteRule(index)": [
    "index"
  ],
  "CSSStyleRule/insertRule(rule)": [
    "index",
    "rule"
  ],
  "CSSStyleRule/insertRule(rule, index)": [
    "index",
    "rule"
  ],
  "CSSStyleSheet": [
    "CSSStyleSheet()",
    "CSSStyleSheet(options)",
    "addRule()",
    "addRule(selector)",
    "addRule(selector, block, optionalIndex)",
    "addRule(selector, style)",
    "addRule(selector, style, index)",
    "alternate flag",
    "constructed flag",
    "constructor document",
    "constructor()",
    "constructor(options)",
    "css rules",
    "cssRules",
    "deleteRule(index)",
    "disabled flag",
    "disallow modification flag",
    "insertRule(rule)",
    "insertRule(rule, index)",
    "location",
    "media",
    "origin-clean flag",
    "owner css rule",
    "owner node",
    "ownerRule",
    "parent css style sheet",
    "referrer policy",
    "removeRule()",
    "removeRule(index)",
    "replace(text)",
    "replaceSync(text)",
    "rules",
    "stylesheet base url",
    "title",
    "type"
  ],
  "CSSStyleSheet/CSSStyleSheet()": [
    "options"
  ],
  "CSSStyleSheet/CSSStyleSheet(options)": [
    "options"
  ],
  "CSSStyleSheet/addRule()": [
    "index",
    "selector",
    "style"
  ],
  "CSSStyleSheet/addRule(selector)": [
    "index",
    "selector",
    "style"
  ],
  "CSSStyleSheet/addRule(selector, style)": [
    "index",
    "selector",
    "style"
  ],
  "CSSStyleSheet/addRule(selector, style, index)": [
    "index",
    "selector",
    "style"
  ],
  "CSSStyleSheet/constructor()": [
    "options"
  ],
  "CSSStyleSheet/constructor(options)": [
    "options"
  ],
  "CSSStyleSheet/deleteRule(index)": [
    "index"
  ],
  "CSSStyleSheet/insertRule(rule)": [
    "index",
    "rule"
  ],
  "CSSStyleSheet/insertRule(rule, index)": [
    "index",
    "rule"
  ],
  "CSSStyleSheet/removeRule()": [
    "index"
  ],
  "CSSStyleSheet/removeRule(index)": [
    "index"
  ],
  "CSSStyleSheet/replace(text)": [
    "text"
  ],
  "CSSStyleSheet/replaceSync(text)": [
    "text"
  ],
  "CSSStyleSheetInit": [
    "alternate",
    "baseURL",
    "disabled",
    "media",
    "title"
  ],
  "CSSStyleValue": [
    "[[associatedProperty]]",
    "match a grammar",
    "match the grammar",
    "parse(property, cssText)",
    "parseAll(property, cssText)",
    "stringification behavior"
  ],
  "CSSStyleValue/parse(property, cssText)": [
    "cssText",
    "property"
  ],
  "CSSStyleValue/parseAll(property, cssText)": [
    "cssText",
    "property"
  ],
  "CSSTransformComponent": [
    "is2D",
    "stringification behavior",
    "toMatrix()"
  ],
  "CSSTransformValue": [
    "CSSTransformValue(transforms)",
    "[[values]]",
    "constructor(transforms)",
    "is2D",
    "length",
    "toMatrix()"
  ],
  "CSSTransformValue/CSSTransformValue(transforms)": [
    "transforms"
  ],
  "CSSTransformValue/__getter__(index)": [
    "index"
  ],
  "CSSTransformValue/__setter__(index, val)": [
    "index",
    "val"
  ],
  "CSSTransformValue/constructor(transforms)": [
    "transforms"
  ],
  "CSSTransition": [
    "transitionProperty"
  ],
  "CSSTranslate": [
    "CSSTranslate(x, y)",
    "CSSTranslate(x, y, z)",
    "constructor(x, y)",
    "constructor(x, y, z)",
    "x",
    "y",
    "z"
  ],
  "CSSTranslate/CSSTranslate(x, y)": [
    "x",
    "y",
    "z"
  ],
  "CSSTranslate/CSSTranslate(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "CSSTranslate/constructor(x, y)": [
    "x",
    "y",
    "z"
  ],
  "CSSTranslate/constructor(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "CSSUnitValue": [
    "CSSUnitValue(value, unit)",
    "constructor(value, unit)",
    "unit",
    "value"
  ],
  "CSSUnitValue/CSSUnitValue(value, unit)": [
    "unit",
    "value"
  ],
  "CSSUnitValue/constructor(value, unit)": [
    "unit",
    "value"
  ],
  "CSSUnparsedValue": [
    "CSSUnparsedValue(members)",
    "[[tokens]]",
    "constructor(members)",
    "length"
  ],
  "CSSUnparsedValue/CSSUnparsedValue(members)": [
    "members"
  ],
  "CSSUnparsedValue/__getter__(index)": [
    "index"
  ],
  "CSSUnparsedValue/__setter__(index, val)": [
    "index",
    "val"
  ],
  "CSSUnparsedValue/constructor(members)": [
    "members"
  ],
  "CSSVariableReferenceValue": [
    "CSSVariableReferenceValue(variable)",
    "CSSVariableReferenceValue(variable, fallback)",
    "constructor(variable)",
    "constructor(variable, fallback)",
    "fallback",
    "variable"
  ],
  "CSSVariableReferenceValue/CSSVariableReferenceValue(variable)": [
    "fallback",
    "variable"
  ],
  "CSSVariableReferenceValue/CSSVariableReferenceValue(variable, fallback)": [
    "fallback",
    "variable"
  ],
  "CSSVariableReferenceValue/constructor(variable)": [
    "fallback",
    "variable"
  ],
  "CSSVariableReferenceValue/constructor(variable, fallback)": [
    "fallback",
    "variable"
  ],
  "CSSViewportRule": [
    "style"
  ],
  "Cache": [
    "add(request)",
    "addAll(requests)",
    "delete(request)",
    "delete(request, options)",
    "keys()",
    "keys(request)",
    "keys(request, options)",
    "match(request)",
    "match(request, options)",
    "matchAll()",
    "matchAll(request)",
    "matchAll(request, options)",
    "put(request, response)"
  ],
  "Cache/add(request)": [
    "request"
  ],
  "Cache/addAll(requests)": [
    "requests"
  ],
  "Cache/delete(request)": [
    "options",
    "request"
  ],
  "Cache/delete(request, options)": [
    "options",
    "request"
  ],
  "Cache/keys()": [
    "options",
    "request"
  ],
  "Cache/keys(request)": [
    "options",
    "request"
  ],
  "Cache/keys(request, options)": [
    "options",
    "request"
  ],
  "Cache/match(request)": [
    "options",
    "request"
  ],
  "Cache/match(request, options)": [
    "options",
    "request"
  ],
  "Cache/matchAll()": [
    "options",
    "request"
  ],
  "Cache/matchAll(request)": [
    "options",
    "request"
  ],
  "Cache/matchAll(request, options)": [
    "options",
    "request"
  ],
  "Cache/put(request, response)": [
    "request",
    "response"
  ],
  "CacheQueryOptions": [
    "ignoreMethod",
    "ignoreSearch",
    "ignoreVary"
  ],
  "CacheStorage": [
    "delete(cacheName)",
    "global object",
    "has(cacheName)",
    "keys()",
    "match(request)",
    "match(request, options)",
    "open(cacheName)"
  ],
  "CacheStorage/delete(cacheName)": [
    "cacheName"
  ],
  "CacheStorage/has(cacheName)": [
    "cacheName"
  ],
  "CacheStorage/match(request)": [
    "options",
    "request"
  ],
  "CacheStorage/match(request, options)": [
    "options",
    "request"
  ],
  "CacheStorage/open(cacheName)": [
    "cacheName"
  ],
  "CameraDevicePermissionDescriptor": [
    "panTiltZoom"
  ],
  "CanMakePaymentEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "methodData",
    "paymentRequestOrigin",
    "respondWith()",
    "respondWith(canMakePaymentResponse)",
    "topOrigin"
  ],
  "CanMakePaymentEventInit": [
    "methodData",
    "paymentRequestOrigin",
    "topOrigin"
  ],
  "CanPlayTypeResult": [
    "maybe",
    "probably"
  ],
  "CanvasCaptureMediaStreamTrack": [
    "canvas",
    "requestFrame()"
  ],
  "CanvasCompositing": [
    "globalAlpha",
    "globalCompositeOperation"
  ],
  "CanvasDirection": [
    "inherit",
    "ltr",
    "rtl"
  ],
  "CanvasDrawImage": [
    "drawImage"
  ],
  "CanvasDrawPath": [
    "beginPath()",
    "clip()",
    "fill()",
    "isPointInPath()",
    "isPointInStroke()",
    "stroke()"
  ],
  "CanvasFillRule": [
    "evenodd",
    "nonzero"
  ],
  "CanvasFillStrokeStyles": [
    "createConicGradient(startAngle, x, y)",
    "createLinearGradient(x0, y0, x1, y1)",
    "createPattern(image, repetition)",
    "createRadialGradient(x0, y0, r0, x1, y1, r1)",
    "fillStyle",
    "strokeStyle"
  ],
  "CanvasFilters": [
    "filter"
  ],
  "CanvasFontKerning": [
    "auto",
    "none",
    "normal"
  ],
  "CanvasFontStretch": [
    "condensed",
    "expanded",
    "extra-condensed",
    "extra-expanded",
    "normal",
    "semi-condensed",
    "semi-expanded",
    "ultra-condensed",
    "ultra-expanded"
  ],
  "CanvasFontVariantCaps": [
    "all-petite-caps",
    "all-small-caps",
    "normal",
    "petite-caps",
    "small-caps",
    "titling-caps",
    "unicase"
  ],
  "CanvasGradient": [
    "addColorStop(offset, color)"
  ],
  "CanvasImageData": [
    "createImageData(imagedata)",
    "createImageData(sw, sh, settings)",
    "getImageData(sx, sy, sw, sh, settings)",
    "putImageData()"
  ],
  "CanvasImageSmoothing": [
    "imageSmoothingEnabled",
    "imageSmoothingQuality"
  ],
  "CanvasPath": [
    "arc(x, y, radius, startAngle, endAngle, counterclockwise)",
    "arcTo(x1, y1, x2, y2, radius)",
    "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)",
    "closePath()",
    "ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise)",
    "lineTo(x, y)",
    "moveTo(x, y)",
    "quadraticCurveTo(cpx, cpy, x, y)",
    "rect(x, y, w, h)"
  ],
  "CanvasPathDrawingStyles": [
    "getLineDash()",
    "lineCap",
    "lineDashOffset",
    "lineJoin",
    "lineWidth",
    "miterLimit",
    "setLineDash(segments)"
  ],
  "CanvasPattern": [
    "setTransform(transform)"
  ],
  "CanvasRect": [
    "clearRect(x, y, w, h)",
    "fillRect(x, y, w, h)",
    "strokeRect(x, y, w, h)"
  ],
  "CanvasRenderingContext2D": [
    "canvas",
    "getContextAttributes()"
  ],
  "CanvasRenderingContext2DSettings": [
    "alpha",
    "colorSpace",
    "desynchronized",
    "willReadFrequently"
  ],
  "CanvasShadowStyles": [
    "shadowBlur",
    "shadowColor",
    "shadowOffsetX",
    "shadowOffsetY"
  ],
  "CanvasState": [
    "reset()",
    "restore()",
    "save()"
  ],
  "CanvasText": [
    "fillText(text, x, y, maxWidth)",
    "measureText(text)",
    "strokeText(text, x, y, maxWidth)"
  ],
  "CanvasTextAlign": [
    "center",
    "end",
    "left",
    "right",
    "start"
  ],
  "CanvasTextBaseline": [
    "alphabetic",
    "bottom",
    "hanging",
    "ideographic",
    "middle",
    "top"
  ],
  "CanvasTextDrawingStyles": [
    "direction",
    "font",
    "fontKerning",
    "fontStretch",
    "fontVariantCaps",
    "textAlign",
    "textBaseline",
    "textLetterSpacing",
    "textRendering",
    "textWordSpacing"
  ],
  "CanvasTextRendering": [
    "auto",
    "geometricPrecision",
    "optimizeLegibility",
    "optimizeSpeed"
  ],
  "CanvasTransform": [
    "getTransform()",
    "resetTransform()",
    "rotate(angle)",
    "scale(x, y)",
    "setTransform(a, b, c, d, e, f)",
    "setTransform(transform)",
    "transform(a, b, c, d, e, f)",
    "translate(x, y)"
  ],
  "CanvasUserInterface": [
    "drawFocusIfNeeded(element)",
    "scrollPathIntoView()"
  ],
  "CaretPosition": [
    "getClientRect()",
    "offset",
    "offsetNode"
  ],
  "ChannelCountMode": [
    "\"clamped-max\"",
    "\"explicit\"",
    "\"max\"",
    "clamped-max",
    "explicit",
    "max"
  ],
  "ChannelInterpretation": [
    "\"discrete\"",
    "\"speakers\"",
    "discrete",
    "speakers"
  ],
  "ChannelMergerNode": [
    "ChannelMergerNode(context)",
    "ChannelMergerNode(context, options)",
    "constructor(context)",
    "constructor(context, options)"
  ],
  "ChannelMergerNode/ChannelMergerNode(context)": [
    "context",
    "options"
  ],
  "ChannelMergerNode/ChannelMergerNode(context, options)": [
    "context",
    "options"
  ],
  "ChannelMergerNode/constructor": [
    "ChannelMergerNode(context, options)"
  ],
  "ChannelMergerNode/constructor()": [
    "context",
    "options"
  ],
  "ChannelMergerNode/constructor(context)": [
    "context",
    "options"
  ],
  "ChannelMergerNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "ChannelMergerOptions": [
    "numberOfInputs"
  ],
  "ChannelSplitterNode": [
    "ChannelSplitterNode(context)",
    "ChannelSplitterNode(context, options)",
    "constructor(context)",
    "constructor(context, options)"
  ],
  "ChannelSplitterNode/ChannelSplitterNode(context)": [
    "context",
    "options"
  ],
  "ChannelSplitterNode/ChannelSplitterNode(context, options)": [
    "context",
    "options"
  ],
  "ChannelSplitterNode/constructor()": [
    "ChannelSplitterNode(context, options)",
    "context",
    "options"
  ],
  "ChannelSplitterNode/constructor(context)": [
    "context",
    "options"
  ],
  "ChannelSplitterNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "ChannelSplitterOptions": [
    "numberOfOutputs"
  ],
  "CharacterData": [
    "appendData(data)",
    "data",
    "deleteData(offset, count)",
    "insertData(offset, data)",
    "length",
    "replaceData(offset, count, data)",
    "substring data",
    "substringData(offset, count)"
  ],
  "CharacterData/appendData(data)": [
    "data"
  ],
  "CharacterData/deleteData(offset, count)": [
    "count",
    "offset"
  ],
  "CharacterData/insertData(offset, data)": [
    "data",
    "offset"
  ],
  "CharacterData/replaceData(offset, count, data)": [
    "count",
    "data",
    "offset"
  ],
  "CharacterData/substringData(offset, count)": [
    "count",
    "offset"
  ],
  "CharacteristicEventHandlers": [
    "oncharacteristicvaluechanged"
  ],
  "ChildBreakToken": [
    "[[unique id]]",
    "breakType",
    "child"
  ],
  "ChildDisplayType": [
    "\"block\"",
    "\"normal\"",
    "block",
    "normal"
  ],
  "ChildNode": [
    "after()",
    "after(...nodes)",
    "before()",
    "before(...nodes)",
    "remove()",
    "replaceWith()",
    "replaceWith(...nodes)"
  ],
  "ChildNode/after()": [
    "nodes"
  ],
  "ChildNode/after(...nodes)": [
    "nodes"
  ],
  "ChildNode/before()": [
    "nodes"
  ],
  "ChildNode/before(...nodes)": [
    "nodes"
  ],
  "ChildNode/replaceWith()": [
    "nodes"
  ],
  "ChildNode/replaceWith(...nodes)": [
    "nodes"
  ],
  "Client": [
    "frame type",
    "frameType",
    "id",
    "lifecycle state",
    "lifecycleState",
    "postMessage(message)",
    "postMessage(message, options)",
    "postMessage(message, transfer)",
    "service worker client",
    "type",
    "url"
  ],
  "Client/postMessage(message)": [
    "message",
    "options",
    "transfer"
  ],
  "Client/postMessage(message, options)": [
    "message",
    "options"
  ],
  "Client/postMessage(message, transfer)": [
    "message",
    "transfer"
  ],
  "ClientLifecycleState": [
    "\"active\"",
    "\"frozen\""
  ],
  "ClientQueryOptions": [
    "includeUncontrolled",
    "type"
  ],
  "ClientType": [
    "\"all\"",
    "\"sharedworker\"",
    "\"window\"",
    "\"worker\""
  ],
  "Clients": [
    "claim()",
    "get(id)",
    "matchAll()",
    "matchAll(options)",
    "openWindow(url)"
  ],
  "Clients/get(id)": [
    "id"
  ],
  "Clients/matchAll()": [
    "options"
  ],
  "Clients/matchAll(options)": [
    "options"
  ],
  "Clients/openWindow(url)": [
    "url"
  ],
  "Clipboard": [
    "read()",
    "readText()",
    "write(data)",
    "writeText(data)"
  ],
  "Clipboard/write(data)": [
    "data"
  ],
  "Clipboard/writeText(data)": [
    "data"
  ],
  "ClipboardEvent": [
    "ClipboardEvent(type)",
    "ClipboardEvent(type, eventInitDict)",
    "clipboardData",
    "clipboarddata",
    "constructor(type)",
    "constructor(type, eventInitDict)"
  ],
  "ClipboardEvent/ClipboardEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "ClipboardEvent/ClipboardEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ClipboardEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "ClipboardEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ClipboardEventInit": [
    "clipboardData",
    "clipboarddata"
  ],
  "ClipboardItem": [
    "ClipboardItem(items)",
    "ClipboardItem(items, options)",
    "constructor(items)",
    "constructor(items, options)",
    "createDelayed(items)",
    "createDelayed(items, options)",
    "delayed",
    "getType(type)",
    "lastModified",
    "presentationStyle",
    "types"
  ],
  "ClipboardItem/ClipboardItem(items)": [
    "items",
    "options"
  ],
  "ClipboardItem/ClipboardItem(items, options)": [
    "items",
    "options"
  ],
  "ClipboardItem/constructor(items)": [
    "items",
    "options"
  ],
  "ClipboardItem/constructor(items, options)": [
    "items",
    "options"
  ],
  "ClipboardItem/createDelayed(items)": [
    "items",
    "options"
  ],
  "ClipboardItem/createDelayed(items, options)": [
    "items",
    "options"
  ],
  "ClipboardItem/getType(type)": [
    "type"
  ],
  "ClipboardItemOptions": [
    "presentationStyle"
  ],
  "ClipboardPermissionDescriptor": [
    "allowWithoutGesture"
  ],
  "CloseEvent": [
    "code",
    "reason",
    "wasClean"
  ],
  "CodecState": [
    "\"closed\"",
    "\"configured\"",
    "\"unconfigured\"",
    "closed",
    "configured",
    "unconfigured"
  ],
  "CollectedClientData": [
    "challenge",
    "crossOrigin",
    "hash of the serialized client data",
    "json-compatible serialization of client data",
    "origin",
    "tokenBinding",
    "type"
  ],
  "ColorGamut": [
    "\"p3\"",
    "\"rec2020\"",
    "\"srgb\"",
    "p3",
    "rec2020",
    "srgb"
  ],
  "ColorSpaceConversion": [
    "default",
    "none"
  ],
  "Comment": [
    "Comment()",
    "Comment(data)",
    "constructor()",
    "constructor(data)",
    "substring data"
  ],
  "Comment/Comment()": [
    "data"
  ],
  "Comment/Comment(data)": [
    "data"
  ],
  "Comment/constructor()": [
    "data"
  ],
  "Comment/constructor(data)": [
    "data"
  ],
  "CompositeOperation": [
    "\"accumulate\"",
    "\"add\"",
    "\"replace\"",
    "accumulate",
    "add",
    "replace"
  ],
  "CompositeOperationOrAuto": [
    "\"accumulate\"",
    "\"add\"",
    "\"auto\"",
    "\"replace\"",
    "accumulate",
    "add",
    "auto",
    "replace"
  ],
  "CompositionEvent": [
    "CompositionEvent(type)",
    "CompositionEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data",
    "initCompositionEvent()",
    "initCompositionEvent(typeArg)",
    "initCompositionEvent(typeArg, bubblesArg)",
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg)",
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg)",
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg, dataArg)"
  ],
  "CompositionEvent/CompositionEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "CompositionEvent/CompositionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CompositionEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "CompositionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CompositionEvent/initCompositionEvent(typeArg)": [
    "bubblesArg",
    "cancelableArg",
    "dataArg",
    "typeArg",
    "viewArg"
  ],
  "CompositionEvent/initCompositionEvent(typeArg, bubblesArg)": [
    "bubblesArg",
    "cancelableArg",
    "dataArg",
    "typeArg",
    "viewArg"
  ],
  "CompositionEvent/initCompositionEvent(typeArg, bubblesArg, cancelableArg)": [
    "bubblesArg",
    "cancelableArg",
    "dataArg",
    "typeArg",
    "viewArg"
  ],
  "CompositionEvent/initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg)": [
    "bubblesArg",
    "cancelableArg",
    "dataArg",
    "typeArg",
    "viewArg"
  ],
  "CompositionEvent/initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg, dataArg)": [
    "bubblesArg",
    "cancelableArg",
    "dataArg",
    "typeArg",
    "viewArg"
  ],
  "CompositionEventInit": [
    "data"
  ],
  "CompressionStream": [
    "CompressionStream(format)",
    "constructor(format)",
    "context",
    "format"
  ],
  "CompressionStream/CompressionStream(format)": [
    "format"
  ],
  "CompressionStream/constructor(format)": [
    "format"
  ],
  "ComputedEffectTiming": [
    "activeDuration",
    "currentIteration",
    "endTime",
    "localTime",
    "progress",
    "startTime"
  ],
  "ConnectionType": [
    "bluetooth",
    "cellular",
    "ethernet",
    "mixed",
    "none",
    "other",
    "unknown",
    "wifi",
    "wimax"
  ],
  "ConstantSourceNode": [
    "ConstantSourceNode(context)",
    "ConstantSourceNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "offset"
  ],
  "ConstantSourceNode/ConstantSourceNode(context)": [
    "context",
    "options"
  ],
  "ConstantSourceNode/ConstantSourceNode(context, options)": [
    "context",
    "options"
  ],
  "ConstantSourceNode/constructor()": [
    "ConstantSourceNode(context, options)",
    "context",
    "options"
  ],
  "ConstantSourceNode/constructor(context)": [
    "context",
    "options"
  ],
  "ConstantSourceNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "ConstantSourceOptions": [
    "offset"
  ],
  "ConstrainBooleanParameters": [
    "exact",
    "ideal"
  ],
  "ConstrainDOMStringParameters": [
    "exact",
    "ideal"
  ],
  "ConstrainDoubleRange": [
    "exact",
    "ideal"
  ],
  "ConstrainPoint2DParameters": [
    "exact",
    "ideal"
  ],
  "ConstrainULongRange": [
    "exact",
    "ideal"
  ],
  "ConstrainablePattern": [
    "applyConstraints()",
    "applyConstraints(constraints)",
    "getCapabilities()",
    "getConstraints()",
    "getSettings()"
  ],
  "Constraints": [
    "advanced"
  ],
  "ContactInfo": [
    "address",
    "email",
    "icon",
    "name",
    "tel"
  ],
  "ContactProperty": [
    "\"address\"",
    "\"email\"",
    "\"icon\"",
    "\"name\"",
    "\"tel\""
  ],
  "ContactsManager": [
    "getProperties()",
    "launching a contact picker",
    "select(properties)",
    "select(properties, options)"
  ],
  "ContactsManager/select(properties)": [
    "options",
    "properties"
  ],
  "ContactsManager/select(properties, options)": [
    "options",
    "properties"
  ],
  "ContactsSelectOptions": [
    "multiple"
  ],
  "ContentCategory": [
    "\"\"",
    "\"article\"",
    "\"audio\"",
    "\"homepage\"",
    "\"video\""
  ],
  "ContentDescription": [
    "category",
    "description",
    "icons",
    "id",
    "title",
    "url"
  ],
  "ContentIndex": [
    "add(description)",
    "delete(id)",
    "getAll()",
    "service worker registration"
  ],
  "ContentIndex/add(description)": [
    "description"
  ],
  "ContentIndex/delete(id)": [
    "id"
  ],
  "ContentIndexEvent": [
    "ContentIndexEvent(type, init)",
    "constructor(type, init)",
    "id"
  ],
  "ContentIndexEvent/ContentIndexEvent(type, init)": [
    "init",
    "type"
  ],
  "ContentIndexEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "ContentIndexEventInit": [
    "id"
  ],
  "ConvertCoordinateOptions": [
    "fromBox",
    "toBox"
  ],
  "ConvolverNode": [
    "ConvolverNode(context)",
    "ConvolverNode(context, options)",
    "buffer",
    "buffer attribute",
    "constructor(context)",
    "constructor(context, options)",
    "normalize"
  ],
  "ConvolverNode/ConvolverNode(context)": [
    "context",
    "options"
  ],
  "ConvolverNode/ConvolverNode(context, options)": [
    "context",
    "options"
  ],
  "ConvolverNode/constructor()": [
    "ConvolverNode(context, options)",
    "context",
    "options"
  ],
  "ConvolverNode/constructor(context)": [
    "context",
    "options"
  ],
  "ConvolverNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "ConvolverOptions": [
    "buffer",
    "disableNormalization"
  ],
  "CookieChangeEvent": [
    "CookieChangeEvent(type)",
    "CookieChangeEvent(type, eventInitDict)",
    "changed",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "deleted"
  ],
  "CookieChangeEvent/CookieChangeEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "CookieChangeEvent/CookieChangeEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CookieChangeEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "CookieChangeEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CookieChangeEventInit": [
    "changed",
    "deleted"
  ],
  "CookieInit": [
    "domain",
    "expires",
    "name",
    "path",
    "sameSite",
    "value"
  ],
  "CookieListItem": [
    "domain",
    "expires",
    "name",
    "path",
    "sameSite",
    "secure",
    "value"
  ],
  "CookieSameSite": [
    "\"lax\"",
    "\"none\"",
    "\"strict\""
  ],
  "CookieStore": [
    "delete(name)",
    "delete(options)",
    "get()",
    "get(name)",
    "get(options)",
    "getAll()",
    "getAll(name)",
    "getAll(options)",
    "onchange",
    "set(name, value)",
    "set(options)"
  ],
  "CookieStore/delete(name)": [
    "name"
  ],
  "CookieStore/delete(options)": [
    "options"
  ],
  "CookieStore/get()": [
    "options"
  ],
  "CookieStore/get(name)": [
    "name"
  ],
  "CookieStore/get(options)": [
    "options"
  ],
  "CookieStore/getAll()": [
    "options"
  ],
  "CookieStore/getAll(name)": [
    "name"
  ],
  "CookieStore/getAll(options)": [
    "options"
  ],
  "CookieStore/set(name, value)": [
    "name",
    "value"
  ],
  "CookieStore/set(options)": [
    "options"
  ],
  "CookieStoreDeleteOptions": [
    "domain",
    "name",
    "path"
  ],
  "CookieStoreGetOptions": [
    "name",
    "url"
  ],
  "CookieStoreManager": [
    "getSubscriptions()",
    "registration",
    "subscribe(subscriptions)",
    "unsubscribe(subscriptions)"
  ],
  "CookieStoreManager/subscribe(subscriptions)": [
    "subscriptions"
  ],
  "CookieStoreManager/unsubscribe(subscriptions)": [
    "subscriptions"
  ],
  "CountQueuingStrategy": [
    "CountQueuingStrategy(init)",
    "[[highwatermark]]",
    "constructor(init)",
    "highWaterMark",
    "size"
  ],
  "CountQueuingStrategy/CountQueuingStrategy(init)": [
    "init"
  ],
  "CountQueuingStrategy/constructor(init)": [
    "init"
  ],
  "CrashReportBody": [
    "crashId",
    "crashid",
    "reason",
    "toJSON()"
  ],
  "CreateHTMLCallback": [
    "arguments",
    "input"
  ],
  "CreateScriptCallback": [
    "arguments",
    "input"
  ],
  "CreateScriptURLCallback": [
    "arguments",
    "input"
  ],
  "Credential": [
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)",
    "[[Create]](origin, options, sameOriginWithAncestors)",
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)",
    "[[Store]](credential, sameOriginWithAncestors)",
    "[[discovery]]",
    "[[origin]]",
    "[[type]]",
    "credential type",
    "id",
    "origin bound",
    "type"
  ],
  "Credential/[[discovery]]": [
    "credential store",
    "remote"
  ],
  "Credential/[[type]]": [
    "password"
  ],
  "CredentialCreationOptions": [
    "federated",
    "password",
    "publicKey",
    "signal"
  ],
  "CredentialData": [
    "id"
  ],
  "CredentialMediationRequirement": [
    "\"optional\"",
    "\"required\"",
    "\"silent\"",
    "optional",
    "required",
    "silent"
  ],
  "CredentialPropertiesOutput": [
    "client-side discoverable credential property",
    "resident key credential property",
    "rk"
  ],
  "CredentialRequestOptions": [
    "federated",
    "matchable a priori",
    "mediation",
    "otp",
    "password",
    "publicKey",
    "relevant credential interface objects",
    "signal"
  ],
  "CredentialUserData": [
    "iconURL",
    "name"
  ],
  "CredentialsContainer": [
    "create()",
    "create(options)",
    "get()",
    "get(options)",
    "preventSilentAccess()",
    "store()",
    "store(credential)"
  ],
  "CredentialsContainer/create(options)": [
    "options"
  ],
  "CredentialsContainer/get(options)": [
    "options"
  ],
  "CredentialsContainer/store(credential)": [
    "credential"
  ],
  "Crypto": [
    "getRandomValues()",
    "getRandomValues(array)",
    "randomUUID()",
    "subtle"
  ],
  "CryptoKey": [
    "algorithm",
    "extractable",
    "type",
    "usages"
  ],
  "CryptoKeyPair": [
    "privateKey",
    "publicKey"
  ],
  "CursorCaptureConstraint": [
    "always",
    "motion",
    "never"
  ],
  "CustomElementRegistry": [
    "define(name, constructor, options)",
    "get(name)",
    "upgrade(root)",
    "whenDefined(name)"
  ],
  "CustomEvent": [
    "CustomEvent(type)",
    "CustomEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "detail",
    "initCustomEvent(type)",
    "initCustomEvent(type, bubbles)",
    "initCustomEvent(type, bubbles, cancelable)",
    "initCustomEvent(type, bubbles, cancelable, detail)"
  ],
  "CustomEvent/CustomEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "CustomEvent/CustomEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CustomEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "CustomEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "CustomEvent/initCustomEvent(type)": [
    "bubbles",
    "cancelable",
    "detail",
    "type"
  ],
  "CustomEvent/initCustomEvent(type, bubbles)": [
    "bubbles",
    "cancelable",
    "detail",
    "type"
  ],
  "CustomEvent/initCustomEvent(type, bubbles, cancelable)": [
    "bubbles",
    "cancelable",
    "detail",
    "type"
  ],
  "CustomEvent/initCustomEvent(type, bubbles, cancelable, detail)": [
    "bubbles",
    "cancelable",
    "detail",
    "type"
  ],
  "CustomEventInit": [
    "detail"
  ],
  "CustomStateSet": [
    "add",
    "add(value)"
  ],
  "CustomStateSet/add(value)": [
    "value"
  ],
  "DOMException": [
    "ABORT_ERR",
    "DATA_CLONE_ERR",
    "DOMException()",
    "DOMException(message)",
    "DOMException(message, name)",
    "DOMSTRING_SIZE_ERR",
    "HIERARCHY_REQUEST_ERR",
    "INDEX_SIZE_ERR",
    "INUSE_ATTRIBUTE_ERR",
    "INVALID_ACCESS_ERR",
    "INVALID_CHARACTER_ERR",
    "INVALID_MODIFICATION_ERR",
    "INVALID_NODE_TYPE_ERR",
    "INVALID_STATE_ERR",
    "NAMESPACE_ERR",
    "NETWORK_ERR",
    "NOT_FOUND_ERR",
    "NOT_SUPPORTED_ERR",
    "NO_DATA_ALLOWED_ERR",
    "NO_MODIFICATION_ALLOWED_ERR",
    "QUOTA_EXCEEDED_ERR",
    "SECURITY_ERR",
    "SYNTAX_ERR",
    "TIMEOUT_ERR",
    "TYPE_MISMATCH_ERR",
    "URL_MISMATCH_ERR",
    "VALIDATION_ERR",
    "WRONG_DOCUMENT_ERR",
    "code",
    "constructor()",
    "constructor(message)",
    "constructor(message, name)",
    "message",
    "name"
  ],
  "DOMException/DOMException()": [
    "message",
    "name"
  ],
  "DOMException/DOMException(message)": [
    "message",
    "name"
  ],
  "DOMException/DOMException(message, name)": [
    "message",
    "name"
  ],
  "DOMException/constructor()": [
    "message",
    "name"
  ],
  "DOMException/constructor(message)": [
    "message",
    "name"
  ],
  "DOMException/constructor(message, name)": [
    "message",
    "name"
  ],
  "DOMImplementation": [
    "createDocument(namespace, qualifiedName)",
    "createDocument(namespace, qualifiedName, doctype)",
    "createDocumentType(qualifiedName, publicId, systemId)",
    "createHTMLDocument()",
    "createHTMLDocument(title)",
    "getFeature()",
    "hasFeature()"
  ],
  "DOMImplementation/createDocument(namespace, qualifiedName)": [
    "doctype",
    "namespace",
    "qualifiedName"
  ],
  "DOMImplementation/createDocument(namespace, qualifiedName, doctype)": [
    "doctype",
    "namespace",
    "qualifiedName"
  ],
  "DOMImplementation/createDocumentType(qualifiedName, publicId, systemId)": [
    "publicId",
    "qualifiedName",
    "systemId"
  ],
  "DOMImplementation/createHTMLDocument()": [
    "title"
  ],
  "DOMImplementation/createHTMLDocument(title)": [
    "title"
  ],
  "DOMMatrix": [
    "DOMMatrix()",
    "DOMMatrix(init)",
    "a",
    "b",
    "c",
    "constructor()",
    "constructor(init)",
    "d",
    "e",
    "f",
    "fromFloat32Array(array32)",
    "fromFloat64Array(array64)",
    "fromMatrix()",
    "fromMatrix(other)",
    "invertSelf()",
    "m11",
    "m12",
    "m13",
    "m14",
    "m21",
    "m22",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "m41",
    "m42",
    "m43",
    "m44",
    "multiplySelf()",
    "multiplySelf(other)",
    "preMultiplySelf()",
    "preMultiplySelf(other)",
    "rotateAxisAngleSelf()",
    "rotateAxisAngleSelf(x)",
    "rotateAxisAngleSelf(x, y)",
    "rotateAxisAngleSelf(x, y, z)",
    "rotateAxisAngleSelf(x, y, z, angle)",
    "rotateFromVectorSelf()",
    "rotateFromVectorSelf(x)",
    "rotateFromVectorSelf(x, y)",
    "rotateSelf()",
    "rotateSelf(rotX)",
    "rotateSelf(rotX, rotY)",
    "rotateSelf(rotX, rotY, rotZ)",
    "scale3dSelf()",
    "scale3dSelf(scale)",
    "scale3dSelf(scale, originX)",
    "scale3dSelf(scale, originX, originY)",
    "scale3dSelf(scale, originX, originY, originZ)",
    "scaleSelf()",
    "scaleSelf(scaleX)",
    "scaleSelf(scaleX, scaleY)",
    "scaleSelf(scaleX, scaleY, scaleZ)",
    "scaleSelf(scaleX, scaleY, scaleZ, originX)",
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY)",
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ)",
    "setMatrixValue(transformList)",
    "skewXSelf()",
    "skewXSelf(sx)",
    "skewYSelf()",
    "skewYSelf(sy)",
    "translateSelf()",
    "translateSelf(tx)",
    "translateSelf(tx, ty)",
    "translateSelf(tx, ty, tz)"
  ],
  "DOMMatrix/DOMMatrix()": [
    "init"
  ],
  "DOMMatrix/DOMMatrix(init)": [
    "init"
  ],
  "DOMMatrix/constructor()": [
    "init"
  ],
  "DOMMatrix/constructor(init)": [
    "init"
  ],
  "DOMMatrix/fromFloat32Array(array32)": [
    "array32"
  ],
  "DOMMatrix/fromFloat64Array(array64)": [
    "array64"
  ],
  "DOMMatrix/fromMatrix()": [
    "other"
  ],
  "DOMMatrix/fromMatrix(other)": [
    "other"
  ],
  "DOMMatrix/multiplySelf()": [
    "other"
  ],
  "DOMMatrix/multiplySelf(other)": [
    "other"
  ],
  "DOMMatrix/preMultiplySelf()": [
    "other"
  ],
  "DOMMatrix/preMultiplySelf(other)": [
    "other"
  ],
  "DOMMatrix/rotateAxisAngleSelf()": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrix/rotateAxisAngleSelf(x)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrix/rotateAxisAngleSelf(x, y)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrix/rotateAxisAngleSelf(x, y, z)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrix/rotateAxisAngleSelf(x, y, z, angle)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrix/rotateFromVectorSelf()": [
    "x",
    "y"
  ],
  "DOMMatrix/rotateFromVectorSelf(x)": [
    "x",
    "y"
  ],
  "DOMMatrix/rotateFromVectorSelf(x, y)": [
    "x",
    "y"
  ],
  "DOMMatrix/rotateSelf()": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrix/rotateSelf(rotX)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrix/rotateSelf(rotX, rotY)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrix/rotateSelf(rotX, rotY, rotZ)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrix/scale3dSelf()": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrix/scale3dSelf(scale)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrix/scale3dSelf(scale, originX)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrix/scale3dSelf(scale, originX, originY)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrix/scale3dSelf(scale, originX, originY, originZ)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrix/scaleSelf()": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX, scaleY)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX, scaleY, scaleZ)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX, scaleY, scaleZ, originX)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX, scaleY, scaleZ, originX, originY)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrix/setMatrixValue(transformList)": [
    "transformList"
  ],
  "DOMMatrix/skewXSelf()": [
    "sx"
  ],
  "DOMMatrix/skewXSelf(sx)": [
    "sx"
  ],
  "DOMMatrix/skewYSelf()": [
    "sy"
  ],
  "DOMMatrix/skewYSelf(sy)": [
    "sy"
  ],
  "DOMMatrix/translateSelf()": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrix/translateSelf(tx)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrix/translateSelf(tx, ty)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrix/translateSelf(tx, ty, tz)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrix2DInit": [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "m11",
    "m12",
    "m21",
    "m22",
    "m41",
    "m42"
  ],
  "DOMMatrixInit": [
    "is2D",
    "m13",
    "m14",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "m43",
    "m44"
  ],
  "DOMMatrixReadOnly": [
    "DOMMatrixReadOnly()",
    "DOMMatrixReadOnly(init)",
    "a",
    "b",
    "c",
    "constructor()",
    "constructor(init)",
    "d",
    "e",
    "f",
    "flipX()",
    "flipY()",
    "fromFloat32Array(array32)",
    "fromFloat64Array(array64)",
    "fromMatrix()",
    "fromMatrix(other)",
    "inverse()",
    "is2D",
    "isIdentity",
    "m11",
    "m12",
    "m13",
    "m14",
    "m21",
    "m22",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "m41",
    "m42",
    "m43",
    "m44",
    "multiply()",
    "multiply(other)",
    "rotate()",
    "rotate(rotX)",
    "rotate(rotX, rotY)",
    "rotate(rotX, rotY, rotZ)",
    "rotateAxisAngle()",
    "rotateAxisAngle(x)",
    "rotateAxisAngle(x, y)",
    "rotateAxisAngle(x, y, z)",
    "rotateAxisAngle(x, y, z, angle)",
    "rotateFromVector()",
    "rotateFromVector(x)",
    "rotateFromVector(x, y)",
    "scale()",
    "scale(scaleX)",
    "scale(scaleX, scaleY)",
    "scale(scaleX, scaleY, scaleZ)",
    "scale(scaleX, scaleY, scaleZ, originX)",
    "scale(scaleX, scaleY, scaleZ, originX, originY)",
    "scale(scaleX, scaleY, scaleZ, originX, originY, originZ)",
    "scale3d()",
    "scale3d(scale)",
    "scale3d(scale, originX)",
    "scale3d(scale, originX, originY)",
    "scale3d(scale, originX, originY, originZ)",
    "scaleNonUniform()",
    "scaleNonUniform(scaleX)",
    "scaleNonUniform(scaleX, scaleY)",
    "skewX()",
    "skewX(sx)",
    "skewY()",
    "skewY(sy)",
    "stringification behavior",
    "stringificationbehavior",
    "toFloat32Array()",
    "toFloat64Array()",
    "toJSON()",
    "transformPoint()",
    "transformPoint(point)",
    "translate()",
    "translate(tx)",
    "translate(tx, ty)",
    "translate(tx, ty, tz)"
  ],
  "DOMMatrixReadOnly/DOMMatrixReadOnly()": [
    "init"
  ],
  "DOMMatrixReadOnly/DOMMatrixReadOnly(init)": [
    "init"
  ],
  "DOMMatrixReadOnly/constructor()": [
    "init"
  ],
  "DOMMatrixReadOnly/constructor(init)": [
    "init"
  ],
  "DOMMatrixReadOnly/fromFloat32Array(array32)": [
    "array32"
  ],
  "DOMMatrixReadOnly/fromFloat64Array(array64)": [
    "array64"
  ],
  "DOMMatrixReadOnly/fromMatrix()": [
    "other"
  ],
  "DOMMatrixReadOnly/fromMatrix(other)": [
    "other"
  ],
  "DOMMatrixReadOnly/multiply()": [
    "other"
  ],
  "DOMMatrixReadOnly/multiply(other)": [
    "other"
  ],
  "DOMMatrixReadOnly/rotate()": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrixReadOnly/rotate(rotX)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrixReadOnly/rotate(rotX, rotY)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrixReadOnly/rotate(rotX, rotY, rotZ)": [
    "rotX",
    "rotY",
    "rotZ"
  ],
  "DOMMatrixReadOnly/rotateAxisAngle()": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrixReadOnly/rotateAxisAngle(x)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrixReadOnly/rotateAxisAngle(x, y)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrixReadOnly/rotateAxisAngle(x, y, z)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrixReadOnly/rotateAxisAngle(x, y, z, angle)": [
    "angle",
    "x",
    "y",
    "z"
  ],
  "DOMMatrixReadOnly/rotateFromVector()": [
    "x",
    "y"
  ],
  "DOMMatrixReadOnly/rotateFromVector(x)": [
    "x",
    "y"
  ],
  "DOMMatrixReadOnly/rotateFromVector(x, y)": [
    "x",
    "y"
  ],
  "DOMMatrixReadOnly/scale()": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX, scaleY)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX, scaleY, scaleZ)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX, scaleY, scaleZ, originX)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX, scaleY, scaleZ, originX, originY)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale(scaleX, scaleY, scaleZ, originX, originY, originZ)": [
    "originX",
    "originY",
    "originZ",
    "scaleX",
    "scaleY",
    "scaleZ"
  ],
  "DOMMatrixReadOnly/scale3d()": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrixReadOnly/scale3d(scale)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrixReadOnly/scale3d(scale, originX)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrixReadOnly/scale3d(scale, originX, originY)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrixReadOnly/scale3d(scale, originX, originY, originZ)": [
    "originX",
    "originY",
    "originZ",
    "scale"
  ],
  "DOMMatrixReadOnly/scaleNonUniform()": [
    "scaleX",
    "scaleY"
  ],
  "DOMMatrixReadOnly/scaleNonUniform(scaleX)": [
    "scaleX",
    "scaleY"
  ],
  "DOMMatrixReadOnly/scaleNonUniform(scaleX, scaleY)": [
    "scaleX",
    "scaleY"
  ],
  "DOMMatrixReadOnly/skewX()": [
    "sx"
  ],
  "DOMMatrixReadOnly/skewX(sx)": [
    "sx"
  ],
  "DOMMatrixReadOnly/skewY()": [
    "sy"
  ],
  "DOMMatrixReadOnly/skewY(sy)": [
    "sy"
  ],
  "DOMMatrixReadOnly/transformPoint()": [
    "point"
  ],
  "DOMMatrixReadOnly/transformPoint(point)": [
    "point"
  ],
  "DOMMatrixReadOnly/translate()": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrixReadOnly/translate(tx)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrixReadOnly/translate(tx, ty)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMMatrixReadOnly/translate(tx, ty, tz)": [
    "tx",
    "ty",
    "tz"
  ],
  "DOMParser": [
    "DOMParser()",
    "constructor()",
    "parseFromString(str, type)",
    "parseFromString(string, type)"
  ],
  "DOMParser/parseFromString(str, type)": [
    "str",
    "type"
  ],
  "DOMParserSupportedType": [
    "text/html\""
  ],
  "DOMPoint": [
    "DOMPoint()",
    "DOMPoint(x)",
    "DOMPoint(x, y)",
    "DOMPoint(x, y, z)",
    "DOMPoint(x, y, z, w)",
    "constructor()",
    "constructor(x)",
    "constructor(x, y)",
    "constructor(x, y, z)",
    "constructor(x, y, z, w)",
    "fromPoint()",
    "fromPoint(other)",
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/DOMPoint()": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/DOMPoint(x)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/DOMPoint(x, y)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/DOMPoint(x, y, z)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/DOMPoint(x, y, z, w)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/constructor()": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/constructor(x)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/constructor(x, y)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/constructor(x, y, z)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/constructor(x, y, z, w)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPoint/fromPoint()": [
    "other"
  ],
  "DOMPoint/fromPoint(other)": [
    "other"
  ],
  "DOMPointInit": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly": [
    "DOMPointReadOnly()",
    "DOMPointReadOnly(x)",
    "DOMPointReadOnly(x, y)",
    "DOMPointReadOnly(x, y, z)",
    "DOMPointReadOnly(x, y, z, w)",
    "constructor()",
    "constructor(x)",
    "constructor(x, y)",
    "constructor(x, y, z)",
    "constructor(x, y, z, w)",
    "fromPoint()",
    "fromPoint(other)",
    "matrixTransform()",
    "matrixTransform(matrix)",
    "toJSON()",
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/DOMPointReadOnly()": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/DOMPointReadOnly(x)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/DOMPointReadOnly(x, y)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/DOMPointReadOnly(x, y, z)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/DOMPointReadOnly(x, y, z, w)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/constructor()": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/constructor(x)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/constructor(x, y)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/constructor(x, y, z)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/constructor(x, y, z, w)": [
    "w",
    "x",
    "y",
    "z"
  ],
  "DOMPointReadOnly/fromPoint()": [
    "other"
  ],
  "DOMPointReadOnly/fromPoint(other)": [
    "other"
  ],
  "DOMPointReadOnly/matrixTransform()": [
    "matrix"
  ],
  "DOMPointReadOnly/matrixTransform(matrix)": [
    "matrix"
  ],
  "DOMQuad": [
    "DOMQuad()",
    "DOMQuad(p1)",
    "DOMQuad(p1, p2)",
    "DOMQuad(p1, p2, p3)",
    "DOMQuad(p1, p2, p3, p4)",
    "constructor()",
    "constructor(p1)",
    "constructor(p1, p2)",
    "constructor(p1, p2, p3)",
    "constructor(p1, p2, p3, p4)",
    "fromQuad()",
    "fromQuad(other)",
    "fromRect()",
    "fromRect(other)",
    "getBounds()",
    "p1",
    "p2",
    "p3",
    "p4",
    "toJSON()"
  ],
  "DOMQuad/DOMQuad()": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/DOMQuad(p1)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/DOMQuad(p1, p2)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/DOMQuad(p1, p2, p3)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/DOMQuad(p1, p2, p3, p4)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/constructor()": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/constructor(p1)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/constructor(p1, p2)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/constructor(p1, p2, p3)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/constructor(p1, p2, p3, p4)": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMQuad/fromQuad()": [
    "other"
  ],
  "DOMQuad/fromQuad(other)": [
    "other"
  ],
  "DOMQuad/fromRect()": [
    "other"
  ],
  "DOMQuad/fromRect(other)": [
    "other"
  ],
  "DOMQuadInit": [
    "p1",
    "p2",
    "p3",
    "p4"
  ],
  "DOMRect": [
    "DOMRect()",
    "DOMRect(x)",
    "DOMRect(x, y)",
    "DOMRect(x, y, width)",
    "DOMRect(x, y, width, height)",
    "constructor()",
    "constructor(x)",
    "constructor(x, y)",
    "constructor(x, y, width)",
    "constructor(x, y, width, height)",
    "fromRect()",
    "fromRect(other)",
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/DOMRect()": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/DOMRect(x)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/DOMRect(x, y)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/DOMRect(x, y, width)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/DOMRect(x, y, width, height)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/constructor()": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/constructor(x)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/constructor(x, y)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/constructor(x, y, width)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/constructor(x, y, width, height)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRect/fromRect()": [
    "other"
  ],
  "DOMRect/fromRect(other)": [
    "other"
  ],
  "DOMRectInit": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectList": [
    "item(index)",
    "length"
  ],
  "DOMRectList/item(index)": [
    "index"
  ],
  "DOMRectReadOnly": [
    "DOMRectReadOnly()",
    "DOMRectReadOnly(x)",
    "DOMRectReadOnly(x, y)",
    "DOMRectReadOnly(x, y, width)",
    "DOMRectReadOnly(x, y, width, height)",
    "bottom",
    "constructor()",
    "constructor(x)",
    "constructor(x, y)",
    "constructor(x, y, width)",
    "constructor(x, y, width, height)",
    "fromRect()",
    "fromRect(other)",
    "height",
    "left",
    "right",
    "toJSON()",
    "top",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly DOMRect": [
    "bottom",
    "height",
    "left",
    "right",
    "top",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/DOMRectReadOnly()": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/DOMRectReadOnly(x)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/DOMRectReadOnly(x, y)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/DOMRectReadOnly(x, y, width)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/DOMRectReadOnly(x, y, width, height)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/constructor()": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/constructor(x)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/constructor(x, y)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/constructor(x, y, width)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/constructor(x, y, width, height)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "DOMRectReadOnly/fromRect()": [
    "other"
  ],
  "DOMRectReadOnly/fromRect(other)": [
    "other"
  ],
  "DOMStringList": [
    "contains(string)",
    "item(index)",
    "length"
  ],
  "DOMTokenList": [
    "add()",
    "add(...tokens)",
    "add(tokens)",
    "contains(token)",
    "item(index)",
    "length",
    "remove()",
    "remove(...tokens)",
    "remove(tokens)",
    "replace(token, newToken)",
    "serialize steps",
    "stringification behavior",
    "supports(token)",
    "toggle(token)",
    "toggle(token, force)",
    "token set",
    "update steps",
    "validation steps",
    "value"
  ],
  "DOMTokenList/add()": [
    "tokens"
  ],
  "DOMTokenList/add(...tokens)": [
    "tokens"
  ],
  "DOMTokenList/contains(token)": [
    "token"
  ],
  "DOMTokenList/item(index)": [
    "index"
  ],
  "DOMTokenList/remove()": [
    "tokens"
  ],
  "DOMTokenList/remove(...tokens)": [
    "tokens"
  ],
  "DOMTokenList/replace(token, newToken)": [
    "newToken",
    "token"
  ],
  "DOMTokenList/supports(token)": [
    "token"
  ],
  "DOMTokenList/toggle(token)": [
    "force",
    "token"
  ],
  "DOMTokenList/toggle(token, force)": [
    "force",
    "token"
  ],
  "DataCue": [
    "DataCue(startTime, endTime, value)",
    "DataCue(startTime, endTime, value, type)",
    "constructor(startTime, endTime, value)",
    "constructor(startTime, endTime, value, type)",
    "type",
    "value"
  ],
  "DataCue/DataCue(startTime, endTime, value)": [
    "endTime",
    "startTime",
    "type",
    "value"
  ],
  "DataCue/DataCue(startTime, endTime, value, type)": [
    "endTime",
    "startTime",
    "type",
    "value"
  ],
  "DataCue/constructor(startTime, endTime, value)": [
    "endTime",
    "startTime",
    "type",
    "value"
  ],
  "DataCue/constructor(startTime, endTime, value, type)": [
    "endTime",
    "startTime",
    "type",
    "value"
  ],
  "DataTransfer": [
    "DataTransfer()",
    "clearData(format)",
    "dropEffect",
    "effectAllowed",
    "files",
    "getData(format)",
    "items",
    "setData(format, data)",
    "setDragImage(image, x, y)",
    "types"
  ],
  "DataTransferItem": [
    "getAsFile()",
    "getAsFileSystemHandle()",
    "getAsString(callback)",
    "kind",
    "type",
    "webkitGetAsEntry()"
  ],
  "DataTransferItemList": [
    "add()",
    "clear()",
    "length",
    "remove(index)"
  ],
  "DatagramDuplexStream": [
    "[[incomingdatagramsexpirationduration]]",
    "[[incomingdatagramshighwatermark]]",
    "[[incomingdatagramspullpromise]]",
    "[[incomingdatagramsqueue]]",
    "[[outgoingdatagramsexpirationduration]]",
    "[[outgoingdatagramshighwatermark]]",
    "[[outgoingdatagramsqueue]]",
    "[[readable]]",
    "[[writable]]",
    "create",
    "creating",
    "incomingHighWaterMark",
    "incomingMaxAge",
    "outgoingHighWaterMark",
    "outgoingMaxAge",
    "readable",
    "writable"
  ],
  "DatagramDuplexStream/create": [
    "readable",
    "writable"
  ],
  "DatagramTransport": [
    "datagrams",
    "maxDatagramSize"
  ],
  "DecodeErrorCallback": [
    "error"
  ],
  "DecodeSuccessCallback": [
    "decodedData"
  ],
  "DecompressionStream": [
    "DecompressionStream(format)",
    "constructor(format)",
    "context",
    "format"
  ],
  "DecompressionStream/DecompressionStream(format)": [
    "format"
  ],
  "DecompressionStream/constructor(format)": [
    "format"
  ],
  "DedicatedWorkerGlobalScope": [
    "close()",
    "message",
    "messageerror",
    "name",
    "onmessage",
    "onmessageerror",
    "onrtctransform",
    "owning document",
    "postMessage(message, options)",
    "postMessage(message, transfer)"
  ],
  "DelayNode": [
    "DelayNode(context)",
    "DelayNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "delayTime"
  ],
  "DelayNode/DelayNode(context)": [
    "context",
    "options"
  ],
  "DelayNode/DelayNode(context, options)": [
    "context",
    "options"
  ],
  "DelayNode/constructor()": [
    "DelayNode(context, options)",
    "context",
    "options"
  ],
  "DelayNode/constructor(context)": [
    "context",
    "options"
  ],
  "DelayNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "DelayOptions": [
    "delayTime",
    "maxDelayTime"
  ],
  "DeprecationReportBody": [
    "anticipatedRemoval",
    "anticipatedremoval",
    "columnNumber",
    "columnnumber",
    "id",
    "lineNumber",
    "linenumber",
    "message",
    "sourceFile",
    "sourcefile",
    "toJSON()"
  ],
  "DetectedBarcode": [
    "boundingBox",
    "cornerPoints",
    "format",
    "rawValue"
  ],
  "DetectedFace": [
    "boundingBox",
    "landmarks"
  ],
  "DetectedText": [
    "boundingBox",
    "cornerPoints",
    "rawValue"
  ],
  "DeviceMotionEvent": [
    "DeviceMotionEvent(type)",
    "DeviceMotionEvent(type, eventInitDict)",
    "acceleration",
    "accelerationIncludingGravity",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "interval",
    "requestPermission()",
    "rotationRate"
  ],
  "DeviceMotionEvent/DeviceMotionEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "DeviceMotionEvent/DeviceMotionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "DeviceMotionEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "DeviceMotionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "DeviceMotionEventAcceleration": [
    "x",
    "y",
    "z"
  ],
  "DeviceMotionEventAccelerationInit": [
    "x",
    "y",
    "z"
  ],
  "DeviceMotionEventInit": [
    "acceleration",
    "accelerationIncludingGravity",
    "interval",
    "rotationRate"
  ],
  "DeviceMotionEventRotationRate": [
    "alpha",
    "beta",
    "gamma"
  ],
  "DeviceMotionEventRotationRateInit": [
    "alpha",
    "beta",
    "gamma"
  ],
  "DeviceOrientationEvent": [
    "DeviceOrientationEvent(type)",
    "DeviceOrientationEvent(type, eventInitDict)",
    "absolute",
    "alpha",
    "beta",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "gamma",
    "requestPermission()"
  ],
  "DeviceOrientationEvent/DeviceOrientationEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "DeviceOrientationEvent/DeviceOrientationEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "DeviceOrientationEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "DeviceOrientationEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "DeviceOrientationEventInit": [
    "absolute",
    "alpha",
    "beta",
    "gamma"
  ],
  "DevicePermissionDescriptor": [
    "deviceId"
  ],
  "DevicePosture": [
    "onchange",
    "type"
  ],
  "DevicePostureType": [
    "DevicePostureType",
    "book",
    "continuous",
    "flat",
    "folded",
    "folded-over",
    "laptop",
    "no-fold",
    "tablet",
    "tent"
  ],
  "DirectionSetting": [
    "",
    "\"\"",
    "\"lr\"",
    "\"rl\"",
    "lr",
    "rl"
  ],
  "DirectoryPickerOptions": [
    "id",
    "startIn"
  ],
  "DisplayCaptureSurfaceType": [
    "application",
    "browser",
    "monitor",
    "window"
  ],
  "DisplayMediaStreamConstraints": [
    "audio",
    "video"
  ],
  "DistanceModelType": [
    "\"exponential\"",
    "\"inverse\"",
    "\"linear\"",
    "exponential",
    "inverse",
    "linear"
  ],
  "Document": [
    "DOMContentLoaded",
    "Document()",
    "URL",
    "[[ActiveLocks]]",
    "[[CurrentPosture]]",
    "[[resizeObservers]]",
    "acquiring import maps",
    "active sandboxing flag set",
    "adoptNode(node)",
    "alinkColor",
    "all",
    "anchors",
    "applets",
    "bgColor",
    "body",
    "browsing context",
    "captureEvents()",
    "caretPositionFromPoint(x, y)",
    "characterSet",
    "charset",
    "clear()",
    "close()",
    "compatMode",
    "constructor()",
    "content type",
    "contentType",
    "cookie",
    "createAttribute(localName)",
    "createAttributeNS(namespace, qualifiedName)",
    "createCDATASection(data)",
    "createComment(data)",
    "createDocumentFragment()",
    "createElement(localName)",
    "createElement(localName, options)",
    "createElementNS(namespace, qualifiedName)",
    "createElementNS(namespace, qualifiedName, options)",
    "createEntityReference()",
    "createEvent(interface)",
    "createNodeIterator(root)",
    "createNodeIterator(root, whatToShow)",
    "createNodeIterator(root, whatToShow, filter)",
    "createProcessingInstruction(target, data)",
    "createRange()",
    "createTextNode(data)",
    "createTreeWalker(root)",
    "createTreeWalker(root, whatToShow)",
    "createTreeWalker(root, whatToShow, filter)",
    "currentScript",
    "defaultView",
    "designMode",
    "dir",
    "discarded",
    "doctype",
    "document.write(...)",
    "document.writeln(...)",
    "documentElement",
    "documentURI",
    "domConfig",
    "domain",
    "elementFromPoint(x, y)",
    "elementsFromPoint(x, y)",
    "embeds",
    "encoding",
    "exitFullscreen()",
    "exitPictureInPicture()",
    "exitPointerLock()",
    "fgColor",
    "forms",
    "fragmentDirective",
    "frozenness",
    "fullscreen",
    "fullscreenEnabled",
    "fully active",
    "getElementsByClassName(classNames)",
    "getElementsByName(elementName)",
    "getElementsByTagName(qualifiedName)",
    "getElementsByTagNameNS(namespace, localName)",
    "getSelection()",
    "hasFocus()",
    "hasStorageAccess()",
    "head",
    "hidden",
    "images",
    "implementation",
    "import map",
    "importNode(node)",
    "importNode(node, deep)",
    "inputEncoding",
    "interestCohort()",
    "intersectionobservertaskqueued",
    "lastModified",
    "linkColor",
    "links",
    "load timing info",
    "location",
    "measureElement(element)",
    "measureText(text, styleMap)",
    "mode",
    "namedFlows",
    "normalizeDocument()",
    "onabort",
    "onanimationcancel",
    "onanimationend",
    "onanimationiteration",
    "onanimationstart",
    "onauxclick",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onformdata",
    "onfreeze",
    "onfullscreenchange",
    "onfullscreenerror",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onpause",
    "onplay",
    "onplaying",
    "onpointerlockchange",
    "onpointerlockerror",
    "onprogress",
    "onratechange",
    "onreadystatechange",
    "onreset",
    "onresume",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onslotchange",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "onvisibilitychange",
    "onvolumechange",
    "onwaiting",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkittransitionend",
    "onwheel",
    "open(unused1, unused2)",
    "open(url, name, features)",
    "origin",
    "pending import map script",
    "permissions policy",
    "permissionsPolicy",
    "pictureInPictureEnabled",
    "plugins",
    "policy container",
    "policy object",
    "prefetched signed exchanges for navigation",
    "prefetched subresource signed exchanges",
    "previous document unload timing",
    "processed manifest",
    "readyState",
    "readystatechange",
    "referrer",
    "releaseEvents()",
    "renameNode()",
    "requestStorageAccess()",
    "resizeObservers",
    "scripts",
    "scroll",
    "scrollingElement",
    "strictErrorChecking",
    "styleSheets",
    "timeline",
    "title",
    "type",
    "url",
    "visibility states",
    "visibilityState",
    "visible",
    "vlinkColor",
    "wasDiscarded",
    "will declaratively refresh",
    "write()",
    "write(...text)",
    "writeln()",
    "writeln(...text)",
    "xmlEncoding",
    "xmlStandalone",
    "xmlVersion"
  ],
  "Document/adoptNode(node)": [
    "node"
  ],
  "Document/caretPositionFromPoint(x, y)": [
    "x",
    "y"
  ],
  "Document/createAttribute(localName)": [
    "localName"
  ],
  "Document/createAttributeNS(namespace, qualifiedName)": [
    "namespace",
    "qualifiedName"
  ],
  "Document/createCDATASection(data)": [
    "data"
  ],
  "Document/createComment(data)": [
    "data"
  ],
  "Document/createElement(localName)": [
    "localName",
    "options"
  ],
  "Document/createElement(localName, options)": [
    "localName",
    "options"
  ],
  "Document/createElementNS(namespace, qualifiedName)": [
    "namespace",
    "options",
    "qualifiedName"
  ],
  "Document/createElementNS(namespace, qualifiedName, options)": [
    "namespace",
    "options",
    "qualifiedName"
  ],
  "Document/createEvent(interface)": [
    "interface"
  ],
  "Document/createNodeIterator(root)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/createNodeIterator(root, whatToShow)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/createNodeIterator(root, whatToShow, filter)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/createProcessingInstruction(target, data)": [
    "data",
    "target"
  ],
  "Document/createTextNode(data)": [
    "data"
  ],
  "Document/createTreeWalker(root)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/createTreeWalker(root, whatToShow)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/createTreeWalker(root, whatToShow, filter)": [
    "filter",
    "root",
    "whatToShow"
  ],
  "Document/elementFromPoint(x, y)": [
    "x",
    "y"
  ],
  "Document/elementsFromPoint(x, y)": [
    "x",
    "y"
  ],
  "Document/getElementsByClassName(classNames)": [
    "classNames"
  ],
  "Document/getElementsByTagName(qualifiedName)": [
    "qualifiedName"
  ],
  "Document/getElementsByTagNameNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Document/importNode(node)": [
    "deep",
    "node"
  ],
  "Document/importNode(node, deep)": [
    "deep",
    "node"
  ],
  "Document/measureElement(element)": [
    "element"
  ],
  "Document/measureText(text, styleMap)": [
    "styleMap",
    "text"
  ],
  "Document/write()": [
    "text"
  ],
  "Document/write(...text)": [
    "text"
  ],
  "Document/writeln()": [
    "text"
  ],
  "Document/writeln(...text)": [
    "text"
  ],
  "DocumentAndElementEventHandlers": [
    "oncopy",
    "oncut",
    "onpaste"
  ],
  "DocumentFragment": [
    "DocumentFragment()",
    "constructor()",
    "host"
  ],
  "DocumentOrShadowRoot": [
    "activeElement",
    "adoptedStyleSheets",
    "document or shadow root css style sheets",
    "fullscreenElement",
    "getAnimations()",
    "pictureInPictureElement",
    "pointerLockElement",
    "styleSheets"
  ],
  "DocumentTimeline": [
    "DocumentTimeline()",
    "DocumentTimeline(options)",
    "constructor()",
    "constructor(options)"
  ],
  "DocumentTimeline/DocumentTimeline(options)": [
    "options"
  ],
  "DocumentTimelineOptions": [
    "originTime"
  ],
  "DocumentType": [
    "entities",
    "internalSubset",
    "name",
    "notations",
    "public id",
    "publicId",
    "system id",
    "systemId"
  ],
  "DoubleRange": [
    "max",
    "min"
  ],
  "DragEvent": [
    "dataTransfer"
  ],
  "DynamicsCompressorNode": [
    "DynamicsCompressorNode(context)",
    "DynamicsCompressorNode(context, options)",
    "[[compressor gain]]",
    "[[detector average]]",
    "[[internal reduction]]",
    "attack",
    "constructor(context)",
    "constructor(context, options)",
    "knee",
    "ratio",
    "reduction",
    "release",
    "threshold"
  ],
  "DynamicsCompressorNode/DynamicsCompressorNode(context)": [
    "context",
    "options"
  ],
  "DynamicsCompressorNode/DynamicsCompressorNode(context, options)": [
    "context",
    "options"
  ],
  "DynamicsCompressorNode/constructor()": [
    "DynamicsCompressorNode(context, options)",
    "context",
    "options"
  ],
  "DynamicsCompressorNode/constructor(context)": [
    "context",
    "options"
  ],
  "DynamicsCompressorNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "DynamicsCompressorOptions": [
    "attack",
    "knee",
    "ratio",
    "release",
    "threshold"
  ],
  "ECMAScript": [
    "ecmascript throw"
  ],
  "EcKeyAlgorithm": [
    "namedCurve"
  ],
  "EcKeyGenParams": [
    "namedCurve"
  ],
  "EcKeyImportParams": [
    "namedCurve"
  ],
  "EcdhKeyDeriveParams": [
    "public"
  ],
  "EcdsaParams": [
    "hash"
  ],
  "Edge": [
    "\"end\"",
    "\"start\""
  ],
  "EffectCallback": [
    "animation",
    "currentTarget",
    "progress"
  ],
  "EffectTiming": [
    "delay",
    "direction",
    "duration",
    "easing",
    "endDelay",
    "fill",
    "iterationStart",
    "iterations",
    "playbackRate"
  ],
  "EffectiveConnectionType": [
    "2g",
    "3g",
    "4g",
    "slow-2g"
  ],
  "Element": [
    "[[RegisteredIntersectionObservers]]",
    "[[computedStyleMapCache]]",
    "attachShadow(init)",
    "attribute list",
    "attributes",
    "class",
    "classList",
    "className",
    "clientHeight",
    "clientLeft",
    "clientTop",
    "clientWidth",
    "closest(selectors)",
    "computedStyleMap()",
    "custom",
    "custom element definition",
    "custom element state",
    "defined",
    "elementTiming",
    "focusableAreas()",
    "focusableAreas(option)",
    "getAttribute(qualifiedName)",
    "getAttributeNS(namespace, localName)",
    "getAttributeNames()",
    "getAttributeNode(qualifiedName)",
    "getAttributeNodeNS(namespace, localName)",
    "getBoundingClientRect()",
    "getClientRects()",
    "getElementsByClassName(classNames)",
    "getElementsByTagName(qualifiedName)",
    "getElementsByTagNameNS(namespace, localName)",
    "getSpatialNavigationContainer()",
    "hasAttribute(qualifiedName)",
    "hasAttributeNS(namespace, localName)",
    "hasAttributes()",
    "hasPointerCapture()",
    "hasPointerCapture(pointerId)",
    "html-uppercased qualified name",
    "id",
    "insertAdjacentElement(where, element)",
    "insertAdjacentHTML()",
    "insertAdjacentHTML(position, text)",
    "insertAdjacentText(where, data)",
    "is value",
    "local name",
    "localName",
    "matches(selectors)",
    "namespace",
    "namespace prefix",
    "namespaceURI",
    "onfullscreenchange",
    "onfullscreenerror",
    "outerHTML",
    "part",
    "prefix",
    "pseudo(type)",
    "qualified name",
    "releasePointerCapture()",
    "releasePointerCapture(pointerId)",
    "removeAttribute(qualifiedName)",
    "removeAttributeNS(namespace, localName)",
    "removeAttributeNode(attr)",
    "requestFullscreen()",
    "requestFullscreen(options)",
    "requestPointerLock()",
    "schemaTypeInfo",
    "scroll",
    "scroll()",
    "scroll(options)",
    "scroll(x, y)",
    "scrollBy()",
    "scrollBy(options)",
    "scrollBy(x, y)",
    "scrollHeight",
    "scrollIntoView()",
    "scrollIntoView(arg)",
    "scrollLeft",
    "scrollTo()",
    "scrollTo(options)",
    "scrollTo(x, y)",
    "scrollTop",
    "scrollWidth",
    "setAttribute(qualifiedName, value)",
    "setAttributeNS(namespace, qualifiedName, value)",
    "setAttributeNode(attr)",
    "setAttributeNodeNS(attr)",
    "setIdAttribute()",
    "setIdAttributeNS()",
    "setIdAttributeNode()",
    "setPointerCapture()",
    "setPointerCapture(pointerId)",
    "shadow host",
    "shadow root",
    "shadowRoot",
    "slot",
    "spatialNavigationSearch(dir)",
    "spatialNavigationSearch(dir, options)",
    "spatialNavigationSearch(options)",
    "tagName",
    "toggleAttribute(qualifiedName)",
    "toggleAttribute(qualifiedName, force)",
    "webkitMatchesSelector(selectors)"
  ],
  "Element/attachShadow(init)": [
    "init"
  ],
  "Element/closest(selectors)": [
    "selectors"
  ],
  "Element/focusableAreas()": [
    "option"
  ],
  "Element/focusableAreas(option)": [
    "option"
  ],
  "Element/getAttribute(qualifiedName)": [
    "qualifiedName"
  ],
  "Element/getAttributeNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Element/getAttributeNode(qualifiedName)": [
    "qualifiedName"
  ],
  "Element/getAttributeNodeNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Element/getElementsByClassName(classNames)": [
    "classNames"
  ],
  "Element/getElementsByTagName(qualifiedName)": [
    "qualifiedName"
  ],
  "Element/getElementsByTagNameNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Element/hasAttribute(qualifiedName)": [
    "qualifiedName"
  ],
  "Element/hasAttributeNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Element/insertAdjacentElement(where, element)": [
    "element",
    "where"
  ],
  "Element/insertAdjacentHTML(position, text)": [
    "position",
    "text"
  ],
  "Element/insertAdjacentText(where, data)": [
    "data",
    "where"
  ],
  "Element/matches(selectors)": [
    "selectors"
  ],
  "Element/pseudo(type)": [
    "type"
  ],
  "Element/removeAttribute(qualifiedName)": [
    "qualifiedName"
  ],
  "Element/removeAttributeNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "Element/removeAttributeNode(attr)": [
    "attr"
  ],
  "Element/requestFullscreen()": [
    "options"
  ],
  "Element/requestFullscreen(options)": [
    "options"
  ],
  "Element/scroll()": [
    "options"
  ],
  "Element/scroll(options)": [
    "options"
  ],
  "Element/scroll(x, y)": [
    "x",
    "y"
  ],
  "Element/scrollBy()": [
    "options"
  ],
  "Element/scrollBy(options)": [
    "options"
  ],
  "Element/scrollBy(x, y)": [
    "x",
    "y"
  ],
  "Element/scrollIntoView()": [
    "arg"
  ],
  "Element/scrollIntoView(arg)": [
    "arg"
  ],
  "Element/scrollTo()": [
    "options"
  ],
  "Element/scrollTo(options)": [
    "options"
  ],
  "Element/scrollTo(x, y)": [
    "x",
    "y"
  ],
  "Element/setAttribute(qualifiedName, value)": [
    "qualifiedName",
    "value"
  ],
  "Element/setAttributeNS(namespace, qualifiedName, value)": [
    "namespace",
    "qualifiedName",
    "value"
  ],
  "Element/setAttributeNode(attr)": [
    "attr"
  ],
  "Element/setAttributeNodeNS(attr)": [
    "attr"
  ],
  "Element/spatialNavigationSearch(dir)": [
    "dir",
    "options"
  ],
  "Element/spatialNavigationSearch(dir, options)": [
    "dir",
    "options"
  ],
  "Element/toggleAttribute(qualifiedName)": [
    "force",
    "qualifiedName"
  ],
  "Element/toggleAttribute(qualifiedName, force)": [
    "force",
    "qualifiedName"
  ],
  "Element/webkitMatchesSelector(selectors)": [
    "selectors"
  ],
  "ElementBasedOffset": [
    "edge",
    "target",
    "threshold"
  ],
  "ElementCSSInlineStyle": [
    "attributeStyleMap",
    "style"
  ],
  "ElementContentEditable": [
    "contentEditable",
    "enterKeyHint",
    "inputMode",
    "isContentEditable"
  ],
  "ElementCreationOptions": [
    "is"
  ],
  "ElementInternals": [
    "checkValidity()",
    "form",
    "labels",
    "reportValidity()",
    "setFormValue(value, state)",
    "setValidity(flags, message, anchor)",
    "shadowRoot",
    "states",
    "validationMessage",
    "validity",
    "willValidate"
  ],
  "EncodedAudioChunk": [
    "EncodedAudioChunk(init)",
    "[[byte length]]",
    "[[duration]]",
    "[[internal data]]",
    "[[timestamp]]",
    "[[type]]",
    "byteLength",
    "constructor(init)",
    "copyTo(destination)",
    "duration",
    "timestamp",
    "type"
  ],
  "EncodedAudioChunk/EncodedAudioChunk(init)": [
    "init"
  ],
  "EncodedAudioChunk/constructor(init)": [
    "init"
  ],
  "EncodedAudioChunk/copyTo(destination)": [
    "destination"
  ],
  "EncodedAudioChunkInit": [
    "data",
    "timestamp",
    "type"
  ],
  "EncodedAudioChunkMetadata": [
    "decoderConfig"
  ],
  "EncodedAudioChunkOutputCallback": [
    "metadata",
    "output"
  ],
  "EncodedAudioChunkType": [
    "\"delta\"",
    "\"key\""
  ],
  "EncodedVideoChunk": [
    "EncodedVideoChunk(init)",
    "[[byte length]]",
    "[[duration]]",
    "[[internal data]]",
    "[[timestamp]]",
    "[[type]]",
    "byteLength",
    "constructor(init)",
    "copyTo(destination)",
    "duration",
    "timestamp",
    "type"
  ],
  "EncodedVideoChunk/EncodedVideoChunk(init)": [
    "init"
  ],
  "EncodedVideoChunk/constructor(init)": [
    "init"
  ],
  "EncodedVideoChunk/copyTo(destination)": [
    "destination"
  ],
  "EncodedVideoChunkInit": [
    "data",
    "duration",
    "timestamp",
    "type"
  ],
  "EncodedVideoChunkMetadata": [
    "decoderConfig",
    "svc"
  ],
  "EncodedVideoChunkOutputCallback": [
    "chunk",
    "metadata"
  ],
  "EncodedVideoChunkType": [
    "\"delta\"",
    "\"key\""
  ],
  "EndOfStreamError": [
    "EndOfStreamError",
    "decode",
    "network"
  ],
  "EndingType": [
    "\"native\"",
    "\"transparent\""
  ],
  "Environment": [
    "ready promise"
  ],
  "ErrorCallback": [
    "err"
  ],
  "ErrorEvent": [
    "colno",
    "error",
    "filename",
    "lineno",
    "message"
  ],
  "Event": [
    "AT_TARGET",
    "BUBBLING_PHASE",
    "CAPTURING_PHASE",
    "Event(type)",
    "Event(type, eventInitDict)",
    "NONE",
    "bubbles",
    "cancelBubble",
    "cancelable",
    "canceled flag",
    "composed",
    "composed flag",
    "composedPath()",
    "constructor",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "currentTarget",
    "defaultPrevented",
    "dispatch flag",
    "eventPhase",
    "flatten",
    "flatten more",
    "in passive listener flag",
    "initEvent(type)",
    "initEvent(type, bubbles)",
    "initEvent(type, bubbles, cancelable)",
    "initialize",
    "initialized flag",
    "isTrusted",
    "path",
    "preventDefault()",
    "relatedtarget",
    "returnValue",
    "srcElement",
    "stop immediate propagation flag",
    "stop propagation flag",
    "stopImmediatePropagation()",
    "stopPropagation()",
    "target",
    "timeStamp",
    "touch target list",
    "type"
  ],
  "Event/Event(type)": [
    "eventInitDict",
    "type"
  ],
  "Event/Event(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "Event/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "Event/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "Event/initEvent(type)": [
    "bubbles",
    "cancelable",
    "type"
  ],
  "Event/initEvent(type, bubbles)": [
    "bubbles",
    "cancelable",
    "type"
  ],
  "Event/initEvent(type, bubbles, cancelable)": [
    "bubbles",
    "cancelable",
    "type"
  ],
  "Event/path": [
    "invocation target",
    "invocation-target-in-shadow-tree",
    "relatedtarget",
    "root-of-closed-tree",
    "shadow-adjusted target",
    "slot-in-closed-tree",
    "touch target list"
  ],
  "EventInit": [
    "bubbles",
    "cancelable",
    "composed"
  ],
  "EventListener": [
    "handleEvent(event)"
  ],
  "EventListener/handleEvent(event)": [
    "event"
  ],
  "EventListenerOptions": [
    "capture"
  ],
  "EventModifierInit": [
    "altKey",
    "ctrlKey",
    "metaKey",
    "modifierAltGraph",
    "modifierCapsLock",
    "modifierFn",
    "modifierFnLock",
    "modifierHyper",
    "modifierNumLock",
    "modifierScrollLock",
    "modifierSuper",
    "modifierSymbol",
    "modifierSymbolLock",
    "shiftKey"
  ],
  "EventSource": [
    "CLOSED",
    "CONNECTING",
    "EventSource(url, eventSourceInitDict)",
    "OPEN",
    "close()",
    "error",
    "message",
    "onerror",
    "onmessage",
    "onopen",
    "open",
    "readyState",
    "url",
    "withCredentials"
  ],
  "EventSourceInit": [
    "withCredentials"
  ],
  "EventTarget": [
    "EventTarget()",
    "activation behavior",
    "addEventListener(type, callback)",
    "addEventListener(type, callback, options)",
    "constructor()",
    "dispatchEvent(event)",
    "event listener list",
    "legacy-canceled-activation behavior",
    "legacy-pre-activation behavior",
    "removeEventListener(type, callback)",
    "removeEventListener(type, callback, options)"
  ],
  "EventTarget/addEventListener(type, callback)": [
    "callback",
    "options",
    "type"
  ],
  "EventTarget/addEventListener(type, callback, options)": [
    "callback",
    "options",
    "type"
  ],
  "EventTarget/dispatchEvent(event)": [
    "event"
  ],
  "EventTarget/removeEventListener(type, callback)": [
    "callback",
    "options",
    "type"
  ],
  "EventTarget/removeEventListener(type, callback, options)": [
    "callback",
    "options",
    "type"
  ],
  "ExtendableCookieChangeEvent": [
    "ExtendableCookieChangeEvent(type)",
    "ExtendableCookieChangeEvent(type, eventInitDict)",
    "changed",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "deleted"
  ],
  "ExtendableCookieChangeEvent/ExtendableCookieChangeEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableCookieChangeEvent/ExtendableCookieChangeEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableCookieChangeEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableCookieChangeEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableCookieChangeEventInit": [
    "changed",
    "deleted"
  ],
  "ExtendableEvent": [
    "ExtendableEvent(type)",
    "ExtendableEvent(type, eventInitDict)",
    "active",
    "add lifetime promise",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "extend lifetime promises",
    "pending promises count",
    "timed out flag",
    "waitUntil(f)"
  ],
  "ExtendableEvent/ExtendableEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableEvent/ExtendableEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableEvent/waitUntil(f)": [
    "f"
  ],
  "ExtendableMessageEvent": [
    "ExtendableMessageEvent(type)",
    "ExtendableMessageEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data",
    "lastEventId",
    "origin",
    "ports",
    "source"
  ],
  "ExtendableMessageEvent/ExtendableMessageEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableMessageEvent/ExtendableMessageEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableMessageEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableMessageEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ExtendableMessageEventInit": [
    "data",
    "lastEventId",
    "origin",
    "ports",
    "source"
  ],
  "Extent3D": [
    "depthorarraylayers",
    "height",
    "width"
  ],
  "External": [
    "AddSearchProvider()",
    "IsSearchProviderInstalled()"
  ],
  "FaceDetector": [
    "FaceDetector()",
    "FaceDetector(faceDetectorOptions)",
    "constructor()",
    "constructor(faceDetectorOptions)",
    "detect(image)"
  ],
  "FaceDetector/FaceDetector()": [
    "faceDetectorOptions"
  ],
  "FaceDetector/FaceDetector(faceDetectorOptions)": [
    "faceDetectorOptions"
  ],
  "FaceDetector/constructor()": [
    "faceDetectorOptions"
  ],
  "FaceDetector/constructor(faceDetectorOptions)": [
    "faceDetectorOptions"
  ],
  "FaceDetector/detect(image)": [
    "image"
  ],
  "FaceDetectorOptions": [
    "fastMode",
    "maxDetectedFaces"
  ],
  "FederatedCredential": [
    "FederatedCredential(data)",
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)",
    "[[Create]](origin, options, sameOriginWithAncestors)",
    "[[Store]](credential, sameOriginWithAncestors)",
    "constructor(data)",
    "federated",
    "protocol",
    "provider"
  ],
  "FederatedCredential/FederatedCredential(data)": [
    "data"
  ],
  "FederatedCredential/constructor(data)": [
    "data"
  ],
  "FederatedCredentialInit": [
    "iconURL",
    "name",
    "origin",
    "protocol",
    "provider"
  ],
  "FederatedCredentialRequestOptions": [
    "protocols",
    "providers"
  ],
  "FetchEvent": [
    "FetchEvent(type, eventInitDict)",
    "clientId",
    "constructor(type, eventInitDict)",
    "handled",
    "potential response",
    "preloadResponse",
    "replacesClientId",
    "request",
    "respond-with entered flag",
    "respond-with error flag",
    "respondWith(r)",
    "resultingClientId",
    "wait to respond flag"
  ],
  "FetchEvent/FetchEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FetchEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FetchEvent/respondWith(r)": [
    "r"
  ],
  "FetchEventInit": [
    "clientId",
    "handled",
    "preloadResponse",
    "replacesClientId",
    "request",
    "resultingClientId"
  ],
  "File": [
    "File(fileBits, fileName)",
    "File(fileBits, fileName, options)",
    "constructor(fileBits, fileName)",
    "constructor(fileBits, fileName, options)",
    "lastModified",
    "name",
    "webkitRelativePath"
  ],
  "File/File(fileBits, fileName)": [
    "options"
  ],
  "File/File(fileBits, fileName, options)": [
    "fileBits",
    "fileName",
    "options"
  ],
  "File/constructor(fileBits, fileName)": [
    "options"
  ],
  "File/constructor(fileBits, fileName, options)": [
    "options"
  ],
  "FileCallback": [
    "file"
  ],
  "FileList": [
    "item(index)",
    "length"
  ],
  "FileList/item(index)": [
    "index"
  ],
  "FilePickerAcceptType": [
    "accept",
    "description"
  ],
  "FilePickerOptions": [
    "excludeAcceptAllOption",
    "id",
    "startIn",
    "types"
  ],
  "FilePropertyBag": [
    "lastModified"
  ],
  "FileReader": [
    "DONE",
    "EMPTY",
    "FileReader()",
    "LOADING",
    "abort",
    "abort()",
    "constructor()",
    "error",
    "load",
    "loadend",
    "loadstart",
    "onabort",
    "onerror",
    "onload",
    "onloadend",
    "onloadstart",
    "onprogress",
    "progress",
    "readAsArrayBuffer(blob)",
    "readAsBinaryString(blob)",
    "readAsDataURL(blob)",
    "readAsText(blob)",
    "readAsText(blob, encoding)",
    "readyState",
    "result",
    "state"
  ],
  "FileReader/readAsArrayBuffer(blob)": [
    "blob"
  ],
  "FileReader/readAsBinaryString(blob)": [
    "blob"
  ],
  "FileReader/readAsDataURL(blob)": [
    "blob"
  ],
  "FileReader/readAsText(blob)": [
    "blob",
    "encoding"
  ],
  "FileReader/readAsText(blob, encoding)": [
    "blob",
    "encoding"
  ],
  "FileReaderSync": [
    "FileReaderSync()",
    "constructor()",
    "readAsArrayBuffer(blob)",
    "readAsBinaryString(blob)",
    "readAsDataURL(blob)",
    "readAsText(blob)",
    "readAsText(blob, encoding)"
  ],
  "FileReaderSync/readAsArrayBuffer(blob)": [
    "blob"
  ],
  "FileReaderSync/readAsBinaryString(blob)": [
    "blob"
  ],
  "FileReaderSync/readAsDataURL(blob)": [
    "blob"
  ],
  "FileReaderSync/readAsText(blob)": [
    "blob",
    "encoding"
  ],
  "FileReaderSync/readAsText(blob, encoding)": [
    "blob",
    "encoding"
  ],
  "FileSystem": [
    "name",
    "root"
  ],
  "FileSystemCreateWritableOptions": [
    "keepExistingData"
  ],
  "FileSystemDirectoryEntry": [
    "createReader()",
    "getDirectory()",
    "getDirectory(path)",
    "getDirectory(path, options)",
    "getDirectory(path, options, successCallback)",
    "getDirectory(path, options, successCallback, errorCallback)",
    "getFile()",
    "getFile(path)",
    "getFile(path, options)",
    "getFile(path, options, successCallback)",
    "getFile(path, options, successCallback, errorCallback)",
    "readEntries(successCallback, errorCallback)"
  ],
  "FileSystemDirectoryEntry/getDirectory()": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getDirectory(path)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getDirectory(path, options)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getDirectory(path, options, successCallback)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getDirectory(path, options, successCallback, errorCallback)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getFile()": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getFile(path)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getFile(path, options)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getFile(path, options, successCallback)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryEntry/getFile(path, options, successCallback, errorCallback)": [
    "errorCallback",
    "options",
    "path",
    "successCallback"
  ],
  "FileSystemDirectoryHandle": [
    "getDirectoryHandle(name)",
    "getDirectoryHandle(name, options)",
    "getFileHandle(name)",
    "getFileHandle(name, options)",
    "removeEntry(name)",
    "removeEntry(name, options)",
    "resolve(possibleDescendant)"
  ],
  "FileSystemDirectoryHandle-iterator": [
    "past results"
  ],
  "FileSystemDirectoryHandle/getDirectoryHandle(name)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/getDirectoryHandle(name, options)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/getFileHandle(name)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/getFileHandle(name, options)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/removeEntry(name)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/removeEntry(name, options)": [
    "name",
    "options"
  ],
  "FileSystemDirectoryHandle/resolve(possibleDescendant)": [
    "possibleDescendant"
  ],
  "FileSystemDirectoryReader": [
    "readEntries(successCallback)",
    "readEntries(successCallback, errorCallback)"
  ],
  "FileSystemDirectoryReader/readEntries(successCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemDirectoryReader/readEntries(successCallback, errorCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemEntriesCallback": [
    "entries"
  ],
  "FileSystemEntry": [
    "filesystem",
    "fullPath",
    "getParent()",
    "getParent(successCallback)",
    "getParent(successCallback, errorCallback)",
    "isDirectory",
    "isFile",
    "name"
  ],
  "FileSystemEntry/getParent()": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemEntry/getParent(successCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemEntry/getParent(successCallback, errorCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemEntryCallback": [
    "entry"
  ],
  "FileSystemFileEntry": [
    "file(successCallback)",
    "file(successCallback, errorCallback)"
  ],
  "FileSystemFileEntry/file(successCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemFileEntry/file(successCallback, errorCallback)": [
    "errorCallback",
    "successCallback"
  ],
  "FileSystemFileHandle": [
    "createWritable()",
    "createWritable(options)",
    "getFile()"
  ],
  "FileSystemFileHandle/createWritable()": [
    "options"
  ],
  "FileSystemFileHandle/createWritable(options)": [
    "options"
  ],
  "FileSystemFlags": [
    "create",
    "exclusive"
  ],
  "FileSystemGetDirectoryOptions": [
    "create"
  ],
  "FileSystemGetFileOptions": [
    "create"
  ],
  "FileSystemHandle": [
    "entry",
    "isSameEntry(other)",
    "kind",
    "name",
    "queryPermission()",
    "queryPermission(descriptor)",
    "requestPermission()",
    "requestPermission(descriptor)"
  ],
  "FileSystemHandle/isSameEntry(other)": [
    "other"
  ],
  "FileSystemHandle/queryPermission()": [
    "descriptor"
  ],
  "FileSystemHandle/queryPermission(descriptor)": [
    "descriptor"
  ],
  "FileSystemHandle/requestPermission()": [
    "descriptor"
  ],
  "FileSystemHandle/requestPermission(descriptor)": [
    "descriptor"
  ],
  "FileSystemHandleKind": [
    "\"directory\"",
    "\"file\""
  ],
  "FileSystemHandlePermissionDescriptor": [
    "mode"
  ],
  "FileSystemPermissionDescriptor": [
    "handle",
    "mode"
  ],
  "FileSystemPermissionMode": [
    "\"read\"",
    "\"readwrite\""
  ],
  "FileSystemRemoveOptions": [
    "recursive"
  ],
  "FileSystemWritableFileStream": [
    "[[buffer]]",
    "[[file]]",
    "[[seekoffset]]",
    "seek(position)",
    "truncate(size)",
    "write(data)"
  ],
  "FileSystemWritableFileStream/seek(position)": [
    "position"
  ],
  "FileSystemWritableFileStream/truncate(size)": [
    "size"
  ],
  "FileSystemWritableFileStream/write(data)": [
    "data"
  ],
  "FillLightMode": [
    "\"auto\"",
    "\"flash\"",
    "\"off\"",
    "auto",
    "flash",
    "off"
  ],
  "FillMode": [
    "\"auto\"",
    "\"backwards\"",
    "\"both\"",
    "\"forwards\"",
    "\"none\""
  ],
  "FlowControlType": [
    "hardware",
    "none"
  ],
  "FocusEvent": [
    "FocusEvent(type)",
    "FocusEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "relatedTarget"
  ],
  "FocusEvent/FocusEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "FocusEvent/FocusEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FocusEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "FocusEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FocusEventInit": [
    "relatedTarget"
  ],
  "FocusOptions": [
    "preventScroll"
  ],
  "FocusableAreaSearchMode": [
    "\"all\"",
    "\"visible\""
  ],
  "FocusableAreasOption": [
    "mode"
  ],
  "Font": [
    "glyphsRendered",
    "name"
  ],
  "FontFace": [
    "FontFace",
    "FontFace(family, source)",
    "FontFace(family, source, descriptors)",
    "[[Data]]",
    "[[FontStatusPromise]]",
    "[[Urls]]",
    "ascentOverride",
    "constructor(family, source)",
    "constructor(family, source, descriptors)",
    "descentOverride",
    "display",
    "family",
    "featureSettings",
    "lineGapOverride",
    "load()",
    "loaded",
    "status",
    "stretch",
    "style",
    "unicodeRange",
    "variant",
    "variationSettings",
    "weight"
  ],
  "FontFace/FontFace()": [
    "descriptors",
    "family",
    "source"
  ],
  "FontFace/FontFace(family, source)": [
    "descriptors",
    "family",
    "source"
  ],
  "FontFace/FontFace(family, source, descriptors)": [
    "descriptors",
    "family",
    "source"
  ],
  "FontFace/constructor(family, source)": [
    "descriptors",
    "family",
    "source"
  ],
  "FontFace/constructor(family, source, descriptors)": [
    "descriptors",
    "family",
    "source"
  ],
  "FontFaceDescriptors": [
    "ascentOverride",
    "descentOverride",
    "display",
    "featureSettings",
    "lineGapOverride",
    "stretch",
    "style",
    "unicodeRange",
    "variant",
    "variationSettings",
    "weight"
  ],
  "FontFaceLoadStatus": [
    "\"error\"",
    "\"loaded\"",
    "\"loading\"",
    "\"unloaded\""
  ],
  "FontFaceSet": [
    "FontFaceSet(initialFaces)",
    "[[FailedFonts]]",
    "[[LoadedFonts]]",
    "[[LoadingFonts]]",
    "[[PendingReadyPromises]]",
    "[[ReadyPromise]]",
    "add(font)",
    "check",
    "check(font)",
    "check(font, text)",
    "clear()",
    "constructor(initialFaces)",
    "delete(font)",
    "iteration order",
    "load",
    "load(font)",
    "load(font, text)",
    "loading",
    "loadingdone",
    "loadingerror",
    "onloading",
    "onloadingdone",
    "onloadingerror",
    "pending on the environment",
    "ready",
    "ready()",
    "set entries",
    "status",
    "stuck on the environment"
  ],
  "FontFaceSet/FontFaceSet(initialFaces)": [
    "initialFaces"
  ],
  "FontFaceSet/add(font)": [
    "font"
  ],
  "FontFaceSet/check()": [
    "font",
    "text"
  ],
  "FontFaceSet/check(font, text)": [
    "font",
    "text"
  ],
  "FontFaceSet/constructor(initialFaces)": [
    "initialFaces"
  ],
  "FontFaceSet/delete(font)": [
    "font"
  ],
  "FontFaceSet/load()": [
    "font",
    "text"
  ],
  "FontFaceSet/load(font, text)": [
    "font",
    "text"
  ],
  "FontFaceSetLoadEvent": [
    "FontFaceSetLoadEvent(type)",
    "FontFaceSetLoadEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "fontfaces"
  ],
  "FontFaceSetLoadEvent/FontFaceSetLoadEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "FontFaceSetLoadEvent/FontFaceSetLoadEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FontFaceSetLoadEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "FontFaceSetLoadEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "FontFaceSetLoadEventInit": [
    "fontfaces"
  ],
  "FontFaceSetLoadStatus": [
    "\"loaded\"",
    "\"loading\""
  ],
  "FontFaceSource": [
    "fonts"
  ],
  "FontManager": [
    "query()",
    "query(options)"
  ],
  "FontManager/query()": [
    "options"
  ],
  "FontManager/query(options)": [
    "options"
  ],
  "FontMetadata": [
    "blob()",
    "family",
    "fullName",
    "italic",
    "postscriptName",
    "stretch",
    "style",
    "weight"
  ],
  "FontMetrics": [
    "advances",
    "baselines",
    "boundingBoxAscent",
    "boundingBoxDescent",
    "boundingBoxLeft",
    "boundingBoxRight",
    "dominantBaseline",
    "emHeightAscent",
    "emHeightDescent",
    "fontBoundingBoxAscent",
    "fontBoundingBoxDescent",
    "fonts",
    "height",
    "width"
  ],
  "FormData": [
    "FormData()",
    "FormData(form)",
    "append(name, blobValue)",
    "append(name, blobValue, filename)",
    "append(name, value)",
    "constructor()",
    "constructor(form)",
    "delete(name)",
    "entries",
    "entry",
    "entry list",
    "get(name)",
    "getAll(name)",
    "has(name)",
    "set(name, blobValue)",
    "set(name, blobValue, filename)",
    "set(name, value)"
  ],
  "FormData/FormData()": [
    "form"
  ],
  "FormData/FormData(form)": [
    "form"
  ],
  "FormData/append(name, blobValue)": [
    "blobValue",
    "filename",
    "name"
  ],
  "FormData/append(name, blobValue, filename)": [
    "blobValue",
    "filename",
    "name"
  ],
  "FormData/append(name, value)": [
    "name",
    "value"
  ],
  "FormData/constructor()": [
    "form"
  ],
  "FormData/constructor(form)": [
    "form"
  ],
  "FormData/delete(name)": [
    "name"
  ],
  "FormData/entry": [
    "name",
    "value"
  ],
  "FormData/get(name)": [
    "name"
  ],
  "FormData/getAll(name)": [
    "name"
  ],
  "FormData/has(name)": [
    "name"
  ],
  "FormData/set(name, blobValue)": [
    "blobValue",
    "filename",
    "name"
  ],
  "FormData/set(name, blobValue, filename)": [
    "blobValue",
    "filename",
    "name"
  ],
  "FormData/set(name, value)": [
    "name",
    "value"
  ],
  "FormDataEvent": [
    "formData"
  ],
  "FragmentResult": [
    "FragmentResult()",
    "FragmentResult(options)",
    "[[block size]]",
    "[[box]]",
    "[[child fragments]]",
    "[[data]]",
    "[[inline size]]",
    "[[internal break token]]",
    "[[unique id]]",
    "blockSize",
    "constructor()",
    "constructor(options)",
    "inlineSize"
  ],
  "FragmentResult/FragmentResult()": [
    "options"
  ],
  "FragmentResult/FragmentResult(options)": [
    "options"
  ],
  "FragmentResult/constructor()": [
    "options"
  ],
  "FragmentResult/constructor(options)": [
    "options"
  ],
  "FragmentResultOptions": [
    "autoBlockSize",
    "blockSize",
    "breakToken",
    "childFragments",
    "data",
    "inlineSize"
  ],
  "FrameType": [
    "\"auxiliary\"",
    "\"nested\"",
    "\"none\"",
    "\"top-level\""
  ],
  "FullscreenNavigationUI": [
    "\"auto\"",
    "\"hide\"",
    "\"show\""
  ],
  "FullscreenOptions": [
    "navigationUI"
  ],
  "Function": [
    "arguments"
  ],
  "GPU": [
    "[[previously_returned_adapters]]",
    "requestAdapter()",
    "requestAdapter(options)"
  ],
  "GPU/requestAdapter(options)": [
    "options"
  ],
  "GPUAdapter": [
    "[[adapter]]",
    "features",
    "isSoftware",
    "limits",
    "name",
    "requestDevice()",
    "requestDevice(descriptor)"
  ],
  "GPUAdapter/requestDevice(descriptor)": [
    "descriptor"
  ],
  "GPUAddressMode": [
    "\"clamp-to-edge\"",
    "\"mirror-repeat\"",
    "\"repeat\""
  ],
  "GPUBindGroup": [
    "[[entries]]",
    "[[layout]]",
    "[[usedResources]]"
  ],
  "GPUBindGroupDescriptor": [
    "entries",
    "layout"
  ],
  "GPUBindGroupEntry": [
    "binding",
    "resource"
  ],
  "GPUBindGroupLayout": [
    "[[descriptor]]",
    "[[dynamicOffsetCount]]",
    "[[entryMap]]"
  ],
  "GPUBindGroupLayoutDescriptor": [
    "entries"
  ],
  "GPUBindGroupLayoutEntry": [
    "binding",
    "buffer",
    "externalTexture",
    "sampler",
    "storageTexture",
    "texture",
    "visibility"
  ],
  "GPUBlendComponent": [
    "dstFactor",
    "operation",
    "srcFactor"
  ],
  "GPUBlendFactor": [
    "\"constant\"",
    "\"dst\"",
    "\"dst-alpha\"",
    "\"one\"",
    "\"one-minus-constant\"",
    "\"one-minus-dst\"",
    "\"one-minus-dst-alpha\"",
    "\"one-minus-src\"",
    "\"one-minus-src-alpha\"",
    "\"src\"",
    "\"src-alpha\"",
    "\"src-alpha-saturated\"",
    "\"zero\""
  ],
  "GPUBlendOperation": [
    "\"add\"",
    "\"max\"",
    "\"min\"",
    "\"reverse-subtract\"",
    "\"subtract\""
  ],
  "GPUBlendState": [
    "alpha",
    "color"
  ],
  "GPUBuffer": [
    "[[map_mode]]",
    "[[mapped_ranges]]",
    "[[mapping]]",
    "[[mapping_range]]",
    "[[size]]",
    "[[state]]",
    "[[usage]]",
    "destroy()",
    "getMappedRange()",
    "getMappedRange(offset)",
    "getMappedRange(offset, size)",
    "mapAsync(mode)",
    "mapAsync(mode, offset)",
    "mapAsync(mode, offset, size)",
    "unmap()"
  ],
  "GPUBuffer/getMappedRange(offset, size)": [
    "offset",
    "size"
  ],
  "GPUBuffer/mapAsync(mode, offset, size)": [
    "mode",
    "offset",
    "size"
  ],
  "GPUBufferBinding": [
    "buffer",
    "offset",
    "size"
  ],
  "GPUBufferBindingLayout": [
    "hasDynamicOffset",
    "minBindingSize",
    "type"
  ],
  "GPUBufferBindingType": [
    "\"read-only-storage\"",
    "\"storage\"",
    "\"uniform\""
  ],
  "GPUBufferDescriptor": [
    "mappedAtCreation",
    "size",
    "usage"
  ],
  "GPUBufferUsage": [
    "COPY_DST",
    "COPY_SRC",
    "INDEX",
    "INDIRECT",
    "MAP_READ",
    "MAP_WRITE",
    "QUERY_RESOLVE",
    "STORAGE",
    "UNIFORM",
    "VERTEX"
  ],
  "GPUCanvasCompositingAlphaMode": [
    "\"opaque\"",
    "\"premultiplied\"",
    "GPUCanvasCompositingAlphaMode"
  ],
  "GPUColorDict": [
    "a",
    "b",
    "g",
    "r"
  ],
  "GPUColorTargetState": [
    "blend",
    "format",
    "writeMask"
  ],
  "GPUColorWrite": [
    "ALL",
    "ALPHA",
    "BLUE",
    "GREEN",
    "RED"
  ],
  "GPUCommandBuffer": [
    "[[command_list]]",
    "executionTime"
  ],
  "GPUCommandEncoder": [
    "[[command_list]]",
    "[[debug_group_stack]]",
    "[[state]]",
    "beginComputePass()",
    "beginComputePass(descriptor)",
    "beginRenderPass(descriptor)",
    "copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)",
    "copyBufferToTexture(source, destination, copySize)",
    "copyTextureToBuffer(source, destination, copySize)",
    "copyTextureToTexture(source, destination, copySize)",
    "finish()",
    "finish(descriptor)",
    "insertDebugMarker(markerLabel)",
    "popDebugGroup()",
    "pushDebugGroup(groupLabel)",
    "resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)",
    "writeTimestamp(querySet, queryIndex)"
  ],
  "GPUCommandEncoder/beginComputePass(descriptor)": [
    "descriptor"
  ],
  "GPUCommandEncoder/beginRenderPass(descriptor)": [
    "descriptor"
  ],
  "GPUCommandEncoder/copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)": [
    "destination",
    "destinationOffset",
    "size",
    "source",
    "sourceOffset"
  ],
  "GPUCommandEncoder/copyBufferToTexture(source, destination, copySize)": [
    "copySize",
    "destination",
    "source"
  ],
  "GPUCommandEncoder/copyTextureToBuffer(source, destination, copySize)": [
    "copySize",
    "destination",
    "source"
  ],
  "GPUCommandEncoder/copyTextureToTexture(source, destination, copySize)": [
    "copySize",
    "destination",
    "source"
  ],
  "GPUCommandEncoder/finish(descriptor)": [
    "descriptor"
  ],
  "GPUCommandEncoder/insertDebugMarker(markerLabel)": [
    "markerLabel"
  ],
  "GPUCommandEncoder/pushDebugGroup(groupLabel)": [
    "groupLabel"
  ],
  "GPUCommandEncoder/resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)": [
    "destination",
    "destinationOffset",
    "firstQuery",
    "queryCount",
    "querySet"
  ],
  "GPUCommandEncoder/writeTimestamp(querySet, queryIndex)": [
    "queryIndex",
    "querySet"
  ],
  "GPUCommandEncoderDescriptor": [
    "measureExecutionTime"
  ],
  "GPUCompareFunction": [
    "\"always\"",
    "\"equal\"",
    "\"greater\"",
    "\"greater-equal\"",
    "\"less\"",
    "\"less-equal\"",
    "\"never\"",
    "\"not-equal\""
  ],
  "GPUCompilationInfo": [
    "messages"
  ],
  "GPUCompilationMessage": [
    "length",
    "lineNum",
    "linePos",
    "message",
    "offset",
    "type"
  ],
  "GPUCompilationMessageType": [
    "\"error\"",
    "\"info\"",
    "\"warning\""
  ],
  "GPUComputePassEncoder": [
    "[[pipeline]]",
    "beginPipelineStatisticsQuery(querySet, queryIndex)",
    "dispatch(x)",
    "dispatch(x, y)",
    "dispatch(x, y, z)",
    "dispatchIndirect(indirectBuffer, indirectOffset)",
    "endPass()",
    "endPipelineStatisticsQuery()",
    "setPipeline(pipeline)",
    "writeTimestamp(querySet, queryIndex)"
  ],
  "GPUComputePassEncoder/beginPipelineStatisticsQuery(querySet, queryIndex)": [
    "queryIndex",
    "querySet"
  ],
  "GPUComputePassEncoder/dispatch(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "GPUComputePassEncoder/dispatchIndirect(indirectBuffer, indirectOffset)": [
    "indirectBuffer",
    "indirectOffset"
  ],
  "GPUComputePassEncoder/setPipeline(pipeline)": [
    "pipeline"
  ],
  "GPUComputePassEncoder/writeTimestamp(querySet, queryIndex)": [
    "queryIndex",
    "querySet"
  ],
  "GPUComputePipelineDescriptor": [
    "compute"
  ],
  "GPUCullMode": [
    "\"back\"",
    "\"front\"",
    "\"none\""
  ],
  "GPUDepthStencilState": [
    "depthBias",
    "depthBiasClamp",
    "depthBiasSlopeScale",
    "depthCompare",
    "depthWriteEnabled",
    "format",
    "stencilBack",
    "stencilFront",
    "stencilReadMask",
    "stencilWriteMask"
  ],
  "GPUDevice": [
    "createBindGroup(descriptor)",
    "createBindGroupLayout(descriptor)",
    "createBuffer(descriptor)",
    "createCommandEncoder()",
    "createCommandEncoder(descriptor)",
    "createComputePipeline(descriptor)",
    "createComputePipelineAsync(descriptor)",
    "createPipelineLayout(descriptor)",
    "createQuerySet(descriptor)",
    "createRenderBundleEncoder(descriptor)",
    "createRenderPipeline(descriptor)",
    "createRenderPipelineAsync(descriptor)",
    "createSampler()",
    "createSampler(descriptor)",
    "createShaderModule(descriptor)",
    "createTexture(descriptor)",
    "destroy()",
    "features",
    "importExternalTexture(descriptor)",
    "limits",
    "lost",
    "onuncapturederror",
    "popErrorScope()",
    "pushErrorScope(filter)",
    "queue"
  ],
  "GPUDevice.createSampler": [
    "Valid Usage"
  ],
  "GPUDevice/createBindGroup(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createBindGroupLayout(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createBuffer(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createCommandEncoder(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createComputePipeline(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createComputePipelineAsync(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createPipelineLayout(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createQuerySet(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createRenderBundleEncoder(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createRenderPipeline(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createRenderPipelineAsync(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createSampler(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createShaderModule(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/createTexture(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/importExternalTexture(descriptor)": [
    "descriptor"
  ],
  "GPUDevice/pushErrorScope(filter)": [
    "filter"
  ],
  "GPUDeviceDescriptor": [
    "requiredFeatures",
    "requiredLimits"
  ],
  "GPUDeviceLostInfo": [
    "message",
    "reason"
  ],
  "GPUDeviceLostReason": [
    "\"destroyed\""
  ],
  "GPUErrorFilter": [
    "\"out-of-memory\"",
    "\"validation\""
  ],
  "GPUExtent3DDict": [
    "depthOrArrayLayers",
    "height",
    "width"
  ],
  "GPUExternalTexture": [
    "[[destroyed]]"
  ],
  "GPUExternalTextureDescriptor": [
    "colorSpace",
    "source"
  ],
  "GPUFeatureName": [
    "\"depth-clamping\"",
    "\"depth24unorm-stencil8\"",
    "\"depth32float-stencil8\"",
    "\"pipeline-statistics-query\"",
    "\"texture-compression-bc\"",
    "\"timestamp-query\"",
    "depth-clamping",
    "depth24unorm-stencil8",
    "depth32float-stencil8",
    "pipeline-statistics-query",
    "texture-compression-bc",
    "timestamp-query"
  ],
  "GPUFilterMode": [
    "\"linear\"",
    "\"nearest\""
  ],
  "GPUFragmentState": [
    "targets"
  ],
  "GPUFrontFace": [
    "\"ccw\"",
    "\"cw\""
  ],
  "GPUImageCopyBuffer": [
    "buffer"
  ],
  "GPUImageCopyExternalImage": [
    "origin",
    "source"
  ],
  "GPUImageCopyTexture": [
    "aspect",
    "mipLevel",
    "origin",
    "texture"
  ],
  "GPUImageCopyTextureTagged": [
    "colorSpace",
    "premultipliedAlpha"
  ],
  "GPUImageDataLayout": [
    "bytesPerRow",
    "offset",
    "rowsPerImage"
  ],
  "GPUIndexFormat": [
    "\"uint16\"",
    "\"uint32\""
  ],
  "GPUInputStepMode": [
    "\"instance\"",
    "\"vertex\""
  ],
  "GPULoadOp": [
    "\"load\""
  ],
  "GPUMapMode": [
    "READ",
    "WRITE"
  ],
  "GPUMultisampleState": [
    "alphaToCoverageEnabled",
    "count",
    "mask"
  ],
  "GPUObjectBase": [
    "[[device]]",
    "label"
  ],
  "GPUObjectDescriptorBase": [
    "label"
  ],
  "GPUOrigin2DDict": [
    "x",
    "y"
  ],
  "GPUOrigin3DDict": [
    "x",
    "y",
    "z"
  ],
  "GPUOutOfMemoryError": [
    "GPUOutOfMemoryError()",
    "constructor()"
  ],
  "GPUPipelineBase": [
    "[[layout]]",
    "getBindGroupLayout(index)"
  ],
  "GPUPipelineBase/getBindGroupLayout(index)": [
    "index"
  ],
  "GPUPipelineDescriptorBase": [
    "layout"
  ],
  "GPUPipelineLayout": [
    "[[bindGroupLayouts]]"
  ],
  "GPUPipelineLayoutDescriptor": [
    "bindGroupLayouts"
  ],
  "GPUPipelineStatisticName": [
    "\"clipper-invocations\"",
    "\"clipper-primitives-out\"",
    "\"compute-shader-invocations\"",
    "\"fragment-shader-invocations\"",
    "\"vertex-shader-invocations\""
  ],
  "GPUPowerPreference": [
    "\"high-performance\"",
    "\"low-power\""
  ],
  "GPUPredefinedColorSpace": [
    "\"srgb\""
  ],
  "GPUPresentationConfiguration": [
    "colorSpace",
    "compositingAlphaMode",
    "device",
    "format",
    "size",
    "usage"
  ],
  "GPUPresentationContext": [
    "[[canvas]]",
    "[[configuration]]",
    "[[currentTexture]]",
    "[[size]]",
    "[[validConfiguration]]",
    "configure(configuration)",
    "getCurrentTexture()",
    "getPreferredFormat(adapter)",
    "unconfigure()"
  ],
  "GPUPresentationContext/configure(configuration)": [
    "configuration"
  ],
  "GPUPresentationContext/getPreferredFormat(adapter)": [
    "adapter"
  ],
  "GPUPrimitiveState": [
    "clampDepth",
    "cullMode",
    "frontFace",
    "stripIndexFormat",
    "topology"
  ],
  "GPUPrimitiveTopology": [
    "\"line-list\"",
    "\"line-strip\"",
    "\"point-list\"",
    "\"triangle-list\"",
    "\"triangle-strip\""
  ],
  "GPUProgrammablePassEncoder": [
    "[[bind_groups]]",
    "[[command_encoder]]",
    "[[debug_group_stack]]",
    "insertDebugMarker(markerLabel)",
    "popDebugGroup()",
    "pushDebugGroup(groupLabel)",
    "setBindGroup(index, bindGroup)",
    "setBindGroup(index, bindGroup, dynamicOffsets)",
    "setBindGroup(index, bindGroup, dynamicOffsetsData, dynamicOffsetsDataStart, dynamicOffsetsDataLength)"
  ],
  "GPUProgrammablePassEncoder/insertDebugMarker(markerLabel)": [
    "markerLabel"
  ],
  "GPUProgrammablePassEncoder/pushDebugGroup(groupLabel)": [
    "groupLabel"
  ],
  "GPUProgrammablePassEncoder/setBindGroup(index, bindGroup)": [
    "dynamicOffsets"
  ],
  "GPUProgrammablePassEncoder/setBindGroup(index, bindGroup, dynamicOffsets)": [
    "bindGroup",
    "dynamicOffsets",
    "index"
  ],
  "GPUProgrammablePassEncoder/setBindGroup(index, bindGroup, dynamicOffsetsData, dynamicOffsetsDataStart, dynamicOffsetsDataLength)": [
    "bindGroup",
    "dynamicOffsetsData",
    "dynamicOffsetsDataLength",
    "dynamicOffsetsDataStart",
    "index"
  ],
  "GPUProgrammableStage": [
    "constants",
    "entryPoint",
    "module"
  ],
  "GPUQuerySet": [
    "[[descriptor]]",
    "[[state]]",
    "destroy()"
  ],
  "GPUQuerySetDescriptor": [
    "count",
    "pipelineStatistics",
    "type"
  ],
  "GPUQueryType": [
    "\"occlusion\"",
    "\"pipeline-statistics\"",
    "\"timestamp\""
  ],
  "GPUQueue": [
    "copyExternalImageToTexture(source, destination, copySize)",
    "onSubmittedWorkDone()",
    "submit(commandBuffers)",
    "writeBuffer(buffer, bufferOffset, data)",
    "writeBuffer(buffer, bufferOffset, data, dataOffset)",
    "writeBuffer(buffer, bufferOffset, data, dataOffset, size)",
    "writeTexture(destination, data, dataLayout, size)"
  ],
  "GPUQueue/copyExternalImageToTexture(source, destination, copySize)": [
    "copySize",
    "destination",
    "source"
  ],
  "GPUQueue/submit(commandBuffers)": [
    "commandBuffers"
  ],
  "GPUQueue/writeBuffer(buffer, bufferOffset, data, dataOffset, size)": [
    "buffer",
    "bufferOffset",
    "data",
    "dataOffset",
    "size"
  ],
  "GPUQueue/writeTexture(destination, data, dataLayout, size)": [
    "data",
    "dataLayout",
    "destination",
    "size"
  ],
  "GPURenderBundleEncoder": [
    "finish()",
    "finish(descriptor)"
  ],
  "GPURenderBundleEncoder/finish(descriptor)": [
    "descriptor"
  ],
  "GPURenderBundleEncoderDescriptor": [
    "colorFormats",
    "depthStencilFormat",
    "sampleCount"
  ],
  "GPURenderEncoderBase": [
    "[[index_buffer]]",
    "[[index_buffer_size]]",
    "[[index_format]]",
    "[[pipeline]]",
    "[[vertex_buffer_sizes]]",
    "[[vertex_buffers]]",
    "draw(vertexCount)",
    "draw(vertexCount, instanceCount)",
    "draw(vertexCount, instanceCount, firstVertex)",
    "draw(vertexCount, instanceCount, firstVertex, firstInstance)",
    "drawIndexed(indexCount)",
    "drawIndexed(indexCount, instanceCount)",
    "drawIndexed(indexCount, instanceCount, firstIndex)",
    "drawIndexed(indexCount, instanceCount, firstIndex, baseVertex)",
    "drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance)",
    "drawIndexedIndirect(indirectBuffer, indirectOffset)",
    "drawIndirect(indirectBuffer, indirectOffset)",
    "setIndexBuffer(buffer, indexFormat)",
    "setIndexBuffer(buffer, indexFormat, offset)",
    "setIndexBuffer(buffer, indexFormat, offset, size)",
    "setPipeline(pipeline)",
    "setVertexBuffer(slot, buffer)",
    "setVertexBuffer(slot, buffer, offset)",
    "setVertexBuffer(slot, buffer, offset, size)"
  ],
  "GPURenderEncoderBase/draw(vertexCount, instanceCount, firstVertex, firstInstance)": [
    "firstInstance",
    "firstVertex",
    "instanceCount",
    "vertexCount"
  ],
  "GPURenderEncoderBase/drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance)": [
    "baseVertex",
    "firstIndex",
    "firstInstance",
    "indexCount",
    "instanceCount"
  ],
  "GPURenderEncoderBase/drawIndexedIndirect(indirectBuffer, indirectOffset)": [
    "indirectBuffer",
    "indirectOffset"
  ],
  "GPURenderEncoderBase/drawIndirect(indirectBuffer, indirectOffset)": [
    "indirectBuffer",
    "indirectOffset"
  ],
  "GPURenderEncoderBase/setIndexBuffer(buffer, indexFormat, offset, size)": [
    "buffer",
    "indexFormat",
    "offset",
    "size"
  ],
  "GPURenderEncoderBase/setPipeline(pipeline)": [
    "pipeline"
  ],
  "GPURenderEncoderBase/setVertexBuffer(slot, buffer, offset, size)": [
    "buffer",
    "offset",
    "size",
    "slot"
  ],
  "GPURenderPassColorAttachment": [
    "GPURenderPassColorAttachment Valid Usage",
    "loadValue",
    "resolveTarget",
    "storeOp",
    "view"
  ],
  "GPURenderPassDepthStencilAttachment": [
    "GPURenderPassDepthStencilAttachment Valid Usage",
    "depthLoadValue",
    "depthReadOnly",
    "depthStoreOp",
    "stencilLoadValue",
    "stencilReadOnly",
    "stencilStoreOp",
    "view"
  ],
  "GPURenderPassDescriptor": [
    "Valid Usage",
    "colorAttachments",
    "depthStencilAttachment",
    "occlusionQuerySet"
  ],
  "GPURenderPassEncoder": [
    "[[attachment_size]]",
    "[[occlusion_query_active]]",
    "[[occlusion_query_set]]",
    "[[viewport]]",
    "beginOcclusionQuery(queryIndex)",
    "beginPipelineStatisticsQuery(querySet, queryIndex)",
    "endOcclusionQuery()",
    "endPass()",
    "endPipelineStatisticsQuery()",
    "executeBundles(bundles)",
    "setBlendConstant(color)",
    "setScissorRect(x, y, width, height)",
    "setStencilReference(reference)",
    "setViewport(x, y, width, height, minDepth, maxDepth)",
    "writeTimestamp(querySet, queryIndex)"
  ],
  "GPURenderPassEncoder/beginOcclusionQuery(queryIndex)": [
    "queryIndex"
  ],
  "GPURenderPassEncoder/beginPipelineStatisticsQuery(querySet, queryIndex)": [
    "queryIndex",
    "querySet"
  ],
  "GPURenderPassEncoder/executeBundles(bundles)": [
    "bundles"
  ],
  "GPURenderPassEncoder/setBlendConstant(color)": [
    "color"
  ],
  "GPURenderPassEncoder/setScissorRect(x, y, width, height)": [
    "height",
    "width",
    "x",
    "y"
  ],
  "GPURenderPassEncoder/setStencilReference(reference)": [
    "reference"
  ],
  "GPURenderPassEncoder/setViewport(x, y, width, height, minDepth, maxDepth)": [
    "height",
    "maxDepth",
    "minDepth",
    "width",
    "x",
    "y"
  ],
  "GPURenderPassEncoder/writeTimestamp(querySet, queryIndex)": [
    "queryIndex",
    "querySet"
  ],
  "GPURenderPipeline": [
    "[[descriptor]]",
    "[[strip_index_format]]"
  ],
  "GPURenderPipelineDescriptor": [
    "depthStencil",
    "fragment",
    "multisample",
    "primitive",
    "vertex"
  ],
  "GPURequestAdapterOptions": [
    "forceSoftware",
    "powerPreference"
  ],
  "GPUSampler": [
    "[[descriptor]]",
    "[[isComparison]]",
    "[[isFiltering]]"
  ],
  "GPUSamplerBindingLayout": [
    "type"
  ],
  "GPUSamplerBindingType": [
    "\"comparison\"",
    "\"filtering\"",
    "\"non-filtering\""
  ],
  "GPUSamplerDescriptor": [
    "addressModeU",
    "addressModeV",
    "addressModeW",
    "compare",
    "lodMaxClamp",
    "lodMinClamp",
    "magFilter",
    "maxAnisotropy",
    "minFilter",
    "mipmapFilter"
  ],
  "GPUShaderModule": [
    "compilationInfo()"
  ],
  "GPUShaderModuleDescriptor": [
    "code",
    "sourceMap"
  ],
  "GPUShaderStage": [
    "COMPUTE",
    "FRAGMENT",
    "VERTEX"
  ],
  "GPUStencilFaceState": [
    "compare",
    "depthFailOp",
    "failOp",
    "passOp"
  ],
  "GPUStencilOperation": [
    "\"decrement-clamp\"",
    "\"decrement-wrap\"",
    "\"increment-clamp\"",
    "\"increment-wrap\"",
    "\"invert\"",
    "\"keep\"",
    "\"replace\"",
    "\"zero\""
  ],
  "GPUStorageTextureAccess": [
    "\"read-only\"",
    "\"write-only\""
  ],
  "GPUStorageTextureBindingLayout": [
    "access",
    "format",
    "viewDimension"
  ],
  "GPUStoreOp": [
    "\"discard\"",
    "\"store\""
  ],
  "GPUSupportedLimits": [
    "maxBindGroups",
    "maxComputePerDimensionDispatchSize",
    "maxComputeWorkgroupInvocations",
    "maxComputeWorkgroupStorageSize",
    "maxDynamicStorageBuffersPerPipelineLayout",
    "maxDynamicUniformBuffersPerPipelineLayout",
    "maxInterStageShaderComponents",
    "maxSampledTexturesPerShaderStage",
    "maxSamplersPerShaderStage",
    "maxStorageBufferBindingSize",
    "maxStorageBuffersPerShaderStage",
    "maxStorageTexturesPerShaderStage",
    "maxTextureArrayLayers",
    "maxTextureDimension1D",
    "maxTextureDimension2D",
    "maxTextureDimension3D",
    "maxUniformBufferBindingSize",
    "maxUniformBuffersPerShaderStage",
    "maxVertexAttributes",
    "maxVertexBufferArrayStride",
    "maxVertexBuffers",
    "minStorageBufferOffsetAlignment",
    "minUniformBufferOffsetAlignment"
  ],
  "GPUTexture": [
    "[[descriptor]]",
    "[[destroyed]]",
    "createView()",
    "createView(descriptor)",
    "destroy()"
  ],
  "GPUTexture/createView(descriptor)": [
    "descriptor"
  ],
  "GPUTextureAspect": [
    "\"all\"",
    "\"depth-only\"",
    "\"stencil-only\""
  ],
  "GPUTextureBindingLayout": [
    "multisampled",
    "sampleType",
    "viewDimension"
  ],
  "GPUTextureDescriptor": [
    "dimension",
    "format",
    "mipLevelCount",
    "sampleCount",
    "size",
    "usage"
  ],
  "GPUTextureDimension": [
    "\"1d\"",
    "\"2d\"",
    "\"3d\""
  ],
  "GPUTextureFormat": [
    "\"bc1-rgba-unorm\"",
    "\"bc1-rgba-unorm-srgb\"",
    "\"bc2-rgba-unorm\"",
    "\"bc2-rgba-unorm-srgb\"",
    "\"bc3-rgba-unorm\"",
    "\"bc3-rgba-unorm-srgb\"",
    "\"bc4-r-snorm\"",
    "\"bc4-r-unorm\"",
    "\"bc5-rg-snorm\"",
    "\"bc5-rg-unorm\"",
    "\"bc6h-rgb-float\"",
    "\"bc6h-rgb-ufloat\"",
    "\"bc7-rgba-unorm\"",
    "\"bc7-rgba-unorm-srgb\"",
    "\"bgra8unorm\"",
    "\"bgra8unorm-srgb\"",
    "\"depth16unorm\"",
    "\"depth24plus\"",
    "\"depth24plus-stencil8\"",
    "\"depth24unorm-stencil8\"",
    "\"depth32float\"",
    "\"depth32float-stencil8\"",
    "\"r16float\"",
    "\"r16sint\"",
    "\"r16uint\"",
    "\"r32float\"",
    "\"r32sint\"",
    "\"r32uint\"",
    "\"r8sint\"",
    "\"r8snorm\"",
    "\"r8uint\"",
    "\"r8unorm\"",
    "\"rg11b10ufloat\"",
    "\"rg16float\"",
    "\"rg16sint\"",
    "\"rg16uint\"",
    "\"rg32float\"",
    "\"rg32sint\"",
    "\"rg32uint\"",
    "\"rg8sint\"",
    "\"rg8snorm\"",
    "\"rg8uint\"",
    "\"rg8unorm\"",
    "\"rgb10a2unorm\"",
    "\"rgb9e5ufloat\"",
    "\"rgba16float\"",
    "\"rgba16sint\"",
    "\"rgba16uint\"",
    "\"rgba32float\"",
    "\"rgba32sint\"",
    "\"rgba32uint\"",
    "\"rgba8sint\"",
    "\"rgba8snorm\"",
    "\"rgba8uint\"",
    "\"rgba8unorm\"",
    "\"rgba8unorm-srgb\"",
    "\"stencil8\""
  ],
  "GPUTextureSampleType": [
    "\"depth\"",
    "\"float\"",
    "\"sint\"",
    "\"uint\"",
    "\"unfilterable-float\""
  ],
  "GPUTextureUsage": [
    "COPY_DST",
    "COPY_SRC",
    "RENDER_ATTACHMENT",
    "SAMPLED",
    "STORAGE"
  ],
  "GPUTextureView": [
    "[[descriptor]]",
    "[[renderExtent]]",
    "[[texture]]"
  ],
  "GPUTextureViewDescriptor": [
    "arrayLayerCount",
    "aspect",
    "baseArrayLayer",
    "baseMipLevel",
    "dimension",
    "format",
    "mipLevelCount"
  ],
  "GPUTextureViewDimension": [
    "\"1d\"",
    "\"2d\"",
    "\"2d-array\"",
    "\"3d\"",
    "\"cube\"",
    "\"cube-array\""
  ],
  "GPUUncapturedErrorEvent": [
    "GPUUncapturedErrorEvent(type, gpuUncapturedErrorEventInitDict)",
    "constructor(type, gpuUncapturedErrorEventInitDict)",
    "error"
  ],
  "GPUUncapturedErrorEvent/GPUUncapturedErrorEvent(type, gpuUncapturedErrorEventInitDict)": [
    "gpuUncapturedErrorEventInitDict",
    "type"
  ],
  "GPUUncapturedErrorEvent/constructor(type, gpuUncapturedErrorEventInitDict)": [
    "gpuUncapturedErrorEventInitDict",
    "type"
  ],
  "GPUUncapturedErrorEventInit": [
    "error"
  ],
  "GPUValidationError": [
    "GPUValidationError(message)",
    "constructor(message)",
    "message"
  ],
  "GPUValidationError/GPUValidationError(message)": [
    "message"
  ],
  "GPUValidationError/constructor(message)": [
    "message"
  ],
  "GPUVertexAttribute": [
    "format",
    "offset",
    "shaderLocation"
  ],
  "GPUVertexBufferLayout": [
    "arrayStride",
    "attributes",
    "stepMode"
  ],
  "GPUVertexFormat": [
    "\"float16x2\"",
    "\"float16x4\"",
    "\"float32\"",
    "\"float32x2\"",
    "\"float32x3\"",
    "\"float32x4\"",
    "\"sint16x2\"",
    "\"sint16x4\"",
    "\"sint32\"",
    "\"sint32x2\"",
    "\"sint32x3\"",
    "\"sint32x4\"",
    "\"sint8x2\"",
    "\"sint8x4\"",
    "\"snorm16x2\"",
    "\"snorm16x4\"",
    "\"snorm8x2\"",
    "\"snorm8x4\"",
    "\"uint16x2\"",
    "\"uint16x4\"",
    "\"uint32\"",
    "\"uint32x2\"",
    "\"uint32x3\"",
    "\"uint32x4\"",
    "\"uint8x2\"",
    "\"uint8x4\"",
    "\"unorm16x2\"",
    "\"unorm16x4\"",
    "\"unorm8x2\"",
    "\"unorm8x4\""
  ],
  "GPUVertexState": [
    "buffers"
  ],
  "GainNode": [
    "GainNode(context)",
    "GainNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "gain"
  ],
  "GainNode/GainNode(context)": [
    "context",
    "options"
  ],
  "GainNode/GainNode(context, options)": [
    "context",
    "options"
  ],
  "GainNode/constructor()": [
    "GainNode(context, options)",
    "context",
    "options"
  ],
  "GainNode/constructor(context)": [
    "context",
    "options"
  ],
  "GainNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "GainOptions": [
    "gain"
  ],
  "Gamepad": [
    "[[axes]]",
    "[[axisMapping]]",
    "[[axisMaximums]]",
    "[[axisMinimums]]",
    "[[buttonMapping]]",
    "[[buttonMaximums]]",
    "[[buttonMinimums]]",
    "[[buttons]]",
    "[[connected]]",
    "[[exposed]]",
    "[[timestamp]]",
    "axes",
    "buttons",
    "connected",
    "hand",
    "hapticActuators",
    "id",
    "index",
    "mapping",
    "pose",
    "timestamp",
    "touchEvents"
  ],
  "GamepadButton": [
    "[[pressed]]",
    "[[touched]]",
    "[[value]]",
    "pressed",
    "touched",
    "value"
  ],
  "GamepadEvent": [
    "constructor()",
    "constructor(type, eventInitDict)",
    "gamepad"
  ],
  "GamepadEventInit": [
    "gamepad"
  ],
  "GamepadHand": [
    "\"\"",
    "left",
    "right",
    "the-empty-string"
  ],
  "GamepadHapticActuator": [
    "pulse()",
    "pulse(value, duration)",
    "type"
  ],
  "GamepadHapticActuatorType": [
    "vibration"
  ],
  "GamepadMappingType": [
    "\"\"",
    "\"standard\"",
    "\"xr-standard\"",
    "standard",
    "the-empty-string",
    "xr-standard"
  ],
  "GamepadPose": [
    "angularAcceleration",
    "angularVelocity",
    "hasOrientation",
    "hasPosition",
    "linearAcceleration",
    "linearVelocity",
    "orientation",
    "position"
  ],
  "GamepadTouch": [
    "position",
    "surfaceDimensions",
    "surfaceId",
    "touchId"
  ],
  "GenerateTestReportParameters": [
    "group",
    "message"
  ],
  "GenericTransformStream": [
    "readable",
    "transform",
    "writable"
  ],
  "Geolocation": [
    "Geolocation",
    "[[cachedPosition]]",
    "[[watchTasks]]",
    "clearWatch()",
    "clearWatch(watchId)",
    "getCurrentPosition()",
    "getCurrentPosition(successCallback)",
    "getCurrentPosition(successCallback, errorCallback)",
    "getCurrentPosition(successCallback, errorCallback, options)",
    "watchPosition()",
    "watchPosition(successCallback)",
    "watchPosition(successCallback, errorCallback)",
    "watchPosition(successCallback, errorCallback, options)"
  ],
  "GeolocationCoordinates": [
    "accuracy",
    "altitude",
    "altitudeAccuracy",
    "heading",
    "latitude",
    "longitude",
    "speed"
  ],
  "GeolocationPosition": [
    "GeolocationPosition",
    "[[isHighAccuracy]]",
    "coords",
    "timestamp"
  ],
  "GeolocationPositionError": [
    "PERMISSION_DENIED",
    "POSITION_UNAVAILABLE",
    "TIMEOUT",
    "code",
    "message"
  ],
  "GeolocationReadingValues": [
    "accuracy",
    "altitude",
    "altitudeAccuracy",
    "heading",
    "latitude",
    "longitude",
    "speed"
  ],
  "GeolocationSensor": [
    "GeolocationSensor()",
    "GeolocationSensor(options)",
    "accuracy",
    "altitude",
    "altitudeAccuracy",
    "constructor()",
    "constructor(options)",
    "heading",
    "latitude",
    "longitude",
    "read()",
    "read(readOptions)",
    "speed"
  ],
  "GeolocationSensor/GeolocationSensor()": [
    "options"
  ],
  "GeolocationSensor/GeolocationSensor(options)": [
    "options"
  ],
  "GeolocationSensor/constructor()": [
    "options"
  ],
  "GeolocationSensor/constructor(options)": [
    "options"
  ],
  "GeolocationSensor/read()": [
    "readOptions"
  ],
  "GeolocationSensor/read(readOptions)": [
    "readOptions"
  ],
  "GeolocationSensorReading": [
    "accuracy",
    "altitude",
    "altitudeAccuracy",
    "heading",
    "latitude",
    "longitude",
    "speed",
    "timestamp"
  ],
  "GeometryUtils": [
    "convertPointFromNode(point, from)",
    "convertPointFromNode(point, from, options)",
    "convertQuadFromNode(quad, from)",
    "convertQuadFromNode(quad, from, options)",
    "convertRectFromNode(rect, from)",
    "convertRectFromNode(rect, from, options)",
    "getBoxQuads()",
    "getBoxQuads(options)"
  ],
  "GeometryUtils/convertPointFromNode(point, from)": [
    "from",
    "options",
    "point"
  ],
  "GeometryUtils/convertPointFromNode(point, from, options)": [
    "from",
    "options",
    "point"
  ],
  "GeometryUtils/convertQuadFromNode(quad, from)": [
    "from",
    "options",
    "quad"
  ],
  "GeometryUtils/convertQuadFromNode(quad, from, options)": [
    "from",
    "options",
    "quad"
  ],
  "GeometryUtils/convertRectFromNode(rect, from)": [
    "from",
    "options",
    "rect"
  ],
  "GeometryUtils/convertRectFromNode(rect, from, options)": [
    "from",
    "options",
    "rect"
  ],
  "GeometryUtils/getBoxQuads()": [
    "options"
  ],
  "GeometryUtils/getBoxQuads(options)": [
    "options"
  ],
  "GetAnimationsOptions": [
    "subtree"
  ],
  "GetNotificationOptions": [
    "tag"
  ],
  "GetRootNodeOptions": [
    "composed"
  ],
  "GetSVGDocument": [
    "getSVGDocument"
  ],
  "Global": [
    "Global(descriptor)",
    "Global(descriptor, v)",
    "constructor(descriptor)",
    "constructor(descriptor, v)",
    "value",
    "valueOf()"
  ],
  "Global/Global(descriptor)": [
    "descriptor",
    "v"
  ],
  "Global/Global(descriptor, v)": [
    "descriptor",
    "v"
  ],
  "Global/constructor(descriptor)": [
    "descriptor",
    "v"
  ],
  "Global/constructor(descriptor, v)": [
    "descriptor",
    "v"
  ],
  "GlobalDescriptor": [
    "mutable",
    "value"
  ],
  "GlobalEventHandlers": [
    "drag",
    "dragend",
    "dragenter",
    "dragleave",
    "dragover",
    "dragstart",
    "drop",
    "onabort",
    "onanimationcancel",
    "onanimationend",
    "onanimationiteration",
    "onanimationstart",
    "onauxclick",
    "onbeforexrselect",
    "onblur",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onerror",
    "onfocus",
    "onformdata",
    "ongotpointercapture",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onload",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onlostpointercapture",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onoverscroll",
    "onpause",
    "onplay",
    "onplaying",
    "onpointercancel",
    "onpointerdown",
    "onpointerenter",
    "onpointerleave",
    "onpointermove",
    "onpointerout",
    "onpointerover",
    "onpointerrawupdate",
    "onpointerup",
    "onprogress",
    "onratechange",
    "onreset",
    "onresize",
    "onscroll",
    "onscrollend",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onselectionchange",
    "onselectstart",
    "onslotchange",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "ontouchcancel",
    "ontouchend",
    "ontouchmove",
    "ontouchstart",
    "ontransitioncancel",
    "ontransitionend",
    "ontransitionrun",
    "ontransitionstart",
    "onvolumechange",
    "onwaiting",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkittransitionend",
    "onwheel"
  ],
  "GravitySensor": [
    "GravitySensor()",
    "GravitySensor(options)",
    "constructor()",
    "constructor(options)"
  ],
  "GravitySensor/GravitySensor()": [
    "options"
  ],
  "GravitySensor/GravitySensor(options)": [
    "options"
  ],
  "GravitySensor/constructor()": [
    "options"
  ],
  "GravitySensor/constructor(options)": [
    "options"
  ],
  "GroupEffect": [
    "GroupEffect(children)",
    "GroupEffect(children, timing)",
    "append()",
    "append(...effects)",
    "children",
    "clone()",
    "constructor(children)",
    "constructor(children, timing)",
    "firstChild",
    "lastChild",
    "prepend()",
    "prepend(...effects)"
  ],
  "GroupEffect/GroupEffect(children, timing)": [
    "children",
    "timing"
  ],
  "GroupEffect/append()": [
    "effects"
  ],
  "GroupEffect/append(...effects)": [
    "effects"
  ],
  "GroupEffect/prepend()": [
    "effects"
  ],
  "GroupEffect/prepend(...effects)": [
    "effects"
  ],
  "Gyroscope": [
    "Gyroscope()",
    "Gyroscope(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)",
    "x",
    "y",
    "z"
  ],
  "Gyroscope/Gyroscope()": [
    "sensorOptions"
  ],
  "Gyroscope/Gyroscope(sensorOptions)": [
    "sensorOptions"
  ],
  "Gyroscope/constructor()": [
    "sensorOptions"
  ],
  "Gyroscope/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "GyroscopeLocalCoordinateSystem": [
    "\"device\"",
    "\"screen\""
  ],
  "GyroscopeReadingValues": [
    "x",
    "y",
    "z"
  ],
  "GyroscopeSensorOptions": [
    "referenceFrame"
  ],
  "HID": [
    "HID",
    "[[devices]]",
    "getDevices()",
    "onconnect",
    "ondisconnect",
    "requestDevice()",
    "requestDevice(options)"
  ],
  "HIDCollectionInfo": [
    "HIDCollectionInfo",
    "children",
    "featureReports",
    "inputReports",
    "outputReports",
    "type",
    "usage",
    "usagePage"
  ],
  "HIDConnectionEvent": [
    "HIDConnectionEvent",
    "constructor()",
    "constructor(type, eventInitDict)",
    "device"
  ],
  "HIDConnectionEventInit": [
    "HIDConnectionEventInit",
    "device"
  ],
  "HIDDevice": [
    "HIDDevice",
    "[[collections]]",
    "[[pendingReceiveFeatureReportPromises]]",
    "[[pendingSendFeatureReportPromises]]",
    "[[pendingSendReportPromises]]",
    "[[productId]]",
    "[[productName]]",
    "[[state]]",
    "[[vendorId]]",
    "close()",
    "collections",
    "oninputreport",
    "open()",
    "opened",
    "productId",
    "productName",
    "receiveFeatureReport()",
    "receiveFeatureReport(reportId)",
    "sendFeatureReport()",
    "sendFeatureReport(reportId, data)",
    "sendReport()",
    "sendReport(reportId, data)",
    "vendorId"
  ],
  "HIDDeviceFilter": [
    "productId",
    "usage",
    "usagePage",
    "vendorId"
  ],
  "HIDDeviceRequestOptions": [
    "filters"
  ],
  "HIDInputReportEvent": [
    "HIDInputReportEvent",
    "constructor()",
    "constructor(type, eventInitDict)",
    "data",
    "device",
    "reportId"
  ],
  "HIDInputReportEventInit": [
    "HIDInputReportEventInit",
    "data",
    "device",
    "reportId"
  ],
  "HIDReportInfo": [
    "HIDReportInfo",
    "items",
    "reportId"
  ],
  "HIDReportItem": [
    "HIDReportItem",
    "hasNull",
    "hasPreferredState",
    "isAbsolute",
    "isArray",
    "isBufferedBytes",
    "isConstant",
    "isLinear",
    "isRange",
    "isVolatile",
    "logicalMaximum",
    "logicalMinimum",
    "physicalMaximum",
    "physicalMinimum",
    "reportCount",
    "reportSize",
    "strings",
    "unitExponent",
    "unitFactorCurrentExponent",
    "unitFactorLengthExponent",
    "unitFactorLuminousIntensityExponent",
    "unitFactorMassExponent",
    "unitFactorTemperatureExponent",
    "unitFactorTimeExponent",
    "unitSystem",
    "usageMaximum",
    "usageMinimum",
    "usages",
    "wrap"
  ],
  "HIDUnitSystem": [
    "english-linear",
    "english-rotation",
    "none",
    "reserved",
    "si-linear",
    "si-rotation",
    "vendor-defined"
  ],
  "HTMLAllCollection": [
    "item(nameOrIndex)",
    "length",
    "namedItem(name)"
  ],
  "HTMLAnchorElement": [
    "attributionDestination",
    "attributionSourceId",
    "charset",
    "coords",
    "download",
    "hreflang",
    "name",
    "ping",
    "referrerPolicy",
    "rel",
    "relList",
    "rev",
    "shape",
    "target",
    "text",
    "type"
  ],
  "HTMLAreaElement": [
    "alt",
    "coords",
    "download",
    "noHref",
    "ping",
    "referrerPolicy",
    "rel",
    "relList",
    "shape",
    "target"
  ],
  "HTMLBRElement": [
    "clear"
  ],
  "HTMLBaseElement": [
    "href",
    "target"
  ],
  "HTMLBodyElement": [
    "aLink",
    "background",
    "bgColor",
    "link",
    "onorientationchange",
    "text",
    "vLink"
  ],
  "HTMLButtonElement": [
    "checkValidity()",
    "disabled",
    "form",
    "formAction",
    "formEnctype",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "labels",
    "name",
    "reportValidity()",
    "setCustomValidity(error)",
    "type",
    "validationMessage",
    "validity",
    "value",
    "willValidate"
  ],
  "HTMLCanvasElement": [
    "captureStream()",
    "captureStream(frameRequestRate)",
    "getContext(contextId, options)",
    "height",
    "toBlob(callback, type, quality)",
    "toDataURL(type, quality)",
    "transferControlToOffscreen()",
    "width"
  ],
  "HTMLCollection": [
    "item(index)",
    "length",
    "namedItem(key)",
    "namedItem(name)"
  ],
  "HTMLCollection/item(index)": [
    "index"
  ],
  "HTMLCollection/namedItem(name)": [
    "name"
  ],
  "HTMLDListElement": [
    "compact"
  ],
  "HTMLDataElement": [
    "value"
  ],
  "HTMLDataListElement": [
    "options"
  ],
  "HTMLDetailsElement": [
    "open"
  ],
  "HTMLDialogElement": [
    "close(returnValue)",
    "open",
    "returnValue",
    "show()",
    "showModal()"
  ],
  "HTMLDirectoryElement": [
    "compact"
  ],
  "HTMLDivElement": [
    "align"
  ],
  "HTMLElement": [
    "accessKey",
    "accessKeyLabel",
    "attachInternals()",
    "autocapitalize",
    "blur",
    "cancel",
    "change",
    "click()",
    "close",
    "contextmenu",
    "copy",
    "cut",
    "dir",
    "draggable",
    "error",
    "focus",
    "formdata",
    "hidden",
    "innerText",
    "input",
    "invalid",
    "lang",
    "load",
    "offsetHeight",
    "offsetLeft",
    "offsetParent",
    "offsetTop",
    "offsetWidth",
    "onabort",
    "onauxclick",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onformdata",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onpause",
    "onplay",
    "onplaying",
    "onprogress",
    "onratechange",
    "onreset",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onslotchange",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "onvolumechange",
    "onwaiting",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkittransitionend",
    "onwheel",
    "outerText",
    "paste",
    "reset",
    "securitypolicyviolation",
    "select",
    "spellcheck",
    "style",
    "submit",
    "title",
    "toggle",
    "translate"
  ],
  "HTMLEmbedElement": [
    "align",
    "getSVGDocument()",
    "height",
    "name",
    "src",
    "type",
    "width"
  ],
  "HTMLFieldSetElement": [
    "checkValidity()",
    "disabled",
    "elements",
    "form",
    "name",
    "reportValidity()",
    "setCustomValidity(error)",
    "type",
    "validationMessage",
    "validity",
    "willValidate"
  ],
  "HTMLFontElement": [
    "color",
    "face",
    "size"
  ],
  "HTMLFormControlsCollection": [
    "namedItem(name)"
  ],
  "HTMLFormElement": [
    "acceptCharset",
    "action",
    "autocomplete",
    "checkValidity()",
    "elements",
    "encoding",
    "enctype",
    "length",
    "method",
    "name",
    "noValidate",
    "rel",
    "relList",
    "reportValidity()",
    "requestSubmit(submitter)",
    "reset()",
    "submit()",
    "target"
  ],
  "HTMLFrameElement": [
    "contentDocument",
    "contentWindow",
    "frameBorder",
    "longDesc",
    "marginHeight",
    "marginWidth",
    "name",
    "noResize",
    "scrolling",
    "src"
  ],
  "HTMLFrameSetElement": [
    "cols",
    "rows"
  ],
  "HTMLHRElement": [
    "align",
    "color",
    "noShade",
    "size",
    "width"
  ],
  "HTMLHeadElement": [
    "profile"
  ],
  "HTMLHeadingElement": [
    "align"
  ],
  "HTMLHtmlElement": [
    "version"
  ],
  "HTMLHyperlinkElementUtils": [
    "hash",
    "host",
    "hostname",
    "href",
    "origin",
    "password",
    "pathname",
    "port",
    "protocol",
    "search",
    "username"
  ],
  "HTMLIFrameElement": [
    "align",
    "allow",
    "allowFullscreen",
    "contentDocument",
    "contentWindow",
    "csp",
    "frameBorder",
    "getSVGDocument()",
    "height",
    "loading",
    "longDesc",
    "marginHeight",
    "marginWidth",
    "name",
    "permissionsPolicy",
    "referrerPolicy",
    "sandbox",
    "scrolling",
    "src",
    "srcdoc",
    "width"
  ],
  "HTMLImageElement": [
    "align",
    "alt",
    "border",
    "complete",
    "crossOrigin",
    "currentSrc",
    "decode()",
    "decoding",
    "height",
    "hspace",
    "isMap",
    "loading",
    "longDesc",
    "lowsrc",
    "name",
    "naturalHeight",
    "naturalWidth",
    "referrerPolicy",
    "sizes",
    "src",
    "srcset",
    "useMap",
    "vspace",
    "width",
    "x",
    "y"
  ],
  "HTMLInputElement": [
    "accept",
    "align",
    "alt",
    "autocomplete",
    "capture",
    "checkValidity()",
    "checked",
    "defaultChecked",
    "defaultValue",
    "dirName",
    "disabled",
    "files",
    "form",
    "formAction",
    "formEnctype",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "height",
    "indeterminate",
    "labels",
    "list",
    "max",
    "maxLength",
    "min",
    "minLength",
    "multiple",
    "name",
    "pattern",
    "placeholder",
    "readOnly",
    "reportValidity()",
    "required",
    "select()",
    "selectionDirection",
    "selectionEnd",
    "selectionStart",
    "setCustomValidity(error)",
    "setRangeText(replacement, start, end, selectMode)",
    "setSelectionRange(start, end, direction)",
    "size",
    "src",
    "step",
    "stepDown(n)",
    "stepUp(n)",
    "type",
    "useMap",
    "validationMessage",
    "validity",
    "value",
    "valueAsDate",
    "valueAsNumber",
    "webkitEntries",
    "webkitdirectory",
    "width",
    "willValidate"
  ],
  "HTMLLIElement": [
    "type",
    "value"
  ],
  "HTMLLabelElement": [
    "control",
    "form",
    "htmlFor"
  ],
  "HTMLLegendElement": [
    "align",
    "form"
  ],
  "HTMLLinkElement": [
    "as",
    "charset",
    "crossOrigin",
    "disabled",
    "href",
    "hreflang",
    "imageSizes",
    "imageSrcset",
    "integrity",
    "media",
    "referrerPolicy",
    "rel",
    "relList",
    "rev",
    "sizes",
    "target",
    "type"
  ],
  "HTMLMapElement": [
    "areas",
    "name"
  ],
  "HTMLMarqueeElement": [
    "behavior",
    "bgColor",
    "direction",
    "height",
    "hspace",
    "loop",
    "scrollAmount",
    "scrollDelay",
    "start()",
    "stop()",
    "trueSpeed",
    "vspace",
    "width"
  ],
  "HTMLMediaElement": [
    "HAVE_CURRENT_DATA",
    "HAVE_ENOUGH_DATA",
    "HAVE_FUTURE_DATA",
    "HAVE_METADATA",
    "HAVE_NOTHING",
    "NETWORK_EMPTY",
    "NETWORK_IDLE",
    "NETWORK_LOADING",
    "NETWORK_NO_SOURCE",
    "[[SinkId]]",
    "abort",
    "addTextTrack(kind, label, language)",
    "audioTracks",
    "autoplay",
    "buffered",
    "canPlayType(type)",
    "canplay",
    "canplaythrough",
    "captureStream()",
    "controls",
    "crossOrigin",
    "cuechange",
    "currentSrc",
    "currentTime",
    "defaultMuted",
    "defaultPlaybackRate",
    "disableRemotePlayback",
    "duration",
    "durationchange",
    "effective media volume",
    "emptied",
    "ended",
    "enter",
    "error",
    "exit",
    "fastSeek(time)",
    "getStartDate()",
    "load()",
    "loadeddata",
    "loadedmetadata",
    "loadstart",
    "loop",
    "media data",
    "mediaKeys",
    "muted",
    "networkState",
    "onencrypted",
    "onwaitingforkey",
    "pause",
    "pause()",
    "paused",
    "play",
    "play()",
    "playbackRate",
    "played",
    "playing",
    "preload",
    "preservesPitch",
    "progress",
    "ratechange",
    "readyState",
    "remote",
    "resize",
    "resume frozen flag",
    "seekable",
    "seeked",
    "seeking",
    "setMediaKeys()",
    "setMediaKeys(mediaKeys)",
    "setSinkId()",
    "setSinkId(sinkId)",
    "sinkId",
    "src",
    "srcObject",
    "stalled",
    "suspend",
    "textTracks",
    "timeupdate",
    "videoTracks",
    "volume",
    "volumechange",
    "waiting"
  ],
  "HTMLMenuElement": [
    "compact"
  ],
  "HTMLMetaElement": [
    "content",
    "httpEquiv",
    "media",
    "name",
    "scheme"
  ],
  "HTMLMeterElement": [
    "high",
    "labels",
    "low",
    "max",
    "min",
    "optimum",
    "value"
  ],
  "HTMLModElement": [
    "cite",
    "dateTime"
  ],
  "HTMLOListElement": [
    "compact",
    "reversed",
    "start",
    "type"
  ],
  "HTMLObjectElement": [
    "align",
    "archive",
    "border",
    "checkValidity()",
    "code",
    "codeBase",
    "codeType",
    "contentDocument",
    "contentWindow",
    "data",
    "declare",
    "form",
    "getSVGDocument()",
    "height",
    "hspace",
    "name",
    "reportValidity()",
    "setCustomValidity(error)",
    "standby",
    "type",
    "useMap",
    "validationMessage",
    "validity",
    "vspace",
    "width",
    "willValidate"
  ],
  "HTMLOptGroupElement": [
    "disabled",
    "label"
  ],
  "HTMLOptionElement": [
    "Option(text, value, defaultSelected, selected)",
    "defaultSelected",
    "disabled",
    "form",
    "index",
    "label",
    "selected",
    "text",
    "value"
  ],
  "HTMLOptionsCollection": [
    "add(element, before)",
    "length",
    "remove(index)",
    "selectedIndex"
  ],
  "HTMLOrSVGElement": [
    "[[CryptographicNonce]]",
    "autofocus",
    "blur()",
    "dataset",
    "focus(options)",
    "nonce",
    "tabIndex"
  ],
  "HTMLOutputElement": [
    "checkValidity()",
    "defaultValue",
    "form",
    "htmlFor",
    "labels",
    "name",
    "reportValidity()",
    "setCustomValidity(error)",
    "type",
    "validationMessage",
    "validity",
    "value",
    "willValidate"
  ],
  "HTMLParagraphElement": [
    "align"
  ],
  "HTMLParamElement": [
    "name",
    "type",
    "value",
    "valueType"
  ],
  "HTMLPortalElement": [
    "HTMLPortalElement()",
    "activate()",
    "activate(options)",
    "constructor()",
    "guest browsing context",
    "just-adopted flag",
    "message",
    "messageerror",
    "onmessage",
    "onmessageerror",
    "postMessage(message)",
    "postMessage(message, options)",
    "referrerPolicy",
    "src"
  ],
  "HTMLPortalElement/activate()": [
    "options"
  ],
  "HTMLPortalElement/activate(options)": [
    "options"
  ],
  "HTMLPortalElement/postMessage(message)": [
    "message",
    "options"
  ],
  "HTMLPortalElement/postMessage(message, options)": [
    "message",
    "options"
  ],
  "HTMLPreElement": [
    "width"
  ],
  "HTMLProgressElement": [
    "labels",
    "max",
    "position",
    "value"
  ],
  "HTMLQuoteElement": [
    "cite"
  ],
  "HTMLScriptElement": [
    "[[ScriptText]]",
    "[[ScriptURL]]",
    "async",
    "charset",
    "crossOrigin",
    "defer",
    "event",
    "htmlFor",
    "innerText",
    "integrity",
    "noModule",
    "referrerPolicy",
    "src",
    "text",
    "textContent",
    "type"
  ],
  "HTMLSelectElement": [
    "add(element, before)",
    "autocomplete",
    "checkValidity()",
    "disabled",
    "form",
    "item(index)",
    "labels",
    "length",
    "multiple",
    "name",
    "namedItem(name)",
    "options",
    "remove()",
    "reportValidity()",
    "required",
    "selectedIndex",
    "selectedOptions",
    "setCustomValidity(error)",
    "size",
    "type",
    "validationMessage",
    "validity",
    "value",
    "willValidate"
  ],
  "HTMLSlotElement": [
    "assign(...nodes)",
    "assignedElements(options)",
    "assignedNodes(options)",
    "manually assigned nodes",
    "name",
    "slotchange"
  ],
  "HTMLSourceElement": [
    "error",
    "height",
    "media",
    "sizes",
    "src",
    "srcset",
    "type",
    "width"
  ],
  "HTMLStyleElement": [
    "media",
    "type"
  ],
  "HTMLTableCaptionElement": [
    "align"
  ],
  "HTMLTableCellElement": [
    "abbr",
    "align",
    "axis",
    "bgColor",
    "cellIndex",
    "ch",
    "chOff",
    "colSpan",
    "headers",
    "height",
    "noWrap",
    "rowSpan",
    "scope",
    "vAlign",
    "width"
  ],
  "HTMLTableColElement": [
    "align",
    "ch",
    "chOff",
    "span",
    "vAlign",
    "width"
  ],
  "HTMLTableElement": [
    "align",
    "bgColor",
    "border",
    "caption",
    "cellPadding",
    "cellSpacing",
    "createCaption()",
    "createTBody()",
    "createTFoot()",
    "createTHead()",
    "deleteCaption()",
    "deleteRow(index)",
    "deleteTFoot()",
    "deleteTHead()",
    "frame",
    "insertRow(index)",
    "rows",
    "rules",
    "summary",
    "tBodies",
    "tFoot",
    "tHead",
    "width"
  ],
  "HTMLTableRowElement": [
    "align",
    "bgColor",
    "cells",
    "ch",
    "chOff",
    "deleteCell(index)",
    "insertCell(index)",
    "rowIndex",
    "sectionRowIndex",
    "vAlign"
  ],
  "HTMLTableSectionElement": [
    "align",
    "ch",
    "chOff",
    "deleteRow(index)",
    "insertRow(index)",
    "rows",
    "vAlign"
  ],
  "HTMLTemplateElement": [
    "content"
  ],
  "HTMLTextAreaElement": [
    "autocomplete",
    "checkValidity()",
    "cols",
    "defaultValue",
    "dirName",
    "disabled",
    "form",
    "labels",
    "maxLength",
    "minLength",
    "name",
    "placeholder",
    "readOnly",
    "reportValidity()",
    "required",
    "rows",
    "select()",
    "selectionDirection",
    "selectionEnd",
    "selectionStart",
    "setCustomValidity(error)",
    "setRangeText(replacement, start, end, selectMode)",
    "setSelectionRange(start, end, direction)",
    "textLength",
    "type",
    "validationMessage",
    "validity",
    "value",
    "willValidate",
    "wrap"
  ],
  "HTMLTimeElement": [
    "dateTime"
  ],
  "HTMLTitleElement": [
    "text"
  ],
  "HTMLTrackElement": [
    "ERROR",
    "LOADED",
    "LOADING",
    "NONE",
    "default",
    "error",
    "kind",
    "label",
    "load",
    "readyState",
    "src",
    "srclang",
    "track"
  ],
  "HTMLUListElement": [
    "compact",
    "type"
  ],
  "HTMLVideoElement": [
    "autoPictureInPicture",
    "cancelVideoFrameCallback(handle)",
    "disablePictureInPicture",
    "enterpictureinpicture",
    "getVideoPlaybackQuality()",
    "height",
    "leavepictureinpicture",
    "onenterpictureinpicture",
    "onleavepictureinpicture",
    "playsInline",
    "poster",
    "requestPictureInPicture()",
    "requestVideoFrameCallback(callback)",
    "videoHeight",
    "videoWidth",
    "width"
  ],
  "HTMLVideoElement/cancelVideoFrameCallback(handle)": [
    "handle"
  ],
  "HTMLVideoElement/requestVideoFrameCallback(callback)": [
    "callback"
  ],
  "HardwareAcceleration": [
    "\"allow\"",
    "\"deny\"",
    "\"require\"",
    "allow",
    "deny",
    "require"
  ],
  "HashAlgorithmIdentifier": [
    "HashAlgorithmIdentifier"
  ],
  "HashChangeEvent": [
    "newURL",
    "oldURL"
  ],
  "HdrMetadataType": [
    "\"smpteSt2086\"",
    "\"smpteSt2094-10\"",
    "\"smpteSt2094-40\"",
    "smpteSt2086",
    "smpteSt2094-10",
    "smpteSt2094-40"
  ],
  "Headers": [
    "Headers()",
    "Headers(init)",
    "append",
    "append(name, value)",
    "constructor()",
    "constructor(init)",
    "delete(name)",
    "fill",
    "get(name)",
    "guard",
    "has(name)",
    "header list",
    "remove privileged no-cors request headers",
    "set(name, value)"
  ],
  "Headers/Headers()": [
    "init"
  ],
  "Headers/Headers(init)": [
    "init"
  ],
  "Headers/append(name, value)": [
    "name",
    "value"
  ],
  "Headers/constructor()": [
    "init"
  ],
  "Headers/constructor(init)": [
    "init"
  ],
  "Headers/delete(name)": [
    "name"
  ],
  "Headers/get(name)": [
    "name"
  ],
  "Headers/has(name)": [
    "name"
  ],
  "Headers/set(name, value)": [
    "name",
    "value"
  ],
  "Highlight": [
    "Highlight()",
    "Highlight(...initialRanges)",
    "Highlight(name)",
    "Highlight(name, ...initialRanges)",
    "constructor()",
    "constructor(...initialRanges)",
    "constructor(name)",
    "constructor(name, ...initialRanges)",
    "name",
    "priority"
  ],
  "Highlight/Highlight()": [
    "initialRanges"
  ],
  "Highlight/Highlight(...initialRanges)": [
    "initialRanges"
  ],
  "Highlight/Highlight(name)": [
    "initialRanges",
    "name"
  ],
  "Highlight/Highlight(name, ...initialRanges)": [
    "initialRanges",
    "name"
  ],
  "Highlight/constructor()": [
    "initialRanges"
  ],
  "Highlight/constructor(...initialRanges)": [
    "initialRanges"
  ],
  "Highlight/constructor(name)": [
    "initialRanges",
    "name"
  ],
  "Highlight/constructor(name, ...initialRanges)": [
    "initialRanges",
    "name"
  ],
  "HighlightsRegister": [
    "add(value)"
  ],
  "HighlightsRegister/add(value)": [
    "value"
  ],
  "History": [
    "back()",
    "forward()",
    "go(delta)",
    "length",
    "pushState(data, unused, url)",
    "replaceState(data, unused, url)",
    "scrollRestoration",
    "state"
  ],
  "HkdfParams": [
    "hash",
    "info",
    "salt"
  ],
  "HmacImportParams": [
    "hash",
    "length"
  ],
  "HmacKeyAlgorithm": [
    "hash",
    "length"
  ],
  "HmacKeyGenParams": [
    "hash",
    "length"
  ],
  "I/O queue": [
    "peek",
    "prepend",
    "push",
    "read"
  ],
  "IDBCursor": [
    "advance(count)",
    "continue()",
    "continue(key)",
    "continuePrimaryKey(key, primaryKey)",
    "delete()",
    "direction",
    "key",
    "primaryKey",
    "request",
    "source",
    "update(value)"
  ],
  "IDBCursor/advance(count)": [
    "count"
  ],
  "IDBCursor/continue()": [
    "key"
  ],
  "IDBCursor/continue(key)": [
    "key"
  ],
  "IDBCursor/continuePrimaryKey(key, primaryKey)": [
    "key",
    "primaryKey"
  ],
  "IDBCursor/update(value)": [
    "value"
  ],
  "IDBCursorDirection": [
    "\"next\"",
    "\"nextunique\"",
    "\"prev\"",
    "\"prevunique\""
  ],
  "IDBCursorWithValue": [
    "value"
  ],
  "IDBDatabase": [
    "close()",
    "createObjectStore(name)",
    "createObjectStore(name, options)",
    "deleteObjectStore(name)",
    "name",
    "objectStoreNames",
    "onabort",
    "onclose",
    "onerror",
    "onversionchange",
    "transaction(storeNames)",
    "transaction(storeNames, mode)",
    "transaction(storeNames, mode, options)",
    "version"
  ],
  "IDBDatabase/createObjectStore(name)": [
    "name",
    "options"
  ],
  "IDBDatabase/createObjectStore(name, options)": [
    "name",
    "options"
  ],
  "IDBDatabase/deleteObjectStore(name)": [
    "name"
  ],
  "IDBDatabase/transaction(storeNames)": [
    "mode",
    "options",
    "storeNames"
  ],
  "IDBDatabase/transaction(storeNames, mode)": [
    "mode",
    "options",
    "storeNames"
  ],
  "IDBDatabase/transaction(storeNames, mode, options)": [
    "mode",
    "options",
    "storeNames"
  ],
  "IDBDatabaseInfo": [
    "name",
    "version"
  ],
  "IDBFactory": [
    "cmp(first, second)",
    "databases()",
    "deleteDatabase(name)",
    "open(name)",
    "open(name, version)"
  ],
  "IDBFactory/cmp(first, second)": [
    "first",
    "second"
  ],
  "IDBFactory/deleteDatabase(name)": [
    "name"
  ],
  "IDBFactory/open(name)": [
    "name",
    "version"
  ],
  "IDBFactory/open(name, version)": [
    "name",
    "version"
  ],
  "IDBIndex": [
    "count()",
    "count(query)",
    "get(query)",
    "getAll()",
    "getAll(query)",
    "getAll(query, count)",
    "getAllKeys()",
    "getAllKeys(query)",
    "getAllKeys(query, count)",
    "getKey(query)",
    "keyPath",
    "multiEntry",
    "name",
    "objectStore",
    "openCursor()",
    "openCursor(query)",
    "openCursor(query, direction)",
    "openKeyCursor()",
    "openKeyCursor(query)",
    "openKeyCursor(query, direction)",
    "unique"
  ],
  "IDBIndex/count()": [
    "query"
  ],
  "IDBIndex/count(query)": [
    "query"
  ],
  "IDBIndex/get(query)": [
    "query"
  ],
  "IDBIndex/getAll()": [
    "count",
    "query"
  ],
  "IDBIndex/getAll(query)": [
    "count",
    "query"
  ],
  "IDBIndex/getAll(query, count)": [
    "count",
    "query"
  ],
  "IDBIndex/getAllKeys()": [
    "count",
    "query"
  ],
  "IDBIndex/getAllKeys(query)": [
    "count",
    "query"
  ],
  "IDBIndex/getAllKeys(query, count)": [
    "count",
    "query"
  ],
  "IDBIndex/getKey(query)": [
    "query"
  ],
  "IDBIndex/openCursor()": [
    "direction",
    "query"
  ],
  "IDBIndex/openCursor(query)": [
    "direction",
    "query"
  ],
  "IDBIndex/openCursor(query, direction)": [
    "direction",
    "query"
  ],
  "IDBIndex/openKeyCursor()": [
    "direction",
    "query"
  ],
  "IDBIndex/openKeyCursor(query)": [
    "direction",
    "query"
  ],
  "IDBIndex/openKeyCursor(query, direction)": [
    "direction",
    "query"
  ],
  "IDBIndexParameters": [
    "multiEntry",
    "unique"
  ],
  "IDBKeyRange": [
    "bound(lower, upper)",
    "bound(lower, upper, lowerOpen)",
    "bound(lower, upper, lowerOpen, upperOpen)",
    "includes(key)",
    "lower",
    "lowerBound(lower)",
    "lowerBound(lower, open)",
    "lowerOpen",
    "only(value)",
    "upper",
    "upperBound(upper)",
    "upperBound(upper, open)",
    "upperOpen"
  ],
  "IDBKeyRange/bound(lower, upper)": [
    "lower",
    "lowerOpen",
    "upper",
    "upperOpen"
  ],
  "IDBKeyRange/bound(lower, upper, lowerOpen)": [
    "lower",
    "lowerOpen",
    "upper",
    "upperOpen"
  ],
  "IDBKeyRange/bound(lower, upper, lowerOpen, upperOpen)": [
    "lower",
    "lowerOpen",
    "upper",
    "upperOpen"
  ],
  "IDBKeyRange/includes(key)": [
    "key"
  ],
  "IDBKeyRange/lowerBound(lower)": [
    "lower",
    "open"
  ],
  "IDBKeyRange/lowerBound(lower, open)": [
    "lower",
    "open"
  ],
  "IDBKeyRange/only(value)": [
    "value"
  ],
  "IDBKeyRange/upperBound(upper)": [
    "open",
    "upper"
  ],
  "IDBKeyRange/upperBound(upper, open)": [
    "open",
    "upper"
  ],
  "IDBObjectStore": [
    "add(value)",
    "add(value, key)",
    "autoIncrement",
    "clear()",
    "count()",
    "count(query)",
    "createIndex(name, keyPath)",
    "createIndex(name, keyPath, options)",
    "delete(query)",
    "deleteIndex(name)",
    "get(query)",
    "getAll()",
    "getAll(query)",
    "getAll(query, count)",
    "getAllKeys()",
    "getAllKeys(query)",
    "getAllKeys(query, count)",
    "getKey(query)",
    "index(name)",
    "indexNames",
    "keyPath",
    "name",
    "openCursor()",
    "openCursor(query)",
    "openCursor(query, direction)",
    "openKeyCursor()",
    "openKeyCursor(query)",
    "openKeyCursor(query, direction)",
    "put(value)",
    "put(value, key)",
    "transaction"
  ],
  "IDBObjectStore/add(value)": [
    "key",
    "value"
  ],
  "IDBObjectStore/add(value, key)": [
    "key",
    "value"
  ],
  "IDBObjectStore/count()": [
    "query"
  ],
  "IDBObjectStore/count(query)": [
    "query"
  ],
  "IDBObjectStore/createIndex(name, keyPath)": [
    "keyPath",
    "name",
    "options"
  ],
  "IDBObjectStore/createIndex(name, keyPath, options)": [
    "keyPath",
    "name",
    "options"
  ],
  "IDBObjectStore/delete(query)": [
    "query"
  ],
  "IDBObjectStore/deleteIndex(name)": [
    "name"
  ],
  "IDBObjectStore/get(query)": [
    "query"
  ],
  "IDBObjectStore/getAll()": [
    "count",
    "query"
  ],
  "IDBObjectStore/getAll(query)": [
    "count",
    "query"
  ],
  "IDBObjectStore/getAll(query, count)": [
    "count",
    "query"
  ],
  "IDBObjectStore/getAllKeys()": [
    "count",
    "query"
  ],
  "IDBObjectStore/getAllKeys(query)": [
    "count",
    "query"
  ],
  "IDBObjectStore/getAllKeys(query, count)": [
    "count",
    "query"
  ],
  "IDBObjectStore/getKey(query)": [
    "query"
  ],
  "IDBObjectStore/index(name)": [
    "name"
  ],
  "IDBObjectStore/openCursor()": [
    "direction",
    "query"
  ],
  "IDBObjectStore/openCursor(query)": [
    "direction",
    "query"
  ],
  "IDBObjectStore/openCursor(query, direction)": [
    "direction",
    "query"
  ],
  "IDBObjectStore/openKeyCursor()": [
    "direction",
    "query"
  ],
  "IDBObjectStore/openKeyCursor(query)": [
    "direction",
    "query"
  ],
  "IDBObjectStore/openKeyCursor(query, direction)": [
    "direction",
    "query"
  ],
  "IDBObjectStore/put(value)": [
    "key",
    "value"
  ],
  "IDBObjectStore/put(value, key)": [
    "key",
    "value"
  ],
  "IDBObjectStoreParameters": [
    "autoIncrement",
    "keyPath"
  ],
  "IDBOpenDBRequest": [
    "onblocked",
    "onupgradeneeded"
  ],
  "IDBRequest": [
    "error",
    "onerror",
    "onsuccess",
    "readyState",
    "result",
    "source",
    "transaction"
  ],
  "IDBRequestReadyState": [
    "\"done\"",
    "\"pending\""
  ],
  "IDBTransaction": [
    "abort()",
    "commit()",
    "db",
    "durability",
    "error",
    "mode",
    "objectStore(name)",
    "objectStoreNames",
    "onabort",
    "oncomplete",
    "onerror"
  ],
  "IDBTransaction/objectStore(name)": [
    "name"
  ],
  "IDBTransactionDurability": [
    "\"default\"",
    "\"relaxed\"",
    "\"strict\""
  ],
  "IDBTransactionMode": [
    "\"readonly\"",
    "\"readwrite\"",
    "\"versionchange\""
  ],
  "IDBTransactionOptions": [
    "durability"
  ],
  "IDBVersionChangeEvent": [
    "IDBVersionChangeEvent(type)",
    "IDBVersionChangeEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "newVersion",
    "oldVersion"
  ],
  "IDBVersionChangeEvent/IDBVersionChangeEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "IDBVersionChangeEvent/IDBVersionChangeEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "IDBVersionChangeEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "IDBVersionChangeEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "IDBVersionChangeEventInit": [
    "newVersion",
    "oldVersion"
  ],
  "IDL type": [
    "extended attribute associated with",
    "extended attributes associated with"
  ],
  "IIRFilterNode": [
    "IIRFilterNode(context, options)",
    "constructor(context, options)",
    "getFrequencyResponse(frequencyHz, magResponse, phaseResponse)"
  ],
  "IIRFilterNode/IIRFilterNode(context, options)": [
    "context",
    "options"
  ],
  "IIRFilterNode/constructor()": [
    "IIRFilterNode(context, options)",
    "context",
    "options"
  ],
  "IIRFilterNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "IIRFilterNode/getFrequencyResponse()": [
    "frequencyHz",
    "magResponse",
    "phaseResponse"
  ],
  "IIRFilterNode/getFrequencyResponse(frequencyHz, magResponse, phaseResponse)": [
    "frequencyHz",
    "magResponse",
    "phaseResponse"
  ],
  "IIRFilterOptions": [
    "feedback",
    "feedforward"
  ],
  "IP address space": [
    "less public",
    "local",
    "private",
    "public"
  ],
  "IdleDeadline": [
    "didTimeout",
    "timeRemaining()"
  ],
  "IdleDetector": [
    "IdleDetector()",
    "[[screenState]]",
    "[[state]]",
    "[[threshold]]",
    "[[userState]]",
    "constructor()",
    "onchange",
    "requestPermission()",
    "screenState",
    "start()",
    "start(options)",
    "userState"
  ],
  "IdleDetector/start()": [
    "options"
  ],
  "IdleDetector/start(options)": [
    "options"
  ],
  "IdleOptions": [
    "signal",
    "threshold"
  ],
  "IdleRequestOptions": [
    "timeout"
  ],
  "ImageBitmap": [
    "close()",
    "height",
    "width"
  ],
  "ImageBitmapOptions": [
    "colorSpaceConversion",
    "imageOrientation",
    "premultiplyAlpha",
    "resizeHeight",
    "resizeQuality",
    "resizeWidth"
  ],
  "ImageBitmapRenderingContext": [
    "canvas",
    "transferFromImageBitmap(bitmap)"
  ],
  "ImageBitmapRenderingContextSettings": [
    "alpha"
  ],
  "ImageCapture": [
    "ImageCapture(videoTrack)",
    "constructor(videoTrack)",
    "getPhotoCapabilities()",
    "getPhotoSettings()",
    "grabFrame()",
    "takePhoto()",
    "takePhoto(photoSettings)",
    "track"
  ],
  "ImageCapture/ImageCapture(videoTrack)": [
    "videoTrack"
  ],
  "ImageCapture/constructor(videoTrack)": [
    "videoTrack"
  ],
  "ImageCapture/takePhoto()": [
    "photoSettings"
  ],
  "ImageCapture/takePhoto(photoSettings)": [
    "photoSettings"
  ],
  "ImageData": [
    "colorSpace",
    "data",
    "height",
    "new ImageData(data, sw, sh, settings)",
    "new ImageData(sw, sh, settings)",
    "width"
  ],
  "ImageDataSettings": [
    "colorSpace"
  ],
  "ImageDecodeOptions": [
    "completeFramesOnly",
    "frameIndex"
  ],
  "ImageDecodeResult": [
    "complete",
    "image"
  ],
  "ImageDecoder": [
    "ImageDecoder(init)",
    "[[ImageTrackList]]",
    "[[closed]]",
    "[[codec implementation]]",
    "[[complete]]",
    "[[completed promise]]",
    "[[encoded data]]",
    "[[internal selected track index]]",
    "[[pending decode promises]]",
    "[[prefer animation]]",
    "[[progressive frame generations]]",
    "[[tracks established]]",
    "check type support",
    "close imagedecoder",
    "close()",
    "complete",
    "completed",
    "constructor(init)",
    "decode complete frame",
    "decode progressive frame",
    "decode()",
    "decode(options)",
    "establish tracks",
    "fatally reject bad data",
    "fetch stream data loop",
    "get default selected track index",
    "isTypeSupported(type)",
    "reject infeasible decode",
    "reset imagedecoder",
    "reset()",
    "resolve decode",
    "tracks",
    "update tracks"
  ],
  "ImageDecoder/ImageDecoder(init)": [
    "init"
  ],
  "ImageDecoder/constructor(init)": [
    "init"
  ],
  "ImageDecoder/decode()": [
    "options"
  ],
  "ImageDecoder/decode(options)": [
    "options"
  ],
  "ImageDecoder/isTypeSupported(type)": [
    "type"
  ],
  "ImageDecoderInit": [
    "colorSpaceConversion",
    "data",
    "desiredHeight",
    "desiredWidth",
    "preferAnimation",
    "premultiplyAlpha",
    "type"
  ],
  "ImageObject": [
    "sizes",
    "src",
    "type"
  ],
  "ImageOrientation": [
    "flipY",
    "none"
  ],
  "ImageResource": [
    "label",
    "sizes",
    "src",
    "type"
  ],
  "ImageSmoothingQuality": [
    "high",
    "low",
    "medium"
  ],
  "ImageTrack": [
    "[[ImageDecoder]]",
    "[[ImageTrackList]]",
    "[[animated]]",
    "[[frame count]]",
    "[[repetition count]]",
    "[[selected]]",
    "animated",
    "change",
    "frameCount",
    "onchange",
    "repetitionCount",
    "selected"
  ],
  "ImageTrackList": [
    "[[ready promise]]",
    "[[selected index]]",
    "[[track list]]",
    "length",
    "ready",
    "selectedIndex",
    "selectedTrack"
  ],
  "ImageTrackList/__getter__(index)": [
    "index"
  ],
  "ImportExportKind": [
    "\"function\"",
    "\"global\"",
    "\"memory\"",
    "\"table\""
  ],
  "InnerHTML": [
    "innerHTML"
  ],
  "InputDeviceCapabilities": [
    "constructor()",
    "constructor(deviceInitDict)",
    "firesTouchEvents",
    "pointerMovementScrolls"
  ],
  "InputDeviceCapabilitiesInit": [
    "InputDeviceCapabilitiesInit",
    "firesTouchEvents",
    "pointerMovementScrolls"
  ],
  "InputDeviceInfo": [
    "getCapabilities()"
  ],
  "InputEvent": [
    "InputEvent(type)",
    "InputEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data",
    "dataTransfer",
    "getTargetRanges()",
    "inputType",
    "isComposing"
  ],
  "InputEvent/InputEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "InputEvent/InputEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "InputEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "InputEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "InputEventInit": [
    "data",
    "dataTransfer",
    "inputType",
    "isComposing",
    "targetRanges"
  ],
  "Instance": [
    "Instance(module)",
    "Instance(module, importObject)",
    "constructor(module)",
    "constructor(module, importObject)",
    "exports"
  ],
  "Instance/Instance(module)": [
    "importObject",
    "module"
  ],
  "Instance/Instance(module, importObject)": [
    "importObject",
    "module"
  ],
  "Instance/constructor(module)": [
    "importObject",
    "module"
  ],
  "Instance/constructor(module, importObject)": [
    "importObject",
    "module"
  ],
  "InterestCohort": [
    "id",
    "version"
  ],
  "IntersectionObserver": [
    "IntersectionObserver(callback)",
    "IntersectionObserver(callback, options)",
    "[[ObservationTargets]]",
    "[[QueuedEntries]]",
    "[[callback]]",
    "[[rootMargin]]",
    "constructor(callback)",
    "constructor(callback, options)",
    "cross-origin-domain target",
    "disconnect()",
    "explicit root observer",
    "implicit root",
    "implicit root observer",
    "intersection root",
    "observe(target)",
    "root",
    "root intersection rectangle",
    "rootMargin",
    "same-origin-domain target",
    "takeRecords()",
    "target",
    "thresholds",
    "unobserve(target)"
  ],
  "IntersectionObserver/IntersectionObserver(callback)": [
    "callback",
    "options"
  ],
  "IntersectionObserver/IntersectionObserver(callback, options)": [
    "callback",
    "options"
  ],
  "IntersectionObserver/constructor(callback)": [
    "callback",
    "options"
  ],
  "IntersectionObserver/constructor(callback, options)": [
    "callback",
    "options"
  ],
  "IntersectionObserver/observe(target)": [
    "target"
  ],
  "IntersectionObserver/unobserve(target)": [
    "target"
  ],
  "IntersectionObserverCallback": [
    "entries",
    "observer"
  ],
  "IntersectionObserverEntry": [
    "IntersectionObserverEntry(intersectionObserverEntryInit)",
    "boundingClientRect",
    "constructor(intersectionObserverEntryInit)",
    "intersectionRatio",
    "intersectionRect",
    "isIntersecting",
    "rootBounds",
    "target",
    "time"
  ],
  "IntersectionObserverEntry/IntersectionObserverEntry(intersectionObserverEntryInit)": [
    "intersectionObserverEntryInit"
  ],
  "IntersectionObserverEntry/constructor(intersectionObserverEntryInit)": [
    "intersectionObserverEntryInit"
  ],
  "IntersectionObserverEntryInit": [
    "boundingClientRect",
    "intersectionRatio",
    "intersectionRect",
    "isIntersecting",
    "rootBounds",
    "target",
    "time"
  ],
  "IntersectionObserverInit": [
    "root",
    "rootMargin",
    "threshold"
  ],
  "IntersectionObserverRegistration": [
    "observer",
    "previousIsIntersecting",
    "previousThresholdIndex"
  ],
  "InterventionReportBody": [
    "columnNumber",
    "columnnumber",
    "id",
    "lineNumber",
    "linenumber",
    "message",
    "sourceFile",
    "sourcefile",
    "toJSON()"
  ],
  "IntrinsicSizes": [
    "[[intrinsicSizesRequest]]",
    "maxContentSize",
    "minContentSize"
  ],
  "IntrinsicSizesRequest": [
    "[[layoutChild]]"
  ],
  "IntrinsicSizesResultOptions": [
    "maxContentSize",
    "minContentSize"
  ],
  "IsInputPendingOptions": [
    "includeContinuous"
  ],
  "IterationCompositeOperation": [
    "\"accumulate\"",
    "\"replace\""
  ],
  "JavaScript string": [
    "code point length",
    "convert",
    "length"
  ],
  "JsonWebKey": [
    "alg",
    "crv",
    "d",
    "dp",
    "dq",
    "e",
    "ext",
    "k",
    "key_ops",
    "kty",
    "n",
    "oth",
    "p",
    "q",
    "qi",
    "use",
    "x",
    "y"
  ],
  "KeyAlgorithm": [
    "name"
  ],
  "KeyFormat": [
    "jwk",
    "pkcs8",
    "raw",
    "spki"
  ],
  "KeySystemTrackConfiguration": [
    "encryptionScheme",
    "robustness"
  ],
  "KeyType": [
    "private",
    "public",
    "secret"
  ],
  "KeyUsage": [
    "decrypt",
    "deriveBits",
    "deriveKey",
    "encrypt",
    "sign",
    "unwrapKey",
    "verify",
    "wrapKey"
  ],
  "Keyboard": [
    "enable keyboard lock",
    "getLayoutMap()",
    "getlayoutmap()",
    "keyboard lock task queue",
    "lock()",
    "lock(keyCodes)",
    "reserved key codes",
    "unlock()"
  ],
  "Keyboard/lock()": [
    "keyCodes"
  ],
  "Keyboard/lock(keyCodes)": [
    "keyCodes"
  ],
  "KeyboardEveng": [
    "initKeyboardEvent()"
  ],
  "KeyboardEvent": [
    "DOM_KEY_LOCATION_LEFT",
    "DOM_KEY_LOCATION_NUMPAD",
    "DOM_KEY_LOCATION_RIGHT",
    "DOM_KEY_LOCATION_STANDARD",
    "KeyboardEvent(type)",
    "KeyboardEvent(type, eventInitDict)",
    "altKey",
    "charCode",
    "code",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "ctrlKey",
    "getModifierState(keyArg)",
    "initKeyboardEvent(typeArg)",
    "initKeyboardEvent(typeArg, bubblesArg)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey)",
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey, metaKey)",
    "isComposing",
    "key",
    "keyCode",
    "location",
    "metaKey",
    "repeat",
    "shiftKey"
  ],
  "KeyboardEvent/KeyboardEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "KeyboardEvent/KeyboardEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "KeyboardEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "KeyboardEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "KeyboardEvent/getModifierState(keyArg)": [
    "keyArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEvent/initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey, metaKey)": [
    "altKey",
    "bubblesArg",
    "cancelableArg",
    "ctrlKey",
    "keyArg",
    "locationArg",
    "metaKey",
    "shiftKey",
    "typeArg",
    "viewArg"
  ],
  "KeyboardEventInit": [
    "charCode",
    "charcode",
    "code",
    "isComposing",
    "key",
    "keyCode",
    "keycode",
    "location",
    "repeat"
  ],
  "KeyframeAnimationOptions": [
    "id",
    "timeline"
  ],
  "KeyframeEffect": [
    "KeyframeEffect(source)",
    "KeyframeEffect(target, keyframes)",
    "KeyframeEffect(target, keyframes, options)",
    "composite",
    "constructor(source)",
    "constructor(target, keyframes)",
    "constructor(target, keyframes, options)",
    "getKeyframes()",
    "iterationComposite",
    "pseudoElement",
    "setKeyframes(keyframes)",
    "target"
  ],
  "KeyframeEffect/KeyframeEffect(source)": [
    "source"
  ],
  "KeyframeEffect/KeyframeEffect(target, keyframes, options)": [
    "keyframes",
    "options",
    "target"
  ],
  "KeyframeEffect/setKeyframes": [
    "keyframes"
  ],
  "KeyframeEffect/setKeyframes(keyframes)": [
    "keyframes"
  ],
  "KeyframeEffectOptions": [
    "composite",
    "iterationComposite",
    "pseudoElement"
  ],
  "Landmark": [
    "locations",
    "type"
  ],
  "LandmarkType": [
    "\"eye\"",
    "\"mouth\"",
    "\"nose\"",
    "eye",
    "mouth",
    "nose"
  ],
  "LargeBlobSupport": [
    "\"preferred\"",
    "\"required\""
  ],
  "LargestContentfulPaint": [
    "element",
    "id",
    "loadTime",
    "renderTime",
    "size",
    "toJSON()",
    "url"
  ],
  "LayoutChild": [
    "[[box]]",
    "[[styleMap]]",
    "[[unique id]]",
    "intrinsicSizes()",
    "layoutNextFragment(constraints, breakToken)",
    "styleMap"
  ],
  "LayoutChild/layoutNextFragment(constraints, breakToken)": [
    "breakToken",
    "constraints"
  ],
  "LayoutConstraints": [
    "LayoutConstraints()",
    "LayoutConstraints(options)",
    "availableBlockSize",
    "availableInlineSize",
    "blockFragmentationOffset",
    "blockFragmentationType",
    "data",
    "fixedBlockSize",
    "fixedInlineSize",
    "percentageBlockSize",
    "percentageInlineSize"
  ],
  "LayoutConstraints/LayoutConstraints(options)": [
    "options"
  ],
  "LayoutConstraintsOptions": [
    "availableBlockSize",
    "availableInlineSize",
    "blockFragmentationOffset",
    "blockFragmentationType",
    "data",
    "fixedBlockSize",
    "fixedInlineSize",
    "percentageBlockSize",
    "percentageInlineSize"
  ],
  "LayoutEdgeSizes": [
    "block",
    "blockEnd",
    "blockStart",
    "inline",
    "inlineEnd",
    "inlineStart"
  ],
  "LayoutEdges": [
    "all",
    "block",
    "blockEnd",
    "blockStart",
    "border",
    "inline",
    "inlineEnd",
    "inlineStart",
    "padding",
    "scrollbar"
  ],
  "LayoutFragment": [
    "[[generator]]",
    "[[layoutFragmentRequest]]",
    "[[unique id]]",
    "blockOffset",
    "blockSize",
    "breakToken",
    "data",
    "inlineOffset",
    "inlineSize"
  ],
  "LayoutFragmentRequest": [
    "[[breakToken]]",
    "[[layoutChild]]",
    "[[layoutConstraints]]"
  ],
  "LayoutOptions": [
    "childDisplay",
    "sizing"
  ],
  "LayoutShift": [
    "hadRecentInput",
    "lastInputTime",
    "sources",
    "toJSON()",
    "value"
  ],
  "LayoutShiftAttribution": [
    "currentRect",
    "node",
    "previousRect"
  ],
  "LayoutSizingMode": [
    "\"block-like\"",
    "\"manual\"",
    "block-like",
    "manual"
  ],
  "LayoutWorkletGlobalScope": [
    "registerLayout(name, layoutCtor)"
  ],
  "LayoutWorkletGlobalScope/registerLayout(name, layoutCtor)": [
    "layoutCtor",
    "name"
  ],
  "LineAlignSetting": [
    "\"center\"",
    "\"end\"",
    "\"start\"",
    "center",
    "end",
    "start"
  ],
  "LinearAccelerationSensor": [
    "LinearAccelerationSensor()",
    "LinearAccelerationSensor(options)",
    "constructor()",
    "constructor(options)"
  ],
  "LinearAccelerationSensor/LinearAccelerationSensor()": [
    "options"
  ],
  "LinearAccelerationSensor/LinearAccelerationSensor(options)": [
    "options"
  ],
  "LinearAccelerationSensor/constructor()": [
    "options"
  ],
  "LinearAccelerationSensor/constructor(options)": [
    "options"
  ],
  "LinkStyle": [
    "sheet"
  ],
  "Location": [
    "ancestorOrigins",
    "assign(url)",
    "hash",
    "host",
    "hostname",
    "href",
    "origin",
    "pathname",
    "port",
    "protocol",
    "reload()",
    "replace(url)",
    "search"
  ],
  "Lock": [
    "mode",
    "name"
  ],
  "LockGrantedCallback": [
    "lock"
  ],
  "LockInfo": [
    "clientId",
    "mode",
    "name"
  ],
  "LockManager": [
    "query()",
    "request(name, callback)",
    "request(name, options, callback)"
  ],
  "LockManager/request(name, callback)": [
    "callback",
    "name"
  ],
  "LockManager/request(name, options, callback)": [
    "callback",
    "name",
    "options"
  ],
  "LockManagerSnapshot": [
    "held",
    "pending"
  ],
  "LockMode": [
    "\"exclusive\"",
    "\"shared\""
  ],
  "LockOptions": [
    "ifAvailable",
    "mode",
    "signal",
    "steal"
  ],
  "MIDIAccess": [
    "inputs",
    "onstatechange",
    "outputs",
    "sysexEnabled"
  ],
  "MIDIConnectionEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "port"
  ],
  "MIDIConnectionEventInit": [
    "port"
  ],
  "MIDIInput": [
    "onmidimessage"
  ],
  "MIDIMessageEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data"
  ],
  "MIDIMessageEventInit": [
    "data"
  ],
  "MIDIOptions": [
    "software",
    "sysex"
  ],
  "MIDIOutput": [
    "clear()",
    "send()",
    "send(data)",
    "send(data, timestamp)"
  ],
  "MIDIPort": [
    "close()",
    "connection",
    "id",
    "manufacturer",
    "name",
    "onstatechange",
    "open()",
    "state",
    "type",
    "version"
  ],
  "MIDIPortConnectionState": [
    "closed",
    "open",
    "pending"
  ],
  "MIDIPortDeviceState": [
    "connected",
    "disconnected"
  ],
  "MIDIPortType": [
    "input",
    "output"
  ],
  "MIME type": [
    "essence",
    "parameters",
    "subtype",
    "type"
  ],
  "ML": [
    "createContext()",
    "createContext(glContext)",
    "createContext(gpuDevice)",
    "createContext(options)"
  ],
  "ML/createContext()": [
    "options"
  ],
  "ML/createContext(glContext)": [
    "glContext"
  ],
  "ML/createContext(gpuDevice)": [
    "gpuDevice"
  ],
  "ML/createContext(options)": [
    "options"
  ],
  "MLAutoPad": [
    "\"explicit\"",
    "\"same-lower\"",
    "\"same-upper\""
  ],
  "MLBatchNormalizationOptions": [
    "axis",
    "bias",
    "epsilon",
    "scale"
  ],
  "MLBufferResourceView": [
    "offset",
    "resource",
    "size"
  ],
  "MLClampOptions": [
    "maxValue",
    "minValue"
  ],
  "MLContextOptions": [
    "devicePreference",
    "powerPreference"
  ],
  "MLConv2dOptions": [
    "autoPad",
    "dilations",
    "filterLayout",
    "groups",
    "inputLayout",
    "outputPadding",
    "outputSizes",
    "padding",
    "strides",
    "transpose"
  ],
  "MLDevicePreference": [
    "\"cpu\"",
    "\"default\"",
    "\"gpu\""
  ],
  "MLFilterOperandLayout": [
    "\"hwio\"",
    "\"ihwo\"",
    "\"ohwi\"",
    "\"oihw\""
  ],
  "MLGemmOptions": [
    "aTranspose",
    "alpha",
    "bTranspose",
    "beta",
    "c"
  ],
  "MLGraph": [
    "[[context]]",
    "[[implementation]]",
    "[[inputDescriptors]]",
    "[[outputNames]]",
    "compute(inputs, outputs)"
  ],
  "MLGraph/compute(inputs, outputs)": [
    "inputs",
    "outputs"
  ],
  "MLGraphBuilder": [
    "MLGraphBuilder(context)",
    "abs(x)",
    "add(a, b)",
    "averagePool2d(input)",
    "averagePool2d(input, options)",
    "batchNormalization(input, mean, variance)",
    "batchNormalization(input, mean, variance, options)",
    "build(outputs)",
    "ceil(x)",
    "clamp(x)",
    "clamp(x, options)",
    "concat(inputs, axis)",
    "constant(desc, bufferView)",
    "constant(value)",
    "constant(value, type)",
    "constructor(context)",
    "conv2d(input, filter)",
    "conv2d(input, filter, options)",
    "cos(x)",
    "div(a, b)",
    "exp(x)",
    "floor(x)",
    "gemm(a, b)",
    "gemm(a, b, options)",
    "gru(input, weight, recurrentWeight, steps, hiddenSize)",
    "gru(input, weight, recurrentWeight, steps, hiddenSize, options)",
    "gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize)",
    "gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize, options)",
    "input(name, desc)",
    "instanceNormalization(input)",
    "instanceNormalization(input, options)",
    "l2Pool2d(input)",
    "l2Pool2d(input, options)",
    "leakyRelu(x)",
    "leakyRelu(x, options)",
    "log(x)",
    "matmul(a, b)",
    "max(a, b)",
    "maxPool2d(input)",
    "maxPool2d(input, options)",
    "min(a, b)",
    "mul(a, b)",
    "neg(x)",
    "pad(input, padding)",
    "pad(input, padding, options)",
    "pow(a, b)",
    "reduceL1(input)",
    "reduceL1(input, options)",
    "reduceL2(input)",
    "reduceL2(input, options)",
    "reduceLogSum(input)",
    "reduceLogSum(input, options)",
    "reduceLogSumExp(input)",
    "reduceLogSumExp(input, options)",
    "reduceMax(input)",
    "reduceMax(input, options)",
    "reduceMean(input)",
    "reduceMean(input, options)",
    "reduceMin(input)",
    "reduceMin(input, options)",
    "reduceProduct(input)",
    "reduceProduct(input, options)",
    "reduceSum(input)",
    "reduceSum(input, options)",
    "reduceSumSquare(input)",
    "reduceSumSquare(input, options)",
    "relu(x)",
    "resample(input)",
    "resample(input, options)",
    "reshape(input, newShape)",
    "sigmoid(x)",
    "sin(x)",
    "slice(input, starts, sizes)",
    "slice(input, starts, sizes, options)",
    "softmax(x)",
    "split(input, splits)",
    "split(input, splits, options)",
    "squeeze(input)",
    "squeeze(input, options)",
    "sub(a, b)",
    "tan(x)",
    "tanh(x)",
    "transpose(input)",
    "transpose(input, options)"
  ],
  "MLGraphBuilder/MLGraphBuilder(context)": [
    "context"
  ],
  "MLGraphBuilder/abs(x)": [
    "x"
  ],
  "MLGraphBuilder/add(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/averagePool2d(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/averagePool2d(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/batchNormalization(input, mean, variance)": [
    "input",
    "mean",
    "options",
    "variance"
  ],
  "MLGraphBuilder/batchNormalization(input, mean, variance, options)": [
    "input",
    "mean",
    "options",
    "variance"
  ],
  "MLGraphBuilder/build(outputs)": [
    "outputs"
  ],
  "MLGraphBuilder/ceil(x)": [
    "x"
  ],
  "MLGraphBuilder/clamp(x)": [
    "options",
    "x"
  ],
  "MLGraphBuilder/clamp(x, options)": [
    "options",
    "x"
  ],
  "MLGraphBuilder/concat(inputs, axis)": [
    "axis",
    "inputs"
  ],
  "MLGraphBuilder/constant(desc, bufferView)": [
    "bufferView",
    "desc"
  ],
  "MLGraphBuilder/constant(value)": [
    "type",
    "value"
  ],
  "MLGraphBuilder/constant(value, type)": [
    "type",
    "value"
  ],
  "MLGraphBuilder/constructor(context)": [
    "context"
  ],
  "MLGraphBuilder/conv2d(input, filter)": [
    "filter",
    "input",
    "options"
  ],
  "MLGraphBuilder/conv2d(input, filter, options)": [
    "filter",
    "input",
    "options"
  ],
  "MLGraphBuilder/cos(x)": [
    "x"
  ],
  "MLGraphBuilder/div(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/exp(x)": [
    "x"
  ],
  "MLGraphBuilder/floor(x)": [
    "x"
  ],
  "MLGraphBuilder/gemm(a, b)": [
    "a",
    "b",
    "options"
  ],
  "MLGraphBuilder/gemm(a, b, options)": [
    "a",
    "b",
    "options"
  ],
  "MLGraphBuilder/gru(input, weight, recurrentWeight, steps, hiddenSize)": [
    "hiddenSize",
    "input",
    "options",
    "recurrentWeight",
    "steps",
    "weight"
  ],
  "MLGraphBuilder/gru(input, weight, recurrentWeight, steps, hiddenSize, options)": [
    "hiddenSize",
    "input",
    "options",
    "recurrentWeight",
    "steps",
    "weight"
  ],
  "MLGraphBuilder/gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize)": [
    "hiddenSize",
    "hiddenState",
    "input",
    "options",
    "recurrentWeight",
    "weight"
  ],
  "MLGraphBuilder/gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize, options)": [
    "hiddenSize",
    "hiddenState",
    "input",
    "options",
    "recurrentWeight",
    "weight"
  ],
  "MLGraphBuilder/input(name, desc)": [
    "desc",
    "name"
  ],
  "MLGraphBuilder/instanceNormalization(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/instanceNormalization(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/l2Pool2d(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/l2Pool2d(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/leakyRelu(x)": [
    "options",
    "x"
  ],
  "MLGraphBuilder/leakyRelu(x, options)": [
    "options",
    "x"
  ],
  "MLGraphBuilder/log(x)": [
    "x"
  ],
  "MLGraphBuilder/matmul(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/max(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/maxPool2d(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/maxPool2d(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/min(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/mul(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/neg(x)": [
    "x"
  ],
  "MLGraphBuilder/pad(input, padding)": [
    "input",
    "options",
    "padding"
  ],
  "MLGraphBuilder/pad(input, padding, options)": [
    "input",
    "options",
    "padding"
  ],
  "MLGraphBuilder/pow(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/reduceL1(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceL1(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceL2(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceL2(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceLogSum(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceLogSum(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceLogSumExp(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceLogSumExp(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMax(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMax(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMean(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMean(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMin(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceMin(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceProduct(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceProduct(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceSum(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceSum(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceSumSquare(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reduceSumSquare(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/relu(x)": [
    "x"
  ],
  "MLGraphBuilder/resample(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/resample(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/reshape(input, newShape)": [
    "input",
    "newShape"
  ],
  "MLGraphBuilder/sigmoid(x)": [
    "x"
  ],
  "MLGraphBuilder/sin(x)": [
    "x"
  ],
  "MLGraphBuilder/slice(input, starts, sizes)": [
    "input",
    "options",
    "sizes",
    "starts"
  ],
  "MLGraphBuilder/slice(input, starts, sizes, options)": [
    "input",
    "options",
    "sizes",
    "starts"
  ],
  "MLGraphBuilder/softmax(x)": [
    "x"
  ],
  "MLGraphBuilder/split(input, splits)": [
    "input",
    "options",
    "splits"
  ],
  "MLGraphBuilder/split(input, splits, options)": [
    "input",
    "options",
    "splits"
  ],
  "MLGraphBuilder/squeeze(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/squeeze(input, options)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/sub(a, b)": [
    "a",
    "b"
  ],
  "MLGraphBuilder/tan(x)": [
    "x"
  ],
  "MLGraphBuilder/tanh(x)": [
    "x"
  ],
  "MLGraphBuilder/transpose(input)": [
    "input",
    "options"
  ],
  "MLGraphBuilder/transpose(input, options)": [
    "input",
    "options"
  ],
  "MLGruCellOptions": [
    "activations",
    "bias",
    "layout",
    "recurrentBias",
    "resetAfter"
  ],
  "MLGruOptions": [
    "activations",
    "bias",
    "direction",
    "initialHiddenState",
    "layout",
    "recurrentBias",
    "resetAfter",
    "returnSequence"
  ],
  "MLInput": [
    "dimensions",
    "resource"
  ],
  "MLInputOperandLayout": [
    "\"nchw\"",
    "\"nhwc\""
  ],
  "MLInstanceNormalizationOptions": [
    "bias",
    "epsilon",
    "layout",
    "scale"
  ],
  "MLInterpolationMode": [
    "\"linear\"",
    "\"nearest-neighbor\""
  ],
  "MLLeakyReluOptions": [
    "alpha"
  ],
  "MLOperandDescriptor": [
    "dimensions",
    "type"
  ],
  "MLOperandType": [
    "\"float16\"",
    "\"float32\"",
    "\"int32\"",
    "\"int8\"",
    "\"uint32\"",
    "\"uint8\""
  ],
  "MLPadOptions": [
    "mode",
    "value"
  ],
  "MLPaddingMode": [
    "\"constant\"",
    "\"edge\"",
    "\"reflection\"",
    "\"symmetric\""
  ],
  "MLPool2dOptions": [
    "autoPad",
    "dilations",
    "layout",
    "padding",
    "strides",
    "windowDimensions"
  ],
  "MLPowerPreference": [
    "\"default\"",
    "\"high-performance\"",
    "\"low-power\""
  ],
  "MLRecurrentNetworkActivation": [
    "\"relu\"",
    "\"sigmoid\"",
    "\"tanh\""
  ],
  "MLRecurrentNetworkDirection": [
    "\"backward\"",
    "\"both\"",
    "\"forward\""
  ],
  "MLRecurrentNetworkWeightLayout": [
    "\"rzn\"",
    "\"zrn\""
  ],
  "MLReduceOptions": [
    "axes",
    "keepDimensions"
  ],
  "MLResampleOptions": [
    "mode",
    "scales",
    "sizes"
  ],
  "MLSliceOptions": [
    "axes"
  ],
  "MLSplitOptions": [
    "axis"
  ],
  "MLSqueezeOptions": [
    "axes"
  ],
  "MLTransposeOptions": [
    "permutation"
  ],
  "Magnetometer": [
    "Magnetometer()",
    "Magnetometer(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)",
    "x",
    "y",
    "z"
  ],
  "Magnetometer/Magnetometer()": [
    "sensorOptions"
  ],
  "Magnetometer/Magnetometer(sensorOptions)": [
    "sensorOptions"
  ],
  "Magnetometer/constructor()": [
    "sensorOptions"
  ],
  "Magnetometer/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "MagnetometerLocalCoordinateSystem": [
    "\"device\"",
    "\"screen\""
  ],
  "MagnetometerReadingValues": [
    "x",
    "y",
    "z"
  ],
  "MagnetometerSensorOptions": [
    "referenceFrame"
  ],
  "MediaCapabilities": [
    "decodingInfo(configuration)",
    "encodingInfo(configuration)"
  ],
  "MediaCapabilities/decodingInfo(configuration)": [
    "configuration"
  ],
  "MediaCapabilities/encodingInfo(configuration)": [
    "configuration"
  ],
  "MediaCapabilitiesDecodingInfo": [
    "configuration",
    "keySystemAccess"
  ],
  "MediaCapabilitiesEncodingInfo": [
    "configuration"
  ],
  "MediaCapabilitiesInfo": [
    "powerEfficient",
    "smooth",
    "supported"
  ],
  "MediaCapabilitiesKeySystemConfiguration": [
    "audio",
    "distinctiveIdentifier",
    "initDataType",
    "keySystem",
    "persistentState",
    "sessionTypes",
    "video"
  ],
  "MediaConfiguration": [
    "audio",
    "video"
  ],
  "MediaDecodingConfiguration": [
    "keySystemConfiguration",
    "type"
  ],
  "MediaDecodingType": [
    "\"file\"",
    "\"media-source\"",
    "\"webrtc\"",
    "file",
    "media-source",
    "webrtc"
  ],
  "MediaDeviceInfo": [
    "deviceId",
    "groupId",
    "kind",
    "label",
    "toJSON()"
  ],
  "MediaDeviceKind": [
    "audioinput",
    "audiooutput",
    "videoinput"
  ],
  "MediaDevices": [
    "enumerateDevices()",
    "getDisplayMedia()",
    "getDisplayMedia(constraints)",
    "getSupportedConstraints()",
    "getUserMedia()",
    "getUserMedia(constraints)",
    "ondevicechange",
    "selectAudioOutput()",
    "selectAudioOutput(options)"
  ],
  "MediaElementAudioSourceNode": [
    "MediaElementAudioSourceNode(context, options)",
    "constructor(context, options)",
    "mediaElement"
  ],
  "MediaElementAudioSourceNode/MediaElementAudioSourceNode(context, options)": [
    "context",
    "options"
  ],
  "MediaElementAudioSourceNode/constructor()": [
    "context",
    "options"
  ],
  "MediaElementAudioSourceNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "MediaElementAudioSourceOptions": [
    "mediaElement"
  ],
  "MediaEncodingConfiguration": [
    "type"
  ],
  "MediaEncodingType": [
    "\"record\"",
    "\"webrtc\"",
    "record",
    "webrtc"
  ],
  "MediaEncryptedEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "initData",
    "initDataType"
  ],
  "MediaEncryptedEventInit": [
    "initData",
    "initDataType"
  ],
  "MediaError": [
    "MEDIA_ERR_ABORTED",
    "MEDIA_ERR_DECODE",
    "MEDIA_ERR_NETWORK",
    "MEDIA_ERR_SRC_NOT_SUPPORTED",
    "code",
    "message"
  ],
  "MediaImage": [
    "sizes",
    "source",
    "src",
    "type"
  ],
  "MediaKeyMessageEvent": [
    "constructor()",
    "constructor(type, eventInitDict)",
    "message",
    "messageType"
  ],
  "MediaKeyMessageEventInit": [
    "message",
    "messageType"
  ],
  "MediaKeyMessageType": [
    "individualization-request",
    "license-release",
    "license-renewal",
    "license-request"
  ],
  "MediaKeySession": [
    "close()",
    "closed",
    "expiration",
    "generateRequest()",
    "generateRequest(initDataType, initData)",
    "keyStatuses",
    "load()",
    "load(sessionId)",
    "onkeystatuseschange",
    "onmessage",
    "remove()",
    "sessionId",
    "update()",
    "update(response)"
  ],
  "MediaKeySessionClosedReason": [
    "closed-by-application",
    "hardware-context-reset",
    "internal-error",
    "release-acknowledged",
    "resource-evicted"
  ],
  "MediaKeySessionType": [
    "persistent-license",
    "temporary"
  ],
  "MediaKeyStatus": [
    "expired",
    "internal-error",
    "output-downscaled",
    "output-restricted",
    "released",
    "status-pending",
    "usable",
    "usable-in-future"
  ],
  "MediaKeyStatusMap": [
    "get()",
    "get(keyId)",
    "has()",
    "has(keyId)",
    "iterable",
    "size"
  ],
  "MediaKeySystemAccess": [
    "createMediaKeys()",
    "getConfiguration()",
    "keySystem"
  ],
  "MediaKeySystemConfiguration": [
    "audioCapabilities",
    "distinctiveIdentifier",
    "initDataTypes",
    "label",
    "persistentState",
    "sessionTypes",
    "videoCapabilities"
  ],
  "MediaKeySystemMediaCapability": [
    "contentType",
    "encryptionScheme",
    "robustness"
  ],
  "MediaKeys": [
    "createSession()",
    "createSession(, sessionType)",
    "setServerCertificate()",
    "setServerCertificate(serverCertificate)"
  ],
  "MediaKeysRequirement": [
    "not-allowed",
    "optional",
    "required"
  ],
  "MediaList": [
    "appendMedium(medium)",
    "collection of media queries",
    "deleteMedium(medium)",
    "item(index)",
    "length",
    "mediaText",
    "stringification behavior"
  ],
  "MediaList/appendMedium(medium)": [
    "medium"
  ],
  "MediaList/deleteMedium(medium)": [
    "medium"
  ],
  "MediaList/item(index)": [
    "index"
  ],
  "MediaMetadata": [
    "MediaMetadata()",
    "MediaMetadata(init)",
    "album",
    "artist",
    "artwork",
    "artwork images",
    "constructor()",
    "constructor(init)",
    "media session",
    "title"
  ],
  "MediaMetadata/MediaMetadata()": [
    "init"
  ],
  "MediaMetadata/MediaMetadata(init)": [
    "init"
  ],
  "MediaMetadata/constructor()": [
    "init"
  ],
  "MediaMetadata/constructor(init)": [
    "init"
  ],
  "MediaMetadataInit": [
    "album",
    "artist",
    "artwork",
    "title"
  ],
  "MediaPositionState": [
    "duration",
    "playbackRate",
    "position"
  ],
  "MediaQueryList": [
    "addListener(callback)",
    "addListener(listener)",
    "change",
    "document",
    "matches",
    "matches state",
    "media",
    "onchange",
    "removeListener(callback)",
    "removeListener(listener)"
  ],
  "MediaQueryList/addListener(callback)": [
    "callback"
  ],
  "MediaQueryList/addListener(listener)": [
    "listener"
  ],
  "MediaQueryList/removeListener(callback)": [
    "callback"
  ],
  "MediaQueryList/removeListener(listener)": [
    "listener"
  ],
  "MediaQueryListEvent": [
    "MediaQueryListEvent(type)",
    "MediaQueryListEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "matches",
    "media"
  ],
  "MediaQueryListEvent/MediaQueryListEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "MediaQueryListEvent/MediaQueryListEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MediaQueryListEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "MediaQueryListEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MediaQueryListEventInit": [
    "matches",
    "media"
  ],
  "MediaRecorder": [
    "MediaRecorder(stream)",
    "MediaRecorder(stream, options)",
    "audioBitrateMode",
    "audioBitsPerSecond",
    "constructor(stream)",
    "constructor(stream, options)",
    "dataavailable",
    "error",
    "isTypeSupported(type)",
    "mimeType",
    "ondataavailable",
    "onerror",
    "onpause",
    "onresume",
    "onstart",
    "onstop",
    "pause",
    "pause()",
    "requestData()",
    "resume",
    "resume()",
    "start",
    "start()",
    "start(timeslice)",
    "state",
    "stop",
    "stop()",
    "stream",
    "videoBitsPerSecond"
  ],
  "MediaRecorder/MediaRecorder(stream)": [
    "options",
    "stream"
  ],
  "MediaRecorder/MediaRecorder(stream, options)": [
    "options",
    "stream"
  ],
  "MediaRecorder/constructor(stream)": [
    "options",
    "stream"
  ],
  "MediaRecorder/constructor(stream, options)": [
    "options",
    "stream"
  ],
  "MediaRecorder/isTypeSupported(type)": [
    "type"
  ],
  "MediaRecorder/start()": [
    "timeslice"
  ],
  "MediaRecorder/start(timeslice)": [
    "timeslice"
  ],
  "MediaRecorderErrorEvent": [
    "MediaRecorderErrorEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "error"
  ],
  "MediaRecorderErrorEvent/MediaRecorderErrorEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MediaRecorderErrorEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MediaRecorderErrorEventInit": [
    "error"
  ],
  "MediaRecorderOptions": [
    "audioBitrateMode",
    "audioBitsPerSecond",
    "bitsPerSecond",
    "mimeType",
    "videoBitsPerSecond"
  ],
  "MediaSession": [
    "metadata",
    "playbackState",
    "setActionHandler(action, handler)",
    "setCameraActive(active)",
    "setMicrophoneActive(active)",
    "setPositionState()",
    "setPositionState(state)"
  ],
  "MediaSession/setActionHandler(action, handler)": [
    "action",
    "handler"
  ],
  "MediaSession/setCameraActive(active)": [
    "active"
  ],
  "MediaSession/setMicrophoneActive(active)": [
    "active"
  ],
  "MediaSession/setPositionState()": [
    "state"
  ],
  "MediaSession/setPositionState(state)": [
    "state"
  ],
  "MediaSessionAction": [
    "\"hangup\"",
    "\"nexttrack\"",
    "\"pause\"",
    "\"play\"",
    "\"previoustrack\"",
    "\"seekbackward\"",
    "\"seekforward\"",
    "\"seekto\"",
    "\"skipad\"",
    "\"stop\"",
    "\"togglecamera\"",
    "\"togglemicrophone\"",
    "hangup",
    "nexttrack",
    "pause",
    "play",
    "previoustrack",
    "seekbackward",
    "seekforward",
    "seekto",
    "skipad",
    "stop",
    "togglecamera",
    "togglemicrophone"
  ],
  "MediaSessionActionDetails": [
    "action",
    "fastSeek",
    "seekOffset",
    "seekTime"
  ],
  "MediaSessionActionHandler": [
    "details"
  ],
  "MediaSessionPlaybackState": [
    "\"none\"",
    "\"paused\"",
    "\"playing\"",
    "none",
    "paused",
    "playing"
  ],
  "MediaSettingsRange": [
    "max",
    "min",
    "step"
  ],
  "MediaSource": [
    "activeSourceBuffers",
    "addSourceBuffer()",
    "addSourceBuffer(type)",
    "clearLiveSeekableRange()",
    "constructor()",
    "duration",
    "endOfStream()",
    "endOfStream(error)",
    "isTypeSupported()",
    "isTypeSupported(type)",
    "onsourceclose",
    "onsourceended",
    "onsourceopen",
    "readyState",
    "removeSourceBuffer()",
    "removeSourceBuffer(sourceBuffer)",
    "setLiveSeekableRange()",
    "setLiveSeekableRange(start, end)",
    "sourceBuffers"
  ],
  "MediaStream": [
    "active",
    "addTrack()",
    "addTrack(track)",
    "clone()",
    "constructor!overload-1()",
    "constructor!overload-1(stream)",
    "constructor!overload-2()",
    "constructor!overload-2(tracks)",
    "constructor()",
    "getAudioTracks()",
    "getTrackById()",
    "getTrackById(trackId)",
    "getTracks()",
    "getVideoTracks()",
    "id",
    "onaddtrack",
    "onremovetrack",
    "removeTrack()",
    "removeTrack(track)"
  ],
  "MediaStreamAudioDestinationNode": [
    "MediaStreamAudioDestinationNode(context)",
    "MediaStreamAudioDestinationNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "stream"
  ],
  "MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode(context)": [
    "context",
    "options"
  ],
  "MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamAudioDestinationNode/constructor()": [
    "context",
    "options"
  ],
  "MediaStreamAudioDestinationNode/constructor(context)": [
    "context",
    "options"
  ],
  "MediaStreamAudioDestinationNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamAudioSourceNode": [
    "MediaStreamAudioSourceNode(context, options)",
    "[[input track]]",
    "constructor(context, options)",
    "mediaStream"
  ],
  "MediaStreamAudioSourceNode/MediaStreamAudioSourceNode(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamAudioSourceNode/constructor()": [
    "context",
    "options"
  ],
  "MediaStreamAudioSourceNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamAudioSourceOptions": [
    "mediaStream"
  ],
  "MediaStreamConstraints": [
    "audio",
    "video"
  ],
  "MediaStreamTrack": [
    "applyConstraints()",
    "applyConstraints(constraints)",
    "clone()",
    "contentHint",
    "enabled",
    "getCapabilities()",
    "getConstraints()",
    "getSettings()",
    "id",
    "kind",
    "label",
    "muted",
    "onended",
    "onmute",
    "onunmute",
    "readyState",
    "stop()"
  ],
  "MediaStreamTrackAudioSourceNode": [
    "MediaStreamTrackAudioSourceNode(context, options)",
    "constructor(context, options)"
  ],
  "MediaStreamTrackAudioSourceNode/MediaStreamTrackAudioSourceNode(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamTrackAudioSourceNode/constructor()": [
    "context",
    "options"
  ],
  "MediaStreamTrackAudioSourceNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "MediaStreamTrackAudioSourceOptions": [
    "mediaStreamTrack"
  ],
  "MediaStreamTrackEvent": [
    "MediaStreamTrackEvent",
    "constructor()",
    "constructor(type, eventInitDict)",
    "track"
  ],
  "MediaStreamTrackEventInit": [
    "track"
  ],
  "MediaStreamTrackState": [
    "ended",
    "live"
  ],
  "MediaTrackCapabilities": [
    "aspectRatio",
    "autoGainControl",
    "brightness",
    "channelCount",
    "colorTemperature",
    "contrast",
    "cursor",
    "deviceId",
    "displaySurface",
    "echoCancellation",
    "exposureCompensation",
    "exposureMode",
    "exposureTime",
    "facingMode",
    "focusDistance",
    "focusMode",
    "frameRate",
    "groupId",
    "height",
    "iso",
    "latency",
    "logicalSurface",
    "noiseSuppression",
    "pan",
    "resizeMode",
    "sampleRate",
    "sampleSize",
    "saturation",
    "sharpness",
    "tilt",
    "torch",
    "videoKind",
    "whiteBalanceMode",
    "width",
    "zoom"
  ],
  "MediaTrackConstraintSet": [
    "aspectRatio",
    "autoGainControl",
    "brightness",
    "channelCount",
    "colorTemperature",
    "contrast",
    "cursor",
    "deviceId",
    "displaySurface",
    "echoCancellation",
    "exposureCompensation",
    "exposureMode",
    "exposureTime",
    "facingMode",
    "focusDistance",
    "focusMode",
    "frameRate",
    "groupId",
    "height",
    "iso",
    "latency",
    "logicalSurface",
    "noiseSuppression",
    "pan",
    "pointsOfInterest",
    "resizeMode",
    "restrictOwnAudio",
    "sampleRate",
    "sampleSize",
    "saturation",
    "sharpness",
    "suppressLocalAudioPlayback",
    "tilt",
    "torch",
    "videoKind",
    "whiteBalanceMode",
    "width",
    "zoom"
  ],
  "MediaTrackConstraints": [
    "advanced"
  ],
  "MediaTrackSettings": [
    "aspectRatio",
    "autoGainControl",
    "brightness",
    "channelCount",
    "colorTemperature",
    "contrast",
    "cursor",
    "deviceId",
    "displaySurface",
    "echoCancellation",
    "exposureCompensation",
    "exposureMode",
    "exposureTime",
    "facingMode",
    "focusDistance",
    "focusMode",
    "frameRate",
    "groupId",
    "height",
    "iso",
    "latency",
    "logicalSurface",
    "noiseSuppression",
    "pan",
    "pointsOfInterest",
    "resizeMode",
    "restrictOwnAudio",
    "sampleRate",
    "sampleSize",
    "saturation",
    "sharpness",
    "tilt",
    "torch",
    "videoKind",
    "whiteBalanceMode",
    "width",
    "zoom"
  ],
  "MediaTrackSupportedConstraints": [
    "aspectRatio",
    "autoGainControl",
    "brightness",
    "channelCount",
    "colorTemperature",
    "contrast",
    "cursor",
    "deviceId",
    "displaySurface",
    "echoCancellation",
    "exposureCompensation",
    "exposureMode",
    "exposureTime",
    "facingMode",
    "focusDistance",
    "focusMode",
    "frameRate",
    "groupId",
    "height",
    "iso",
    "latency",
    "logicalSurface",
    "noiseSuppression",
    "pan",
    "pointsOfInterest",
    "resizeMode",
    "restrictOwnAudio",
    "sampleRate",
    "sampleSize",
    "saturation",
    "sharpness",
    "suppressLocalAudioPlayback",
    "tilt",
    "torch",
    "videoKind",
    "whiteBalanceMode",
    "width",
    "zoom"
  ],
  "Megabit": [
    "Megabit"
  ],
  "Memory": [
    "Memory(descriptor)",
    "buffer",
    "constructor(descriptor)",
    "grow(delta)"
  ],
  "Memory/Memory(descriptor)": [
    "descriptor"
  ],
  "Memory/constructor(descriptor)": [
    "descriptor"
  ],
  "Memory/grow(delta)": [
    "delta"
  ],
  "MemoryAttribution": [
    "container",
    "scope",
    "url"
  ],
  "MemoryAttributionContainer": [
    "id",
    "src"
  ],
  "MemoryBreakdownEntry": [
    "attribution",
    "bytes",
    "types"
  ],
  "MemoryDescriptor": [
    "initial",
    "maximum"
  ],
  "MemoryMeasurement": [
    "breakdown",
    "bytes"
  ],
  "MessageChannel": [
    "port1",
    "port2"
  ],
  "MessageEvent": [
    "data",
    "initMessageEvent(type, bubbles, cancelable, data, origin, lastEventId, source, ports)",
    "lastEventId",
    "origin",
    "ports",
    "source"
  ],
  "MessageEventInit": [
    "data",
    "lastEventId",
    "origin",
    "ports",
    "source"
  ],
  "MessagePort": [
    "close()",
    "message",
    "messageerror",
    "onmessage",
    "onmessageerror",
    "postMessage(message, options)",
    "postMessage(message, transfer)",
    "start()"
  ],
  "MeteringMode": [
    "\"continuous\"",
    "\"manual\"",
    "\"none\"",
    "\"single-shot\"",
    "continuous",
    "manual",
    "none",
    "single-shot"
  ],
  "MidiPermissionDescriptor": [
    "sysex"
  ],
  "Millisecond": [
    "Millisecond"
  ],
  "MimeType": [
    "description",
    "enabledPlugin",
    "suffixes",
    "type"
  ],
  "MimeTypeArray": [
    "item(index)",
    "length",
    "namedItem(name)"
  ],
  "MockCameraConfiguration": [
    "defaultFrameRate",
    "facingMode"
  ],
  "MockCaptureDeviceConfiguration": [
    "deviceId",
    "groupId",
    "label"
  ],
  "MockCapturePromptResult": [
    "MockCapturePromptResult",
    "denied",
    "granted"
  ],
  "MockCapturePromptResultConfiguration": [
    "getDisplayMedia",
    "getUserMedia"
  ],
  "MockMicrophoneConfiguration": [
    "defaultSampleRate"
  ],
  "MockSensor": [
    "maxSamplingFrequency",
    "minSamplingFrequency",
    "requestedSamplingFrequency"
  ],
  "MockSensorConfiguration": [
    "connected",
    "maxSamplingFrequency",
    "minSamplingFrequency",
    "mockSensorType"
  ],
  "MockSensorType": [
    "\"absolute-orientation\"",
    "\"accelerometer\"",
    "\"ambient-light\"",
    "\"geolocation\"",
    "\"gravity\"",
    "\"gyroscope\"",
    "\"linear-acceleration\"",
    "\"magnetometer\"",
    "\"proximity\"",
    "\"relative-orientation\"",
    "\"uncalibrated-magnetometer\""
  ],
  "Module": [
    "Module(bytes)",
    "constructor(bytes)",
    "customSections(moduleObject, sectionName)",
    "exports(moduleObject)",
    "imports(moduleObject)"
  ],
  "Module/Module(bytes)": [
    "bytes"
  ],
  "Module/constructor(bytes)": [
    "bytes"
  ],
  "Module/customSections(moduleObject, sectionName)": [
    "moduleObject",
    "sectionName"
  ],
  "Module/exports(moduleObject)": [
    "moduleObject"
  ],
  "Module/imports(moduleObject)": [
    "moduleObject"
  ],
  "ModuleExportDescriptor": [
    "kind",
    "name"
  ],
  "ModuleImportDescriptor": [
    "kind",
    "module",
    "name"
  ],
  "MouseEvent": [
    "MouseEvent(type)",
    "MouseEvent(type, eventInitDict)",
    "altKey",
    "button",
    "buttons",
    "clientX",
    "clientY",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "ctrlKey",
    "getModifierState(keyArg)",
    "initMouseEvent()",
    "initMouseEvent(typeArg)",
    "initMouseEvent(typeArg, bubblesArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg)",
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg)",
    "metaKey",
    "movementX",
    "movementY",
    "offsetX",
    "offsetY",
    "pageX",
    "pageY",
    "relatedTarget",
    "screenX",
    "screenY",
    "shiftKey",
    "x",
    "y"
  ],
  "MouseEvent/MouseEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "MouseEvent/MouseEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MouseEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "MouseEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "MouseEvent/getModifierState(keyArg)": [
    "keyArg"
  ],
  "MouseEvent/initMouseEvent(typeArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEvent/initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg)": [
    "altKeyArg",
    "bubblesArg",
    "buttonArg",
    "cancelableArg",
    "clientXArg",
    "clientYArg",
    "ctrlKeyArg",
    "detailArg",
    "metaKeyArg",
    "relatedTargetArg",
    "screenXArg",
    "screenYArg",
    "shiftKeyArg",
    "typeArg",
    "viewArg"
  ],
  "MouseEventInit": [
    "button",
    "buttons",
    "clientX",
    "clientY",
    "movementX",
    "movementY",
    "relatedTarget",
    "screenX",
    "screenY"
  ],
  "MultiCacheQueryOptions": [
    "cacheName"
  ],
  "MutationCallback": [
    "mutations",
    "observer"
  ],
  "MutationEvent": [
    "ADDITION",
    "MODIFICATION",
    "REMOVAL",
    "attrChange",
    "attrName",
    "attrchange",
    "attrname",
    "initMutationEvent()",
    "initMutationEvent(typeArg)",
    "initMutationEvent(typeArg, bubblesArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg)",
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg)",
    "newValue",
    "newvalue",
    "prevValue",
    "prevvalue",
    "relatedNode",
    "relatednode"
  ],
  "MutationEvent/initMutationEvent(typeArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationEvent/initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg)": [
    "attrChangeArg",
    "attrNameArg",
    "bubblesArg",
    "cancelableArg",
    "newValueArg",
    "prevValueArg",
    "relatedNodeArg",
    "typeArg"
  ],
  "MutationObserver": [
    "MutationObserver(callback)",
    "callback",
    "constructor(callback)",
    "disconnect()",
    "node list",
    "observe(target)",
    "observe(target, options)",
    "record queue",
    "takeRecords()"
  ],
  "MutationObserver/MutationObserver(callback)": [
    "callback"
  ],
  "MutationObserver/constructor(callback)": [
    "callback"
  ],
  "MutationObserver/observe(target)": [
    "options",
    "target"
  ],
  "MutationObserver/observe(target, options)": [
    "options",
    "target"
  ],
  "MutationObserverInit": [
    "attributeFilter",
    "attributeOldValue",
    "attributes",
    "characterData",
    "characterDataOldValue",
    "childList",
    "subtree"
  ],
  "MutationRecord": [
    "addedNodes",
    "attributeName",
    "attributeNamespace",
    "nextSibling",
    "oldValue",
    "previousSibling",
    "removedNodes",
    "target",
    "type"
  ],
  "NDEFMessage": [
    "constructor()",
    "constructor(messageInit)",
    "records"
  ],
  "NDEFMessageInit": [
    "records"
  ],
  "NDEFReader": [
    "constructor()",
    "onreading",
    "onreadingerror",
    "scan()",
    "scan(options)",
    "write()",
    "write(message)",
    "write(message, options)"
  ],
  "NDEFReadingEvent": [
    "constructor()",
    "constructor(type, readingEventInitDict)",
    "message",
    "serialNumber"
  ],
  "NDEFReadingEventInit": [
    "message",
    "serialNumber"
  ],
  "NDEFRecord": [
    "constructor()",
    "constructor(recordInit)",
    "data",
    "encoding",
    "id",
    "lang",
    "mediaType",
    "recordType",
    "toRecords()"
  ],
  "NDEFRecordDataSource": [
    "NDEFRecordDataSource"
  ],
  "NDEFRecordInit": [
    "data",
    "encoding",
    "id",
    "lang",
    "mediaType",
    "recordType"
  ],
  "NDEFScanOptions": [
    "signal"
  ],
  "NDEFWriteOptions": [
    "overwrite",
    "signal"
  ],
  "NamedFlow": [
    "firstEmptyRegionIndex",
    "getContent()",
    "getRegions()",
    "getRegionsByContent()",
    "getRegionsByContent(node)",
    "name",
    "overset"
  ],
  "NamedFlow/getRegionsByContent()": [
    "node"
  ],
  "NamedFlow/getRegionsByContent(node)": [
    "node"
  ],
  "NamedFlowMap": [
    "delete()",
    "get()",
    "has()",
    "set()"
  ],
  "NamedFlowMap/delete()": [
    "flowName"
  ],
  "NamedFlowMap/get()": [
    "flowName"
  ],
  "NamedFlowMap/has()": [
    "flowName"
  ],
  "NamedFlowMap/set()": [
    "flowName",
    "flowValue"
  ],
  "NamedNodeMap": [
    "attribute list",
    "element",
    "getNamedItem(qualifiedName)",
    "getNamedItemNS(namespace, localName)",
    "item(index)",
    "length",
    "removeNamedItem(qualifiedName)",
    "removeNamedItemNS(namespace, localName)",
    "setNamedItem(attr)",
    "setNamedItemNS(attr)"
  ],
  "NamedNodeMap/getNamedItem(qualifiedName)": [
    "qualifiedName"
  ],
  "NamedNodeMap/getNamedItemNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "NamedNodeMap/item(index)": [
    "index"
  ],
  "NamedNodeMap/removeNamedItem(qualifiedName)": [
    "qualifiedName"
  ],
  "NamedNodeMap/removeNamedItemNS(namespace, localName)": [
    "localName",
    "namespace"
  ],
  "NamedNodeMap/setNamedItem(attr)": [
    "attr"
  ],
  "NamedNodeMap/setNamedItemNS(attr)": [
    "attr"
  ],
  "NavigationEvent": [
    "NavigationEvent(type)",
    "NavigationEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "dir",
    "navbeforefocus",
    "navnotarget",
    "relatedTarget"
  ],
  "NavigationEvent/NavigationEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "NavigationEvent/NavigationEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "NavigationEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "NavigationEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "NavigationEventInit": [
    "dir",
    "relatedTarget"
  ],
  "NavigationPreloadManager": [
    "disable()",
    "enable()",
    "getState()",
    "setHeaderValue(value)"
  ],
  "NavigationPreloadManager/setHeaderValue(value)": [
    "value"
  ],
  "NavigationPreloadState": [
    "enabled",
    "headerValue"
  ],
  "NavigationType": [
    "back_forward",
    "navigate",
    "prerender",
    "reload"
  ],
  "Navigator": [
    "[[gamepads]]",
    "[[hasGamepadGesture]]",
    "[[sharePromise]]",
    "bluetooth",
    "clearClientBadge()",
    "clipboard",
    "contacts",
    "contacts manager",
    "credentials",
    "devicePosture",
    "doNotTrack",
    "geolocation",
    "getBattery()",
    "getGamepads()",
    "getInstalledRelatedApps()",
    "getUserMedia()",
    "getUserMedia(constraints, successCallback, errorCallback)",
    "hid",
    "keyboard",
    "maxTouchPoints",
    "mediaCapabilities",
    "mediaDevices",
    "mediaSession",
    "permissions",
    "presentation",
    "removeTrackingException()",
    "removeTrackingException(properties)",
    "requestMIDIAccess()",
    "requestMIDIAccess(options)",
    "requestMediaKeySystemAccess()",
    "requestMediaKeySystemAccess(keySystem, supportedConfigurations)",
    "scheduling",
    "sendBeacon()",
    "sendBeacon(url)",
    "sendBeacon(url, data)",
    "serial",
    "serviceWorker",
    "setClientBadge()",
    "setClientBadge(contents)",
    "share()",
    "share(data)",
    "storeTrackingException()",
    "storeTrackingException(properties)",
    "trackingExceptionExists()",
    "trackingExceptionExists(properties)",
    "usb",
    "vibrate()",
    "vibrate(pattern)",
    "wakeLock",
    "xr"
  ],
  "NavigatorAutomationInformation": [
    "NavigatorAutomationInformation",
    "webdriver"
  ],
  "NavigatorBadge": [
    "NavigatorBadge",
    "clearAppBadge()",
    "setAppBadge()",
    "setAppBadge(contents)"
  ],
  "NavigatorConcurrentHardware": [
    "navigator.hardwareConcurrency"
  ],
  "NavigatorContentUtils": [
    "registerProtocolHandler(scheme, url)",
    "unregisterProtocolHandler(scheme, url)"
  ],
  "NavigatorCookies": [
    "cookieEnabled"
  ],
  "NavigatorDeviceClass": [
    "deviceMemory"
  ],
  "NavigatorDeviceMemory": [
    "deviceMemory"
  ],
  "NavigatorFonts": [
    "fonts"
  ],
  "NavigatorGPU": [
    "gpu"
  ],
  "NavigatorID": [
    "appCodeName",
    "appName",
    "appVersion",
    "oscpu",
    "platform",
    "product",
    "productSub",
    "taintEnabled()",
    "userAgent",
    "vendor",
    "vendorSub"
  ],
  "NavigatorLanguage": [
    "language",
    "languages"
  ],
  "NavigatorLocks": [
    "locks"
  ],
  "NavigatorML": [
    "ml"
  ],
  "NavigatorNetworkInformation": [
    "connection"
  ],
  "NavigatorOnLine": [
    "onLine"
  ],
  "NavigatorPlugins": [
    "javaEnabled()",
    "mimeTypes",
    "plugins"
  ],
  "NavigatorStorage": [
    "storage"
  ],
  "NavigatorUA": [
    "getHighEntropyValues(hints)",
    "toJSON()",
    "userAgentData"
  ],
  "NavigatorUABrandVersion": [
    "brand",
    "version"
  ],
  "NavigatorUAData": [
    "brands",
    "getHighEntropyValues(hints)",
    "mobile",
    "platform",
    "toJSON()"
  ],
  "NavigatorUAData/getHighEntropyValues(hints)": [
    "hints"
  ],
  "NetworkInformation": [
    "downlink",
    "downlinkMax",
    "effectiveType",
    "onchange",
    "rtt",
    "type"
  ],
  "NetworkInformationSaveData": [
    "NetworkInformationSaveData",
    "saveData"
  ],
  "Node": [
    "ATTRIBUTE_NODE",
    "CDATA_SECTION_NODE",
    "COMMENT_NODE",
    "DOCUMENT_FRAGMENT_NODE",
    "DOCUMENT_NODE",
    "DOCUMENT_POSITION_CONTAINED_BY",
    "DOCUMENT_POSITION_CONTAINS",
    "DOCUMENT_POSITION_DISCONNECTED",
    "DOCUMENT_POSITION_FOLLOWING",
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
    "DOCUMENT_POSITION_PRECEDING",
    "DOCUMENT_TYPE_NODE",
    "ELEMENT_NODE",
    "ENTITY_NODE",
    "ENTITY_REFERENCE_NODE",
    "NOTATION_NODE",
    "PROCESSING_INSTRUCTION_NODE",
    "TEXT_NODE",
    "appendChild(node)",
    "baseURI",
    "childNodes",
    "cloneNode()",
    "cloneNode(deep)",
    "compareDocumentPosition(other)",
    "contains(other)",
    "empty",
    "ensure pre-insertion validity",
    "equals",
    "firstChild",
    "getFeature()",
    "getRootNode()",
    "getRootNode(options)",
    "getUserData()",
    "hasChildNodes()",
    "insertBefore(node, child)",
    "isConnected",
    "isDefaultNamespace(namespace)",
    "isEqualNode(otherNode)",
    "isSameNode(otherNode)",
    "isSupported",
    "language",
    "lastChild",
    "length",
    "lookupNamespaceURI(prefix)",
    "lookupPrefix(namespace)",
    "nextSibling",
    "node document",
    "nodeName",
    "nodeType",
    "nodeValue",
    "normalize()",
    "ownerDocument",
    "parentElement",
    "parentNode",
    "previousSibling",
    "removeChild(child)",
    "replace all",
    "replaceChild(node, child)",
    "setUserData()",
    "supported tokens",
    "textContent"
  ],
  "Node/appendChild(node)": [
    "node"
  ],
  "Node/cloneNode()": [
    "deep"
  ],
  "Node/cloneNode(deep)": [
    "deep"
  ],
  "Node/compareDocumentPosition(other)": [
    "other"
  ],
  "Node/contains(other)": [
    "other"
  ],
  "Node/getRootNode()": [
    "options"
  ],
  "Node/getRootNode(options)": [
    "options"
  ],
  "Node/insertBefore(node, child)": [
    "child",
    "node"
  ],
  "Node/isDefaultNamespace(namespace)": [
    "namespace"
  ],
  "Node/isEqualNode(otherNode)": [
    "otherNode"
  ],
  "Node/isSameNode(otherNode)": [
    "otherNode"
  ],
  "Node/lookupNamespaceURI(prefix)": [
    "prefix"
  ],
  "Node/lookupPrefix(namespace)": [
    "namespace"
  ],
  "Node/removeChild(child)": [
    "child"
  ],
  "Node/replaceChild(node, child)": [
    "child",
    "node"
  ],
  "NodeFilter": [
    "FILTER_ACCEPT",
    "FILTER_REJECT",
    "FILTER_SKIP",
    "SHOW_ALL",
    "SHOW_ATTRIBUTE",
    "SHOW_CDATA_SECTION",
    "SHOW_COMMENT",
    "SHOW_DOCUMENT",
    "SHOW_DOCUMENT_FRAGMENT",
    "SHOW_DOCUMENT_TYPE",
    "SHOW_ELEMENT",
    "SHOW_ENTITY",
    "SHOW_ENTITY_REFERENCE",
    "SHOW_NOTATION",
    "SHOW_PROCESSING_INSTRUCTION",
    "SHOW_TEXT",
    "acceptNode(node)"
  ],
  "NodeFilter/acceptNode(node)": [
    "node"
  ],
  "NodeIterator": [
    "detach()",
    "expandEntityReferences",
    "filter",
    "iterator collection",
    "nextNode()",
    "pointer before reference",
    "pointerBeforeReferenceNode",
    "previousNode()",
    "reference",
    "referenceNode",
    "root",
    "traverse",
    "whatToShow"
  ],
  "NodeList": [
    "item(index)",
    "length"
  ],
  "NodeList/item(index)": [
    "index"
  ],
  "NonDocumentTypeChildNode": [
    "nextElementSibling",
    "previousElementSibling"
  ],
  "NonElementParentNode": [
    "getElementById(elementId)"
  ],
  "NonElementParentNode/getElementById(elementId)": [
    "elementId"
  ],
  "Notification": [
    "Notification(title)",
    "Notification(title, options)",
    "actions",
    "badge",
    "body",
    "close()",
    "constructor(title)",
    "constructor(title, options)",
    "data",
    "dir",
    "icon",
    "image",
    "lang",
    "maxActions",
    "onclick",
    "onclose",
    "onerror",
    "onshow",
    "permission",
    "renotify",
    "requestPermission()",
    "requestPermission(deprecatedCallback)",
    "requireInteraction",
    "silent",
    "tag",
    "timestamp",
    "title",
    "vibrate"
  ],
  "Notification/Notification(title)": [
    "options",
    "title"
  ],
  "Notification/Notification(title, options)": [
    "options",
    "title"
  ],
  "Notification/constructor(title)": [
    "options",
    "title"
  ],
  "Notification/constructor(title, options)": [
    "options",
    "title"
  ],
  "Notification/requestPermission()": [
    "deprecatedCallback"
  ],
  "Notification/requestPermission(deprecatedCallback)": [
    "deprecatedCallback"
  ],
  "NotificationAction": [
    "action",
    "icon",
    "title"
  ],
  "NotificationDirection": [
    "\"auto\"",
    "\"ltr\"",
    "\"rtl\""
  ],
  "NotificationEvent": [
    "NotificationEvent(type, eventInitDict)",
    "action",
    "constructor(type, eventInitDict)",
    "notification"
  ],
  "NotificationEvent/NotificationEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "NotificationEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "NotificationEventInit": [
    "action",
    "notification"
  ],
  "NotificationOptions": [
    "actions",
    "badge",
    "body",
    "data",
    "dir",
    "icon",
    "image",
    "lang",
    "renotify",
    "requireInteraction",
    "silent",
    "tag",
    "timestamp",
    "vibrate"
  ],
  "NotificationPermission": [
    "\"default\"",
    "\"denied\"",
    "\"granted\""
  ],
  "NotificationPermissionCallback": [
    "permission"
  ],
  "OTPCredential": [
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)",
    "[[type]]",
    "code"
  ],
  "OTPCredentialRequestOptions": [
    "transport"
  ],
  "OTPCredentialTransportType": [
    "\"sms\"",
    "sms"
  ],
  "OfflineAudioCompletionEvent": [
    "OfflineAudioCompletionEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "renderedBuffer"
  ],
  "OfflineAudioCompletionEvent/OfflineAudioCompletionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "OfflineAudioCompletionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "OfflineAudioCompletionEventInit": [
    "renderedBuffer"
  ],
  "OfflineAudioContext": [
    "OfflineAudioContext(contextOptions)",
    "OfflineAudioContext(numberOfChannels, length, sampleRate)",
    "[[rendered buffer]]",
    "[[rendering started]]",
    "constructor(contextOptions)",
    "constructor(numberOfChannels, length, sampleRate)",
    "length",
    "oncomplete",
    "resume()",
    "startRendering()",
    "suspend(suspendTime)"
  ],
  "OfflineAudioContext/constructor(contextOptions)": [
    "contextOptions"
  ],
  "OfflineAudioContext/constructor(numberOfChannels, length, sampleRate)": [
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "OfflineAudioContext/suspend()": [
    "suspendTime"
  ],
  "OfflineAudioContext/suspend(suspendTime)": [
    "suspendTime"
  ],
  "OfflineAudioContextOptions": [
    "length",
    "numberOfChannels",
    "sampleRate"
  ],
  "OffscreenCanvas": [
    "OffscreenCanvas(width, height)",
    "canvas",
    "convertToBlob(options)",
    "getContext(contextId, options)",
    "height",
    "transferToImageBitmap()",
    "width"
  ],
  "OpenFilePickerOptions": [
    "multiple"
  ],
  "OptionalEffectTiming": [
    "delay",
    "direction",
    "duration",
    "easing",
    "endDelay",
    "fill",
    "iterationStart",
    "iterations",
    "playbackRate"
  ],
  "OrientationLockType": [
    "any",
    "landscape",
    "landscape-primary",
    "landscape-secondary",
    "natural",
    "portrait",
    "portrait-primary",
    "portrait-secondary"
  ],
  "OrientationSensor": [
    "populateMatrix(targetMatrix)",
    "quaternion"
  ],
  "OrientationSensor/populateMatrix(targetMatrix)": [
    "targetMatrix"
  ],
  "OrientationSensorLocalCoordinateSystem": [
    "\"device\"",
    "\"screen\""
  ],
  "OrientationSensorOptions": [
    "referenceFrame"
  ],
  "OrientationType": [
    "landscape-primary",
    "landscape-secondary",
    "portrait-primary",
    "portrait-secondary"
  ],
  "Origin-Policy": [
    "allowed",
    "preferred"
  ],
  "Origin2D": [
    "x",
    "y"
  ],
  "Origin3D": [
    "x",
    "y",
    "z"
  ],
  "OscillatorNode": [
    "OscillatorNode(context)",
    "OscillatorNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "detune",
    "frequency",
    "setPeriodicWave(periodicWave)",
    "type"
  ],
  "OscillatorNode/OscillatorNode(context)": [
    "context",
    "options"
  ],
  "OscillatorNode/OscillatorNode(context, options)": [
    "context",
    "options"
  ],
  "OscillatorNode/constructor()": [
    "context",
    "options"
  ],
  "OscillatorNode/constructor(context)": [
    "context",
    "options"
  ],
  "OscillatorNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "OscillatorNode/setPeriodicWave()": [
    "periodicWave"
  ],
  "OscillatorNode/setPeriodicWave(periodicWave)": [
    "periodicWave"
  ],
  "OscillatorOptions": [
    "detune",
    "frequency",
    "periodicWave",
    "type"
  ],
  "OscillatorType": [
    "\"custom\"",
    "\"sawtooth\"",
    "\"sine\"",
    "\"square\"",
    "\"triangle\"",
    "custom",
    "sawtooth",
    "sine",
    "square",
    "triangle"
  ],
  "OverSampleType": [
    "\"2x\"",
    "\"4x\"",
    "\"none\"",
    "2x",
    "4x",
    "none"
  ],
  "OverconstrainedError": [
    "constraint",
    "constructor()",
    "constructor(constraint)",
    "constructor(constraint, message)"
  ],
  "OverscrollEvent": [
    "OverscrollEvent",
    "deltaX",
    "deltaY"
  ],
  "OverscrollEventInit": [
    "OverscrollEventInit",
    "deltaX",
    "deltaY"
  ],
  "PageTransitionEvent": [
    "persisted"
  ],
  "PaintRenderingContext2D": [
    "alpha",
    "output bitmap"
  ],
  "PaintRenderingContext2DSettings": [
    "alpha"
  ],
  "PaintSize": [
    "height",
    "width"
  ],
  "PaintWorkletGlobalScope": [
    "devicePixelRatio",
    "registerPaint(name, paintCtor)"
  ],
  "PaintWorkletGlobalScope/registerPaint(name, paintCtor)": [
    "name",
    "paintCtor"
  ],
  "PannerNode": [
    "PannerNode(context)",
    "PannerNode(context, options)",
    "coneInnerAngle",
    "coneOuterAngle",
    "coneOuterGain",
    "constructor(context)",
    "constructor(context, options)",
    "distanceModel",
    "maxDistance",
    "orientationX",
    "orientationY",
    "orientationZ",
    "panningModel",
    "positionX",
    "positionY",
    "positionZ",
    "refDistance",
    "rolloffFactor",
    "setOrientation(x, y, z)",
    "setPosition(x, y, z)"
  ],
  "PannerNode/PannerNode(context)": [
    "context",
    "options"
  ],
  "PannerNode/PannerNode(context, options)": [
    "context",
    "options"
  ],
  "PannerNode/constructor()": [
    "context",
    "options"
  ],
  "PannerNode/constructor(context)": [
    "context",
    "options"
  ],
  "PannerNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "PannerNode/setOrientation()": [
    "x",
    "y",
    "z"
  ],
  "PannerNode/setOrientation(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "PannerNode/setPosition()": [
    "x",
    "y",
    "z"
  ],
  "PannerNode/setPosition(x, y, z)": [
    "x",
    "y",
    "z"
  ],
  "PannerOptions": [
    "coneInnerAngle",
    "coneOuterAngle",
    "coneOuterGain",
    "distanceModel",
    "maxDistance",
    "orientationX",
    "orientationY",
    "orientationZ",
    "panningModel",
    "positionX",
    "positionY",
    "positionZ",
    "refDistance",
    "rolloffFactor"
  ],
  "PanningModelType": [
    "\"HRTF\"",
    "\"equalpower\"",
    "HRTF",
    "equalpower"
  ],
  "ParentNode": [
    "append()",
    "append(...nodes)",
    "childElementCount",
    "children",
    "firstElementChild",
    "lastElementChild",
    "prepend()",
    "prepend(...nodes)",
    "querySelector(selectors)",
    "querySelectorAll(selectors)",
    "replaceChildren()",
    "replaceChildren(...nodes)"
  ],
  "ParentNode/append()": [
    "nodes"
  ],
  "ParentNode/append(...nodes)": [
    "nodes"
  ],
  "ParentNode/prepend()": [
    "nodes"
  ],
  "ParentNode/prepend(...nodes)": [
    "nodes"
  ],
  "ParentNode/querySelector(selectors)": [
    "selectors"
  ],
  "ParentNode/querySelectorAll(selectors)": [
    "selectors"
  ],
  "ParentNode/replaceChildren()": [
    "nodes"
  ],
  "ParentNode/replaceChildren(...nodes)": [
    "nodes"
  ],
  "ParityType": [
    "even",
    "none",
    "odd"
  ],
  "ParsedTextDirective": [
    "prefix",
    "suffix",
    "textend",
    "textstart"
  ],
  "PasswordCredential": [
    "PasswordCredential(data)",
    "PasswordCredential(form)",
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)",
    "[[Create]](origin, options, sameOriginWithAncestors)",
    "[[Store]](credential, sameOriginWithAncestors)",
    "constructor(data)",
    "constructor(form)",
    "password"
  ],
  "PasswordCredential/PasswordCredential(data)": [
    "data"
  ],
  "PasswordCredential/PasswordCredential(form)": [
    "form"
  ],
  "PasswordCredential/constructor(data)": [
    "data"
  ],
  "PasswordCredential/constructor(form)": [
    "form"
  ],
  "PasswordCredentialData": [
    "iconURL",
    "name",
    "origin",
    "password"
  ],
  "Path2D": [
    "Path2D(path)",
    "addPath(path, transform)"
  ],
  "PaymentComplete": [
    "fail",
    "success",
    "unknown"
  ],
  "PaymentCurrencyAmount": [
    "currency",
    "value"
  ],
  "PaymentDetailsBase": [
    "displayItems",
    "modifiers"
  ],
  "PaymentDetailsInit": [
    "id",
    "total"
  ],
  "PaymentDetailsModifier": [
    "additionalDisplayItems",
    "data",
    "supportedMethods",
    "total"
  ],
  "PaymentDetailsUpdate": [
    "paymentMethodErrors",
    "total"
  ],
  "PaymentHandlerResponse": [
    "details",
    "methodName"
  ],
  "PaymentInstrument": [
    "capabilities",
    "icons",
    "method",
    "name"
  ],
  "PaymentInstruments": [
    "clear()",
    "delete()",
    "delete(instrumentKey)",
    "get()",
    "get(instrumentKey)",
    "has()",
    "has(instrumentKey)",
    "keys()",
    "set()",
    "set(instrumentKey, details)"
  ],
  "PaymentItem": [
    "amount",
    "label",
    "pending"
  ],
  "PaymentManager": [
    "instruments",
    "userHint"
  ],
  "PaymentMethodChangeEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "methodDetails",
    "methodName"
  ],
  "PaymentMethodChangeEventInit": [
    "methodDetails",
    "methodName"
  ],
  "PaymentMethodData": [
    "data",
    "supportedMethods"
  ],
  "PaymentRequest": [
    "[[acceptPromise]]",
    "[[details]]",
    "[[handler]]",
    "[[response]]",
    "[[serializedMethodData]]",
    "[[serializedModifierData]]",
    "[[state]]",
    "[[updating]]",
    "abort()",
    "canMakePayment()",
    "closed",
    "constructor()",
    "constructor(methodData, details)",
    "created",
    "id",
    "interactive",
    "onpaymentmethodchange",
    "show()",
    "show(detailsPromise)",
    "state"
  ],
  "PaymentRequestDetailsUpdate": [
    "error",
    "modifiers",
    "paymentMethodErrors",
    "total"
  ],
  "PaymentRequestEvent": [
    "changePaymentMethod()",
    "changePaymentMethod(methodName)",
    "changePaymentMethod(methodName, methodDetails)",
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "instrumentKey",
    "methodData",
    "modifiers",
    "openWindow()",
    "openWindow(url)",
    "paymentRequestId",
    "paymentRequestOrigin",
    "respondWith()",
    "respondWith(handlerResponsePromise)",
    "topOrigin",
    "total"
  ],
  "PaymentRequestEventInit": [
    "instrumentKey",
    "methodData",
    "modifiers",
    "paymentRequestId",
    "paymentRequestOrigin",
    "topOrigin",
    "total"
  ],
  "PaymentRequestUpdateEvent": [
    "Constructor",
    "PaymentRequestUpdateEvent.PaymentRequestUpdateEvent()",
    "[[waitForUpdate]]",
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "updateWith()",
    "updateWith(detailsPromise)"
  ],
  "PaymentResponse": [
    "[[complete]]",
    "[[request]]",
    "[[retryPromise]]",
    "complete()",
    "complete(result)",
    "details",
    "methodName",
    "requestId",
    "retry()",
    "retry(errorFields)"
  ],
  "PaymentValidationErrors": [
    "error",
    "paymentMethod"
  ],
  "Pbkdf2Params": [
    "hash",
    "iterations",
    "salt"
  ],
  "Performance": [
    "clearMarks()",
    "clearMarks(markName)",
    "clearMeasures()",
    "clearMeasures(measureName)",
    "clearResourceTimings()",
    "eventCounts",
    "getEntries()",
    "getEntriesByName()",
    "getEntriesByName(name)",
    "getEntriesByName(name, type)",
    "getEntriesByType()",
    "getEntriesByType(type)",
    "mark()",
    "mark(markName)",
    "mark(markName, markOptions)",
    "measure()",
    "measure(measureName)",
    "measure(measureName, startOrMeasureOptions)",
    "measure(measureName, startOrMeasureOptions, endMark)",
    "measureUserAgentSpecificMemory()",
    "navigation",
    "now()",
    "onresourcetimingbufferfull",
    "setResourceTimingBufferSize()",
    "setResourceTimingBufferSize(maxSize)",
    "timeOrigin",
    "timing",
    "toJSON()"
  ],
  "PerformanceElementTiming": [
    "element",
    "id",
    "identifier",
    "intersectionRect",
    "loadTime",
    "naturalHeight",
    "naturalWidth",
    "renderTime",
    "toJSON()",
    "url"
  ],
  "PerformanceEntry": [
    "attribution",
    "duration",
    "entryType",
    "name",
    "startTime",
    "toJSON()"
  ],
  "PerformanceEventTiming": [
    "associated event",
    "cancelable",
    "eventtarget",
    "processingEnd",
    "processingStart",
    "target",
    "toJSON()"
  ],
  "PerformanceLongTaskTiming": [
    "attribution",
    "toJSON()"
  ],
  "PerformanceMark": [
    "constructor()",
    "constructor(markName)",
    "constructor(markName, markOptions)",
    "detail"
  ],
  "PerformanceMarkOptions": [
    "detail",
    "startTime"
  ],
  "PerformanceMeasure": [
    "detail"
  ],
  "PerformanceMeasureOptions": [
    "detail",
    "duration",
    "end",
    "start"
  ],
  "PerformanceNavigation": [
    "TYPE_BACK_FORWARD",
    "TYPE_NAVIGATE",
    "TYPE_RELOAD",
    "TYPE_RESERVED",
    "redirectCount",
    "toJSON()",
    "type"
  ],
  "PerformanceNavigationTiming": [
    "domComplete",
    "domContentLoadedEventEnd",
    "domContentLoadedEventStart",
    "domInteractive",
    "loadEventEnd",
    "loadEventStart",
    "redirectCount",
    "service worker timing",
    "toJSON()",
    "type",
    "unloadEventEnd",
    "unloadEventStart"
  ],
  "PerformanceObserver": [
    "constructor()",
    "constructor(callback)",
    "disconnect()",
    "observe()",
    "observe(options)",
    "supportedEntryTypes",
    "takeRecords()"
  ],
  "PerformanceObserverCallbackOptions": [
    "droppedEntriesCount"
  ],
  "PerformanceObserverEntryList": [
    "getEntries()",
    "getEntriesByName()",
    "getEntriesByName(name)",
    "getEntriesByName(name, type)",
    "getEntriesByType()",
    "getEntriesByType(type)"
  ],
  "PerformanceObserverInit": [
    "buffered",
    "durationThreshold",
    "entryTypes",
    "type"
  ],
  "PerformanceResourceTiming": [
    "connectEnd",
    "connectStart",
    "decodedBodySize",
    "domainLookupEnd",
    "domainLookupStart",
    "encodedBodySize",
    "fetchStart",
    "initiatorType",
    "nextHopProtocol",
    "redirectEnd",
    "redirectStart",
    "requestStart",
    "responseEnd",
    "responseStart",
    "secureConnectionStart",
    "serverTiming",
    "toJSON()",
    "transferSize",
    "workerStart"
  ],
  "PerformanceServerTiming": [
    "description",
    "duration",
    "name",
    "toJSON()"
  ],
  "PerformanceTiming": [
    "connectEnd",
    "connectStart",
    "domComplete",
    "domContentLoadedEventEnd",
    "domContentLoadedEventStart",
    "domInteractive",
    "domLoading",
    "domainLookupEnd",
    "domainLookupStart",
    "fetchStart",
    "loadEventEnd",
    "loadEventStart",
    "navigationStart",
    "redirectEnd",
    "redirectStart",
    "requestStart",
    "responseEnd",
    "responseStart",
    "secureConnectionStart",
    "toJSON()",
    "unloadEventEnd",
    "unloadEventStart"
  ],
  "PeriodicSyncEvent": [
    "PeriodicSyncEvent(type, init)",
    "constructor(type, init)",
    "tag"
  ],
  "PeriodicSyncEvent/PeriodicSyncEvent(type, init)": [
    "init",
    "type"
  ],
  "PeriodicSyncEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "PeriodicSyncEventInit": [
    "tag"
  ],
  "PeriodicSyncManager": [
    "getTags()",
    "register(tag)",
    "register(tag, options)",
    "service worker registration",
    "unregister(tag)"
  ],
  "PeriodicSyncManager/register(tag)": [
    "options",
    "tag"
  ],
  "PeriodicSyncManager/register(tag, options)": [
    "options",
    "tag"
  ],
  "PeriodicSyncManager/unregister(tag)": [
    "tag"
  ],
  "PeriodicWave": [
    "PeriodicWave(context)",
    "PeriodicWave(context, options)",
    "[[imag]]",
    "[[normalize]]",
    "[[real]]",
    "constructor(context)",
    "constructor(context, options)"
  ],
  "PeriodicWave/PeriodicWave(context)": [
    "context",
    "options"
  ],
  "PeriodicWave/PeriodicWave(context, options)": [
    "context",
    "options"
  ],
  "PeriodicWave/constructor()": [
    "context",
    "options"
  ],
  "PeriodicWave/constructor(context)": [
    "context",
    "options"
  ],
  "PeriodicWave/constructor(context, options)": [
    "context",
    "options"
  ],
  "PeriodicWaveConstraints": [
    "disableNormalization"
  ],
  "PeriodicWaveOptions": [
    "imag",
    "real"
  ],
  "PermissionDescriptor": [
    "name",
    "stronger than"
  ],
  "PermissionName": [
    "\"accelerometer\"",
    "\"ambient-light-sensor\"",
    "\"background-fetch\"",
    "\"background-sync\"",
    "\"bluetooth\"",
    "\"camera\"",
    "\"clipboard-write\"",
    "\"device-info\"",
    "\"display-capture\"",
    "\"file-system\"",
    "\"font-access\"",
    "\"gamepad\"",
    "\"geolocation\"",
    "\"gyroscope\"",
    "\"idle-detection\"",
    "\"magnetometer\"",
    "\"microphone\"",
    "\"midi\"",
    "\"nfc\"",
    "\"notifications\"",
    "\"persistent-storage\"",
    "\"push\"",
    "\"screen-wake-lock\"",
    "\"speaker-selection\"",
    "\"usb\"",
    "\"xr\"",
    "\"xr-session-supported\"",
    "ambient-light-sensor",
    "camera",
    "microphone",
    "speaker-selection"
  ],
  "PermissionSetParameters": [
    "descriptor",
    "oneRealm",
    "state"
  ],
  "PermissionState": [
    "\"denied\"",
    "\"granted\"",
    "\"prompt\""
  ],
  "PermissionStatus": [
    "[[query]]",
    "onchange",
    "state"
  ],
  "Permissions": [
    "query(permissionDesc)",
    "request(permissionDesc)",
    "revoke(permissionDesc)"
  ],
  "Permissions/query(permissionDesc)": [
    "permissionDesc"
  ],
  "Permissions/request(permissionDesc)": [
    "permissionDesc"
  ],
  "Permissions/revoke(permissionDesc)": [
    "permissionDesc"
  ],
  "PermissionsPolicy": [
    "allowedFeatures()",
    "allowsFeature(feature)",
    "allowsFeature(feature, origin)",
    "features()",
    "getAllowlistForFeature(feature)"
  ],
  "PermissionsPolicy/allowsFeature(feature)": [
    "feature",
    "origin"
  ],
  "PermissionsPolicy/allowsFeature(feature, origin)": [
    "feature",
    "origin"
  ],
  "PermissionsPolicy/getAllowlistForFeature(feature)": [
    "feature"
  ],
  "PermissionsPolicyViolationReportBody": [
    "columnNumber",
    "columnnumber",
    "disposition",
    "featureId",
    "featureid",
    "lineNumber",
    "linenumber",
    "sourceFile",
    "sourcefile"
  ],
  "PhotoCapabilities": [
    "fillLightMode",
    "imageHeight",
    "imageWidth",
    "redEyeReduction"
  ],
  "PhotoSettings": [
    "fillLightMode",
    "imageHeight",
    "imageWidth",
    "redEyeReduction"
  ],
  "PictureInPictureEvent": [
    "PictureInPictureEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "pictureInPictureWindow"
  ],
  "PictureInPictureEvent/PictureInPictureEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "PictureInPictureEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "PictureInPictureEventInit": [
    "pictureInPictureWindow"
  ],
  "PictureInPictureWindow": [
    "height",
    "onresize",
    "resize",
    "width"
  ],
  "PixelFormat": [
    "\"I420\"",
    "I420"
  ],
  "PlaneInit": [
    "data",
    "offset",
    "stride"
  ],
  "PlaneLayout": [
    "offset",
    "stride"
  ],
  "PlaybackDirection": [
    "\"alternate\"",
    "\"alternate-reverse\"",
    "\"normal\"",
    "\"reverse\""
  ],
  "Plugin": [
    "description",
    "filename",
    "item()",
    "length",
    "name",
    "namedItem()"
  ],
  "PluginArray": [
    "item(index)",
    "length",
    "namedItem(name)",
    "refresh()"
  ],
  "Point2D": [
    "x",
    "y"
  ],
  "PointerEvent": [
    "altitudeAngle",
    "azimuthAngle",
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "getCoalescedEvents()",
    "getPredictedEvents()",
    "height",
    "isPrimary",
    "pointerId",
    "pointerType",
    "pressure",
    "tangentialPressure",
    "tiltX",
    "tiltY",
    "twist",
    "width"
  ],
  "PointerEventInit": [
    "altitudeAngle",
    "azimuthAngle",
    "coalescedEvents",
    "height",
    "isPrimary",
    "pointerId",
    "pointerType",
    "predictedEvents",
    "pressure",
    "tangentialPressure",
    "tiltX",
    "tiltY",
    "twist",
    "width"
  ],
  "PopStateEvent": [
    "state"
  ],
  "PortalActivateEvent": [
    "PortalActivateEvent(type)",
    "PortalActivateEvent(type, eventInitDict)",
    "activation promise",
    "adoptPredecessor()",
    "adopted predecessor element",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data",
    "predecessor browsing context",
    "successor window"
  ],
  "PortalActivateEvent/PortalActivateEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "PortalActivateEvent/PortalActivateEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "PortalActivateEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "PortalActivateEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "PortalActivateEventInit": [
    "data"
  ],
  "PortalActivateOptions": [
    "data"
  ],
  "PortalHost": [
    "message",
    "messageerror",
    "onmessage",
    "onmessageerror",
    "postMessage(message)",
    "postMessage(message, options)"
  ],
  "PortalHost/postMessage(message)": [
    "message",
    "options"
  ],
  "PortalHost/postMessage(message, options)": [
    "message",
    "options"
  ],
  "PositionAlignSetting": [
    "\"auto\"",
    "\"center\"",
    "\"line-left\"",
    "\"line-right\"",
    "auto",
    "center",
    "line-left",
    "line-right"
  ],
  "PositionCallback": [
    "PositionCallback"
  ],
  "PositionErrorCallback": [
    "PositionErrorCallback"
  ],
  "PositionOptions": [
    "enableHighAccuracy",
    "maximumAge",
    "timeout"
  ],
  "PostMessageOptions": [
    "transfer"
  ],
  "PredefinedColorSpace": [
    "display-p3",
    "srgb"
  ],
  "PremultiplyAlpha": [
    "default",
    "none",
    "premultiply"
  ],
  "Presentation": [
    "defaultRequest",
    "receiver"
  ],
  "PresentationAvailability": [
    "onchange",
    "value"
  ],
  "PresentationConnection": [
    "binaryType",
    "close()",
    "id",
    "onclose",
    "onconnect",
    "onmessage",
    "onterminate",
    "send!overload-1()",
    "send!overload-1(data)",
    "send!overload-2()",
    "send!overload-2(data)",
    "send!overload-3()",
    "send!overload-3(data)",
    "send()",
    "send(message)",
    "state",
    "terminate()",
    "url"
  ],
  "PresentationConnectionAvailableEvent": [
    "connection",
    "constructor()",
    "constructor(type, eventInitDict)"
  ],
  "PresentationConnectionAvailableEventInit": [
    "connection"
  ],
  "PresentationConnectionCloseEvent": [
    "constructor()",
    "constructor(type, eventInitDict)",
    "message",
    "reason"
  ],
  "PresentationConnectionCloseEventInit": [
    "message",
    "reason"
  ],
  "PresentationConnectionCloseReason": [
    "closed",
    "error",
    "wentaway"
  ],
  "PresentationConnectionList": [
    "connections",
    "onconnectionavailable"
  ],
  "PresentationConnectionState": [
    "closed",
    "connected",
    "connecting",
    "terminated"
  ],
  "PresentationReceiver": [
    "connectionList"
  ],
  "PresentationRequest": [
    "constructor!overload-1()",
    "constructor!overload-1(urls)",
    "constructor()",
    "constructor(url)",
    "getAvailability()",
    "onconnectionavailable",
    "reconnect()",
    "reconnect(presentationId)",
    "start()"
  ],
  "PresentationStyle": [
    "\"attachment\"",
    "\"inline\"",
    "\"unspecified\""
  ],
  "ProcessingInstruction": [
    "substring data",
    "target"
  ],
  "Profiler": [
    "constructor()",
    "constructor(options)",
    "new Profiler(options)",
    "sampleInterval",
    "stop()",
    "stopped"
  ],
  "ProfilerFrame": [
    "column",
    "line",
    "name",
    "resourceId"
  ],
  "ProfilerInitOptions": [
    "maxBufferSize",
    "sampleInterval"
  ],
  "ProfilerSample": [
    "stackId",
    "timestamp"
  ],
  "ProfilerStack": [
    "frameId",
    "parentId"
  ],
  "ProfilerTrace": [
    "frames",
    "resources",
    "samples",
    "stacks"
  ],
  "ProgressEvent": [
    "ProgressEvent(type)",
    "ProgressEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "lengthComputable",
    "loaded",
    "total"
  ],
  "ProgressEvent/ProgressEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "ProgressEvent/ProgressEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ProgressEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "ProgressEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "ProgressEventInit": [
    "lengthComputable",
    "loaded",
    "total"
  ],
  "PromiseRejectionEvent": [
    "promise",
    "reason"
  ],
  "PropertyDefinition": [
    "inherits",
    "initialValue",
    "name",
    "syntax"
  ],
  "ProximityReadingValues": [
    "distance",
    "max",
    "near"
  ],
  "ProximitySensor": [
    "ProximitySensor()",
    "ProximitySensor(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)",
    "distance",
    "max",
    "near"
  ],
  "ProximitySensor/ProximitySensor()": [
    "sensorOptions"
  ],
  "ProximitySensor/ProximitySensor(sensorOptions)": [
    "sensorOptions"
  ],
  "ProximitySensor/constructor()": [
    "sensorOptions"
  ],
  "ProximitySensor/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "PublicKeyCredential": [
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)",
    "[[Create]](origin, options, sameOriginWithAncestors)",
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)",
    "[[Store]](credential, sameOriginWithAncestors)",
    "[[clientExtensionsResults]]",
    "[[discovery]]",
    "[[identifier]]",
    "[[preventSilentAccess]](credential, sameOriginWithAncestors)",
    "[[type]]",
    "getClientExtensionResults()",
    "isUserVerifyingPlatformAuthenticatorAvailable()",
    "rawId",
    "response"
  ],
  "PublicKeyCredential/[[Create]](origin, options, sameOriginWithAncestors)": [
    "options",
    "origin",
    "sameOriginWithAncestors"
  ],
  "PublicKeyCredential/[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)": [
    "options",
    "origin",
    "sameOriginWithAncestors"
  ],
  "PublicKeyCredential/[[Store]](credential, sameOriginWithAncestors)": [
    "credential",
    "sameOriginWithAncestors"
  ],
  "PublicKeyCredentialCreationOptions": [
    "attestation",
    "authenticatorSelection",
    "challenge",
    "excludeCredentials",
    "extensions",
    "pubKeyCredParams",
    "rp",
    "timeout",
    "user"
  ],
  "PublicKeyCredentialDescriptor": [
    "id",
    "transports",
    "type"
  ],
  "PublicKeyCredentialEntity": [
    "name"
  ],
  "PublicKeyCredentialParameters": [
    "alg",
    "type"
  ],
  "PublicKeyCredentialRequestOptions": [
    "allowCredentials",
    "challenge",
    "extensions",
    "rpId",
    "timeout",
    "userVerification"
  ],
  "PublicKeyCredentialRpEntity": [
    "id"
  ],
  "PublicKeyCredentialType": [
    "\"public-key\"",
    "public-key"
  ],
  "PublicKeyCredentialUserEntity": [
    "displayName",
    "id"
  ],
  "PushEncryptionKeyName": [
    "auth",
    "p256dh"
  ],
  "PushEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "data"
  ],
  "PushEventInit": [
    "data"
  ],
  "PushManager": [
    "getSubscription()",
    "permissionState()",
    "permissionState(options)",
    "subscribe()",
    "subscribe(options)",
    "supportedContentEncodings"
  ],
  "PushMessageData": [
    "arrayBuffer()",
    "blob()",
    "json()",
    "text()"
  ],
  "PushMessageDataInit": [
    "PushMessageDataInit"
  ],
  "PushPermissionDescriptor": [
    "userVisibleOnly"
  ],
  "PushPermissionState": [
    "denied",
    "granted",
    "prompt"
  ],
  "PushSubscription": [
    "endpoint",
    "expirationTime",
    "getKey()",
    "getKey(name)",
    "options",
    "toJSON()",
    "unsubscribe()",
    "unsubscribed"
  ],
  "PushSubscriptionChangeEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "newSubscription",
    "oldSubscription"
  ],
  "PushSubscriptionChangeEventInit": [
    "newSubscription",
    "oldSubscription"
  ],
  "PushSubscriptionJSON": [
    "endpoint",
    "expirationTime",
    "keys"
  ],
  "PushSubscriptionOptions": [
    "applicationServerKey",
    "userVisibleOnly"
  ],
  "PushSubscriptionOptionsInit": [
    "applicationServerKey",
    "userVisibleOnly"
  ],
  "QueryOptions": [
    "persistentAccess",
    "select"
  ],
  "QueuingStrategy": [
    "highWaterMark",
    "size"
  ],
  "QueuingStrategyInit": [
    "highWaterMark"
  ],
  "QueuingStrategySize": [
    "chunk"
  ],
  "RTCAudioHandlerStats": [
    "audioLevel",
    "totalAudioEnergy",
    "totalSamplesDuration",
    "voiceActivityFlag"
  ],
  "RTCAudioReceiverStats": [
    "audioLevel",
    "concealedSamples",
    "concealmentEvents",
    "estimatedPlayoutTimestamp",
    "insertedSamplesForDeceleration",
    "jitterBufferDelay",
    "jitterBufferEmittedCount",
    "removedSamplesForAcceleration",
    "silentConcealedSamples",
    "totalAudioEnergy",
    "totalSamplesDuration",
    "totalSamplesReceived"
  ],
  "RTCAudioSenderStats": [
    "echoReturnLoss",
    "echoReturnLossEnhancement",
    "mediaSourceId",
    "totalSamplesSent"
  ],
  "RTCAudioSourceStats": [
    "audioLevel",
    "echoReturnLoss",
    "echoReturnLossEnhancement",
    "totalAudioEnergy",
    "totalSamplesDuration"
  ],
  "RTCBundlePolicy": [
    "balanced",
    "max-bundle",
    "max-compat"
  ],
  "RTCCertificate": [
    "expires",
    "getFingerprints()"
  ],
  "RTCCertificateExpiration": [
    "expires"
  ],
  "RTCCertificateStats": [
    "base64Certificate",
    "fingerprint",
    "fingerprintAlgorithm",
    "issuerCertificateId"
  ],
  "RTCCodecStats": [
    "channels",
    "clockRate",
    "codecType",
    "implementation",
    "mimeType",
    "payloadType",
    "sdpFmtpLine",
    "transportId"
  ],
  "RTCCodecType": [
    "decode",
    "encode"
  ],
  "RTCConfiguration": [
    "bundlePolicy",
    "certificates",
    "iceCandidatePoolSize",
    "iceServers",
    "iceTransportPolicy",
    "rtcpMuxPolicy"
  ],
  "RTCDTMFSender": [
    "canInsertDTMF",
    "insertDTMF()",
    "insertDTMF(tones)",
    "insertDTMF(tones, duration)",
    "insertDTMF(tones, duration, interToneGap)",
    "ontonechange",
    "toneBuffer",
    "tonechange"
  ],
  "RTCDTMFToneChangeEvent": [
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "tone"
  ],
  "RTCDTMFToneChangeEventInit": [
    "tone"
  ],
  "RTCDataChannel": [
    "binaryType",
    "bufferedAmount",
    "bufferedAmountLowThreshold",
    "bufferedamountlow",
    "close",
    "close()",
    "closing",
    "error",
    "id",
    "label",
    "maxPacketLifeTime",
    "maxRetransmits",
    "message",
    "negotiated",
    "onbufferedamountlow",
    "onclose",
    "onclosing",
    "onerror",
    "onmessage",
    "onopen",
    "open",
    "ordered",
    "priority",
    "protocol",
    "readyState",
    "send!overload-1()",
    "send!overload-1(data)",
    "send!overload-2()",
    "send!overload-2(data)",
    "send!overload-3()",
    "send!overload-3(data)",
    "send()",
    "send(data)"
  ],
  "RTCDataChannelEvent": [
    "channel",
    "constructor()",
    "constructor(type, eventInitDict)"
  ],
  "RTCDataChannelEventInit": [
    "channel"
  ],
  "RTCDataChannelInit": [
    "id",
    "maxPacketLifeTime",
    "maxRetransmits",
    "negotiated",
    "ordered",
    "priority",
    "protocol"
  ],
  "RTCDataChannelState": [
    "closed",
    "closing",
    "connecting",
    "open"
  ],
  "RTCDataChannelStats": [
    "bytesReceived",
    "bytesSent",
    "dataChannelIdentifier",
    "label",
    "messagesReceived",
    "messagesSent",
    "protocol",
    "state"
  ],
  "RTCDegradationPreference": [
    "RTCDegradationPreference",
    "balanced",
    "maintain-framerate",
    "maintain-resolution"
  ],
  "RTCDtlsFingerprint": [
    "algorithm",
    "value"
  ],
  "RTCDtlsTransport": [
    "error",
    "getRemoteCertificates()",
    "iceTransport",
    "onerror",
    "onstatechange",
    "state",
    "statechange"
  ],
  "RTCDtlsTransportState": [
    "closed",
    "connected",
    "connecting",
    "failed",
    "new"
  ],
  "RTCEncodedAudioFrame": [
    "data",
    "getMetadata()",
    "timestamp"
  ],
  "RTCEncodedAudioFrameMetadata": [
    "contributingSources",
    "synchronizationSource"
  ],
  "RTCEncodedVideoFrame": [
    "data",
    "getMetadata()",
    "timestamp",
    "type"
  ],
  "RTCEncodedVideoFrameMetadata": [
    "contributingSources",
    "dependencies",
    "frameId",
    "height",
    "spatialIndex",
    "synchronizationSource",
    "temporalIndex",
    "width"
  ],
  "RTCEncodedVideoFrameType": [
    "\"delta\"",
    "\"empty\"",
    "\"key\""
  ],
  "RTCError": [
    "constructor()",
    "constructor(init)",
    "constructor(init, message)",
    "errorDetail",
    "receivedAlert",
    "sctpCauseCode",
    "sdpLineNumber",
    "sentAlert"
  ],
  "RTCErrorDetailType": [
    "data-channel-failure",
    "dtls-failure",
    "fingerprint-failure",
    "hardware-encoder-error",
    "hardware-encoder-not-available",
    "sctp-failure",
    "sdp-syntax-error"
  ],
  "RTCErrorEvent": [
    "constructor()",
    "constructor(type, eventInitDict)",
    "error"
  ],
  "RTCErrorEventInit": [
    "error"
  ],
  "RTCErrorInit": [
    "errorDetail",
    "receivedAlert",
    "sctpCauseCode",
    "sdpLineNumber",
    "sentAlert"
  ],
  "RTCIceCandidate": [
    "address",
    "candidate",
    "component",
    "constructor()",
    "constructor(candidateInitDict)",
    "foundation",
    "port",
    "priority",
    "protocol",
    "relatedAddress",
    "relatedPort",
    "sdpMLineIndex",
    "sdpMid",
    "tcpType",
    "toJSON()",
    "type",
    "usernameFragment"
  ],
  "RTCIceCandidateInit": [
    "candidate",
    "sdpMLineIndex",
    "sdpMid",
    "usernameFragment"
  ],
  "RTCIceCandidatePair": [
    "local",
    "remote"
  ],
  "RTCIceCandidatePairStats": [
    "availableIncomingBitrate",
    "availableOutgoingBitrate",
    "bytesDiscardedOnSend",
    "bytesReceived",
    "bytesSent",
    "circuitBreakerTriggerCount",
    "consentExpiredTimestamp",
    "consentRequestBytesSent",
    "consentRequestsSent",
    "currentRoundTripTime",
    "currentRtt",
    "firstRequestTimestamp",
    "lastPacketReceivedTimestamp",
    "lastPacketSentTimestamp",
    "lastRequestTimestamp",
    "lastResponseTimestamp",
    "localCandidateId",
    "nominated",
    "packetsDiscardedOnSend",
    "packetsReceived",
    "packetsSent",
    "priority",
    "remoteCandidateId",
    "requestBytesSent",
    "requestsReceived",
    "requestsSent",
    "responseBytesSent",
    "responsesReceived",
    "responsesSent",
    "retransmissionsReceived",
    "retransmissionsSent",
    "state",
    "totalRoundTripTime",
    "totalRtt",
    "transportId"
  ],
  "RTCIceCandidateStats": [
    "address",
    "candidateType",
    "deleted",
    "isRemote",
    "port",
    "priority",
    "protocol",
    "relayProtocol",
    "transportId",
    "url"
  ],
  "RTCIceCandidateType": [
    "host",
    "prflx",
    "relay",
    "srflx"
  ],
  "RTCIceComponent": [
    "rtcp",
    "rtp"
  ],
  "RTCIceConnectionState": [
    "checking",
    "closed",
    "completed",
    "connected",
    "disconnected",
    "failed",
    "new"
  ],
  "RTCIceCredentialType": [
    "password"
  ],
  "RTCIceGatherOptions": [
    "gatherPolicy",
    "iceServers"
  ],
  "RTCIceGathererState": [
    "complete",
    "gathering",
    "new"
  ],
  "RTCIceGatheringState": [
    "complete",
    "gathering",
    "new"
  ],
  "RTCIceParameters": [
    "iceLite",
    "password",
    "usernameFragment"
  ],
  "RTCIceProtocol": [
    "tcp",
    "udp"
  ],
  "RTCIceRole": [
    "controlled",
    "controlling",
    "unknown"
  ],
  "RTCIceServer": [
    "credential",
    "credentialType",
    "urls",
    "username"
  ],
  "RTCIceServerStats": [
    "port",
    "relayProtocol",
    "totalRequestsSent",
    "totalResponsesReceived",
    "totalRoundTripTime",
    "url"
  ],
  "RTCIceTcpCandidateType": [
    "active",
    "passive",
    "so"
  ],
  "RTCIceTransport": [
    "addRemoteCandidate()",
    "addRemoteCandidate(remoteCandidate)",
    "component",
    "constructor()",
    "gather()",
    "gather(options)",
    "gatheringState",
    "gatheringstatechange",
    "getLocalCandidates()",
    "getLocalParameters()",
    "getRemoteCandidates()",
    "getRemoteParameters()",
    "getSelectedCandidatePair()",
    "onerror",
    "ongatheringstatechange",
    "onicecandidate",
    "onselectedcandidatepairchange",
    "onstatechange",
    "role",
    "selectedcandidatepairchange",
    "start()",
    "start(remoteParameters)",
    "start(remoteParameters, role)",
    "state",
    "statechange",
    "stop()"
  ],
  "RTCIceTransportPolicy": [
    "all",
    "relay"
  ],
  "RTCIceTransportState": [
    "checking",
    "closed",
    "completed",
    "connected",
    "disconnected",
    "failed",
    "new"
  ],
  "RTCInboundRtpStreamStats": [
    "audioLevel",
    "averageRtcpInterval",
    "bytesReceived",
    "concealedSamples",
    "concealmentEvents",
    "decoderImplementation",
    "estimatedPlayoutTimestamp",
    "fecPacketsDiscarded",
    "fecPacketsReceived",
    "firCount",
    "fractionLost",
    "frameBitDepth",
    "frameHeight",
    "frameWidth",
    "framesDecoded",
    "framesPerSecond",
    "framesReceived",
    "headerBytesReceived",
    "insertedSamplesForDeceleration",
    "jitterBufferDelay",
    "jitterBufferEmittedCount",
    "keyFramesDecoded",
    "lastPacketReceivedTimestamp",
    "nackCount",
    "packetsDuplicated",
    "packetsFailedDecryption",
    "perDscpPacketsReceived",
    "pliCount",
    "qpSum",
    "receiverId",
    "remoteId",
    "removedSamplesForAcceleration",
    "samplesDecodedWithCelt",
    "samplesDecodedWithSilk",
    "silentConcealedSamples",
    "sliCount",
    "totalAudioEnergy",
    "totalDecodeTime",
    "totalInterFrameDelay",
    "totalProcessingDelay",
    "totalSamplesDecoded",
    "totalSamplesDuration",
    "totalSamplesReceived",
    "totalSquaredInterFrameDelay",
    "trackId",
    "voiceActivityFlag"
  ],
  "RTCInsertableStreams": [
    "readable",
    "writable"
  ],
  "RTCLocalSessionDescriptionInit": [
    "sdp",
    "type"
  ],
  "RTCMediaHandlerStats": [
    "ended",
    "kind",
    "priority",
    "remoteSource",
    "trackIdentifier"
  ],
  "RTCMediaSourceStats": [
    "kind",
    "relayedSource",
    "trackIdentifier"
  ],
  "RTCMediaStreamStats": [
    "streamIdentifier",
    "trackIds"
  ],
  "RTCOfferOptions": [
    "iceRestart",
    "offerToReceiveAudio",
    "offerToReceiveVideo"
  ],
  "RTCOutboundRtpStreamStats": [
    "averageRtcpInterval",
    "bytesDiscardedOnSend",
    "encoderImplementation",
    "fecPacketsSent",
    "firCount",
    "frameBitDepth",
    "frameHeight",
    "frameWidth",
    "framesDiscardedOnSend",
    "framesEncoded",
    "framesPerSecond",
    "framesSent",
    "headerBytesSent",
    "hugeFramesSent",
    "keyFramesEncoded",
    "lastPacketSentTimestamp",
    "mediaSourceId",
    "nackCount",
    "packetsDiscardedOnSend",
    "perDscpPacketsSent",
    "pliCount",
    "qpSum",
    "qualityLimitationDurations",
    "qualityLimitationReason",
    "qualityLimitationResolutionChanges",
    "remoteId",
    "retransmittedBytesSent",
    "retransmittedPacketsSent",
    "rid",
    "rtxSsrc",
    "samplesEncodedWithCelt",
    "samplesEncodedWithSilk",
    "senderId",
    "sliCount",
    "targetBitrate",
    "totalEncodeTime",
    "totalEncodedBytesTarget",
    "totalPacketSendDelay",
    "totalSamplesSent",
    "trackId",
    "voiceActivityFlag"
  ],
  "RTCPeerConnection": [
    "addIceCandidate!overload-1()",
    "addIceCandidate!overload-1(candidate, successCallback, failureCallback)",
    "addIceCandidate()",
    "addIceCandidate(candidate)",
    "addTrack()",
    "addTrack(track)",
    "addTrack(track, streams)",
    "addTransceiver()",
    "addTransceiver(trackOrKind)",
    "addTransceiver(trackOrKind, init)",
    "canTrickleIceCandidates",
    "close()",
    "connectionState",
    "connectionstatechange",
    "constructor()",
    "constructor(configuration)",
    "createAnswer!overload-1()",
    "createAnswer!overload-1(successCallback, failureCallback)",
    "createAnswer()",
    "createAnswer(options)",
    "createDataChannel()",
    "createDataChannel(label)",
    "createDataChannel(label, dataChannelDict)",
    "createOffer!overload-1()",
    "createOffer!overload-1(successCallback, failureCallback)",
    "createOffer!overload-1(successCallback, failureCallback, options)",
    "createOffer()",
    "createOffer(options)",
    "currentLocalDescription",
    "currentRemoteDescription",
    "datachannel",
    "generateCertificate()",
    "generateCertificate(keygenAlgorithm)",
    "getConfiguration()",
    "getReceivers()",
    "getSenders()",
    "getStats()",
    "getStats(selector)",
    "getTransceivers()",
    "iceConnectionState",
    "iceGatheringState",
    "icecandidate",
    "icecandidateerror",
    "iceconnectionstatechange",
    "icegatheringstatechange",
    "localDescription",
    "negotiationneeded",
    "onconnectionstatechange",
    "ondatachannel",
    "onicecandidate",
    "onicecandidateerror",
    "oniceconnectionstatechange",
    "onicegatheringstatechange",
    "onnegotiationneeded",
    "onsignalingstatechange",
    "ontrack",
    "pendingLocalDescription",
    "pendingRemoteDescription",
    "remoteDescription",
    "removeTrack()",
    "removeTrack(sender)",
    "restartIce()",
    "sctp",
    "setConfiguration()",
    "setConfiguration(configuration)",
    "setLocalDescription!overload-1()",
    "setLocalDescription!overload-1(description, successCallback, failureCallback)",
    "setLocalDescription()",
    "setLocalDescription(description)",
    "setRemoteDescription!overload-1()",
    "setRemoteDescription!overload-1(description, successCallback, failureCallback)",
    "setRemoteDescription()",
    "setRemoteDescription(description)",
    "signalingState",
    "signalingstatechange",
    "track"
  ],
  "RTCPeerConnectionIceErrorEvent": [
    "address",
    "constructor()",
    "constructor(type, eventInitDict)",
    "errorCode",
    "errorText",
    "port",
    "url"
  ],
  "RTCPeerConnectionIceErrorEventInit": [
    "address",
    "errorCode",
    "errorText",
    "port",
    "url"
  ],
  "RTCPeerConnectionIceEvent": [
    "candidate",
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "url"
  ],
  "RTCPeerConnectionIceEventInit": [
    "candidate",
    "url"
  ],
  "RTCPeerConnectionState": [
    "closed",
    "connected",
    "connecting",
    "disconnected",
    "failed",
    "new"
  ],
  "RTCPeerConnectionStats": [
    "dataChannelsAccepted",
    "dataChannelsClosed",
    "dataChannelsOpened",
    "dataChannelsRequested"
  ],
  "RTCPriorityType": [
    "\"high\"",
    "\"low\"",
    "\"medium\"",
    "\"very-low\"",
    "high",
    "low",
    "medium",
    "very-low"
  ],
  "RTCQualityLimitationReason": [
    "bandwidth",
    "cpu",
    "none",
    "other"
  ],
  "RTCReceivedRtpStreamStats": [
    "burstDiscardCount",
    "burstDiscardRate",
    "burstLossCount",
    "burstLossRate",
    "burstPacketsDiscarded",
    "burstPacketsLost",
    "framesDropped",
    "fullFramesLost",
    "gapDiscardRate",
    "gapLossRate",
    "jitter",
    "packetsDiscarded",
    "packetsLost",
    "packetsReceived",
    "packetsRepaired",
    "partialFramesLost"
  ],
  "RTCRemoteInboundRtpStreamStats": [
    "fractionLost",
    "localId",
    "reportsReceived",
    "roundTripTime",
    "roundTripTimeMeasurements",
    "totalRoundTripTime"
  ],
  "RTCRemoteOutboundRtpStreamStats": [
    "localId",
    "remoteTimestamp",
    "reportsSent",
    "roundTripTime",
    "roundTripTimeMeasurements",
    "totalRoundTripTime"
  ],
  "RTCRtcpMuxPolicy": [
    "require"
  ],
  "RTCRtcpParameters": [
    "cname",
    "reducedSize"
  ],
  "RTCRtpCapabilities": [
    "codecs",
    "headerExtensions"
  ],
  "RTCRtpCodecCapability": [
    "channels",
    "clockRate",
    "mimeType",
    "scalabilityModes",
    "sdpFmtpLine"
  ],
  "RTCRtpCodecParameters": [
    "channels",
    "clockRate",
    "mimeType",
    "payloadType",
    "sdpFmtpLine"
  ],
  "RTCRtpCodingParameters": [
    "rid"
  ],
  "RTCRtpContributingSource": [
    "audioLevel",
    "rtpTimestamp",
    "source",
    "timestamp"
  ],
  "RTCRtpContributingSourceStats": [
    "audioLevel",
    "contributorSsrc",
    "inboundRtpStreamId",
    "packetsContributedTo"
  ],
  "RTCRtpEncodingParameters": [
    "active",
    "maxBitrate",
    "networkPriority",
    "priority",
    "scalabilityMode",
    "scaleResolutionDownBy"
  ],
  "RTCRtpHeaderExtensionCapability": [
    "uri"
  ],
  "RTCRtpHeaderExtensionParameters": [
    "encrypted",
    "id",
    "uri"
  ],
  "RTCRtpParameters": [
    "codecs",
    "headerExtensions",
    "rtcp"
  ],
  "RTCRtpReceiver": [
    "getCapabilities()",
    "getCapabilities(kind)",
    "getContributingSources()",
    "getParameters()",
    "getStats()",
    "getSynchronizationSources()",
    "track",
    "transform",
    "transport"
  ],
  "RTCRtpScriptTransform": [
    "RTCRtpScriptTransform(worker)",
    "RTCRtpScriptTransform(worker, options)",
    "RTCRtpScriptTransform(worker, options, transfer)",
    "constructor(worker)",
    "constructor(worker, options)",
    "constructor(worker, options, transfer)"
  ],
  "RTCRtpScriptTransform/RTCRtpScriptTransform(worker)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransform/RTCRtpScriptTransform(worker, options)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransform/RTCRtpScriptTransform(worker, options, transfer)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransform/constructor(worker)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransform/constructor(worker, options)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransform/constructor(worker, options, transfer)": [
    "options",
    "transfer",
    "worker"
  ],
  "RTCRtpScriptTransformer": [
    "options",
    "readable",
    "writable"
  ],
  "RTCRtpSendParameters": [
    "degradationPreference",
    "encodings",
    "transactionId"
  ],
  "RTCRtpSender": [
    "dtmf",
    "getCapabilities()",
    "getCapabilities(kind)",
    "getParameters()",
    "getStats()",
    "replaceTrack()",
    "replaceTrack(withTrack)",
    "setParameters()",
    "setParameters(parameters)",
    "setStreams()",
    "setStreams(streams)",
    "track",
    "transform",
    "transport"
  ],
  "RTCRtpStreamStats": [
    "averageRTCPInterval",
    "codecId",
    "kind",
    "mediaType",
    "ssrc",
    "transportId"
  ],
  "RTCRtpTransceiver": [
    "currentDirection",
    "direction",
    "mid",
    "receiver",
    "sender",
    "setCodecPreferences()",
    "setCodecPreferences(codecs)",
    "stop()"
  ],
  "RTCRtpTransceiverDirection": [
    "inactive",
    "recvonly",
    "sendonly",
    "sendrecv",
    "stopped"
  ],
  "RTCRtpTransceiverInit": [
    "direction",
    "sendEncodings",
    "streams"
  ],
  "RTCRtpTransceiverStats": [
    "mid",
    "receiverId",
    "senderId"
  ],
  "RTCSctpTransport": [
    "maxChannels",
    "maxMessageSize",
    "onstatechange",
    "state",
    "statechange",
    "transport"
  ],
  "RTCSctpTransportState": [
    "closed",
    "connected",
    "connecting"
  ],
  "RTCSctpTransportStats": [
    "congestionWindow",
    "mtu",
    "receiverWindow",
    "smoothedRoundTripTime",
    "transportId",
    "unackData"
  ],
  "RTCSdpType": [
    "answer",
    "offer",
    "pranswer",
    "rollback"
  ],
  "RTCSentRtpStreamStats": [
    "bytesSent",
    "packetsSent"
  ],
  "RTCSessionDescription": [
    "constructor()",
    "constructor(descriptionInitDict)",
    "sdp",
    "toJSON()",
    "type"
  ],
  "RTCSessionDescriptionInit": [
    "sdp",
    "type"
  ],
  "RTCSignalingState": [
    "closed",
    "have-local-offer",
    "have-local-pranswer",
    "have-remote-offer",
    "have-remote-pranswer",
    "stable"
  ],
  "RTCStats": [
    "RTCStats",
    "id",
    "timestamp",
    "type"
  ],
  "RTCStatsIceCandidatePairState": [
    "failed",
    "frozen",
    "in-progress",
    "succeeded",
    "waiting"
  ],
  "RTCStatsType": [
    "candidate-pair",
    "certificate",
    "codec",
    "csrc",
    "data-channel",
    "ice-server",
    "inbound-rtp",
    "local-candidate",
    "media-source",
    "outbound-rtp",
    "peer-connection",
    "receiver",
    "remote-candidate",
    "remote-inbound-rtp",
    "remote-outbound-rtp",
    "sctp-transport",
    "sender",
    "stream",
    "track",
    "transceiver",
    "transport"
  ],
  "RTCTrackEvent": [
    "constructor()",
    "constructor(type, eventInitDict)",
    "receiver",
    "streams",
    "track",
    "transceiver"
  ],
  "RTCTrackEventInit": [
    "receiver",
    "streams",
    "track",
    "transceiver"
  ],
  "RTCTransformEvent": [
    "transformer"
  ],
  "RTCTransportStats": [
    "bytesReceived",
    "bytesSent",
    "dtlsCipher",
    "dtlsState",
    "iceLocalUsernameFragment",
    "iceRole",
    "iceState",
    "localCertificateId",
    "packetsReceived",
    "packetsSent",
    "remoteCertificateId",
    "rtcpTransportStatsId",
    "selectedCandidatePairChanges",
    "selectedCandidatePairId",
    "srtpCipher",
    "tlsGroup",
    "tlsVersion"
  ],
  "RTCVideoHandlerStats": [
    "frameHeight",
    "frameWidth",
    "framesPerSecond"
  ],
  "RTCVideoReceiverStats": [
    "estimatedPlayoutTimestamp",
    "framesDecoded",
    "framesDropped",
    "framesReceived",
    "fullFramesLost",
    "jitterBufferDelay",
    "jitterBufferEmittedCount",
    "keyFramesReceived",
    "partialFramesLost"
  ],
  "RTCVideoSenderStats": [
    "framesCaptured",
    "framesSent",
    "hugeFramesSent",
    "keyFramesSent",
    "mediaSourceId"
  ],
  "RTCVideoSourceStats": [
    "bitDepth",
    "frames",
    "framesPerSecond",
    "height",
    "width"
  ],
  "RadioNodeList": [
    "value"
  ],
  "Range": [
    "END_TO_END",
    "END_TO_START",
    "Range()",
    "START_TO_END",
    "START_TO_START",
    "cloneContents()",
    "cloneRange()",
    "collapse()",
    "collapse(toStart)",
    "commonAncestorContainer",
    "compareBoundaryPoints(how, sourceRange)",
    "comparePoint(node, offset)",
    "constructor()",
    "createContextualFragment()",
    "createContextualFragment(fragment)",
    "deleteContents()",
    "detach()",
    "extractContents()",
    "getBoundingClientRect()",
    "getClientRects()",
    "insertNode(node)",
    "intersectsNode(node)",
    "isPointInRange(node, offset)",
    "selectNode(node)",
    "selectNodeContents(node)",
    "set the end",
    "set the start",
    "setEnd(node, offset)",
    "setEndAfter(node)",
    "setEndBefore(node)",
    "setStart(node, offset)",
    "setStartAfter(node)",
    "setStartBefore(node)",
    "stringificationbehavior",
    "surroundContents(newParent)"
  ],
  "Range/collapse()": [
    "toStart"
  ],
  "Range/collapse(toStart)": [
    "toStart"
  ],
  "Range/compareBoundaryPoints(how, sourceRange)": [
    "how",
    "sourceRange"
  ],
  "Range/comparePoint(node, offset)": [
    "node",
    "offset"
  ],
  "Range/createContextualFragment(fragment)": [
    "fragment"
  ],
  "Range/insertNode(node)": [
    "node"
  ],
  "Range/intersectsNode(node)": [
    "node"
  ],
  "Range/isPointInRange(node, offset)": [
    "node",
    "offset"
  ],
  "Range/selectNode(node)": [
    "node"
  ],
  "Range/selectNodeContents(node)": [
    "node"
  ],
  "Range/setEnd(node, offset)": [
    "node",
    "offset"
  ],
  "Range/setEndAfter(node)": [
    "node"
  ],
  "Range/setEndBefore(node)": [
    "node"
  ],
  "Range/setStart(node, offset)": [
    "node",
    "offset"
  ],
  "Range/setStartAfter(node)": [
    "node"
  ],
  "Range/setStartBefore(node)": [
    "node"
  ],
  "Range/surroundContents(newParent)": [
    "newParent"
  ],
  "ReadOptions": [
    "signal"
  ],
  "ReadableByteStreamController": [
    "[[CancelSteps]]",
    "[[PullSteps]]",
    "[[autoallocatechunksize]]",
    "[[byobrequest]]",
    "[[cancelalgorithm]]",
    "[[closerequested]]",
    "[[pendingpullintos]]",
    "[[pullagain]]",
    "[[pullalgorithm]]",
    "[[pulling]]",
    "[[queue]]",
    "[[queuetotalsize]]",
    "[[started]]",
    "[[strategyhwm]]",
    "[[stream]]",
    "byobRequest",
    "close()",
    "desiredSize",
    "enqueue(chunk)",
    "error()",
    "error(e)"
  ],
  "ReadableByteStreamController/enqueue(chunk)": [
    "chunk"
  ],
  "ReadableByteStreamController/error()": [
    "e"
  ],
  "ReadableByteStreamController/error(e)": [
    "e"
  ],
  "ReadableStream": [
    "ReadableStream()",
    "ReadableStream(underlyingSource)",
    "ReadableStream(underlyingSource, strategy)",
    "[[controller]]",
    "[[detached]]",
    "[[disturbed]]",
    "[[reader]]",
    "[[state]]",
    "[[storederror]]",
    "cancel",
    "cancel()",
    "cancel(reason)",
    "close",
    "closed",
    "constructor()",
    "constructor(underlyingSource)",
    "constructor(underlyingSource, strategy)",
    "create a proxy",
    "creating a proxy",
    "disturbed",
    "enqueue",
    "error",
    "errored",
    "get a reader",
    "getReader()",
    "getReader(options)",
    "getting a reader",
    "locked",
    "need more data",
    "needs more data",
    "options",
    "pipe",
    "pipe through",
    "pipe to",
    "pipeThrough(transform)",
    "pipeThrough(transform, options)",
    "pipeTo(destination)",
    "pipeTo(destination, options)",
    "piped through",
    "piped to",
    "piping through",
    "piping to",
    "readable",
    "set up",
    "tee",
    "tee()",
    "teeing"
  ],
  "ReadableStream async iterator": [
    "prevent cancel",
    "reader"
  ],
  "ReadableStream/ReadableStream()": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/ReadableStream(underlyingSource)": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/ReadableStream(underlyingSource, strategy)": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/cancel()": [
    "reason"
  ],
  "ReadableStream/cancel(reason)": [
    "reason"
  ],
  "ReadableStream/constructor()": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/constructor(underlyingSource)": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/constructor(underlyingSource, strategy)": [
    "strategy",
    "underlyingSource"
  ],
  "ReadableStream/getReader()": [
    "options"
  ],
  "ReadableStream/getReader(options)": [
    "options"
  ],
  "ReadableStream/pipe through": [
    "preventabort",
    "preventcancel",
    "preventclose",
    "signal"
  ],
  "ReadableStream/pipe to": [
    "preventabort",
    "preventcancel",
    "preventclose",
    "signal"
  ],
  "ReadableStream/pipeThrough(transform)": [
    "options",
    "transform"
  ],
  "ReadableStream/pipeThrough(transform, options)": [
    "options",
    "transform"
  ],
  "ReadableStream/pipeTo(destination)": [
    "destination",
    "options"
  ],
  "ReadableStream/pipeTo(destination, options)": [
    "destination",
    "options"
  ],
  "ReadableStream/piped through": [
    "preventabort",
    "preventcancel",
    "preventclose",
    "signal"
  ],
  "ReadableStream/piped to": [
    "preventabort",
    "preventcancel",
    "preventclose",
    "signal"
  ],
  "ReadableStream/set up": [
    "cancelalgorithm",
    "highwatermark",
    "pullalgorithm",
    "sizealgorithm"
  ],
  "ReadableStreamBYOBReadResult": [
    "done",
    "value"
  ],
  "ReadableStreamBYOBReader": [
    "ReadableStreamBYOBReader(stream)",
    "[[readintorequests]]",
    "constructor(stream)",
    "read(view)",
    "releaseLock()"
  ],
  "ReadableStreamBYOBReader/ReadableStreamBYOBReader(stream)": [
    "stream"
  ],
  "ReadableStreamBYOBReader/constructor(stream)": [
    "stream"
  ],
  "ReadableStreamBYOBReader/read(view)": [
    "view"
  ],
  "ReadableStreamBYOBRequest": [
    "[[controller]]",
    "[[view]]",
    "respond(bytesWritten)",
    "respondWithNewView(view)",
    "view"
  ],
  "ReadableStreamBYOBRequest/respond(bytesWritten)": [
    "bytesWritten"
  ],
  "ReadableStreamBYOBRequest/respondWithNewView(view)": [
    "view"
  ],
  "ReadableStreamController": [
    "[[CancelSteps]]",
    "[[PullSteps]]"
  ],
  "ReadableStreamDefaultController": [
    "[[CancelSteps]]",
    "[[PullSteps]]",
    "[[cancelalgorithm]]",
    "[[closerequested]]",
    "[[pullagain]]",
    "[[pullalgorithm]]",
    "[[pulling]]",
    "[[queue]]",
    "[[queuetotalsize]]",
    "[[started]]",
    "[[strategyhwm]]",
    "[[strategysizealgorithm]]",
    "[[stream]]",
    "close()",
    "desiredSize",
    "enqueue()",
    "enqueue(chunk)",
    "error()",
    "error(e)"
  ],
  "ReadableStreamDefaultController/enqueue()": [
    "chunk"
  ],
  "ReadableStreamDefaultController/enqueue(chunk)": [
    "chunk"
  ],
  "ReadableStreamDefaultController/error()": [
    "e"
  ],
  "ReadableStreamDefaultController/error(e)": [
    "e"
  ],
  "ReadableStreamDefaultReadResult": [
    "done",
    "value"
  ],
  "ReadableStreamDefaultReader": [
    "ReadableStreamDefaultReader(stream)",
    "[[readrequests]]",
    "cancel",
    "constructor(stream)",
    "read a chunk",
    "read all bytes",
    "read()",
    "reading a chunk",
    "reading all bytes",
    "release",
    "releaseLock()"
  ],
  "ReadableStreamDefaultReader/ReadableStreamDefaultReader(stream)": [
    "stream"
  ],
  "ReadableStreamDefaultReader/constructor(stream)": [
    "stream"
  ],
  "ReadableStreamGenericReader": [
    "[[closedpromise]]",
    "[[stream]]",
    "cancel()",
    "cancel(reason)",
    "closed"
  ],
  "ReadableStreamGenericReader/cancel()": [
    "reason"
  ],
  "ReadableStreamGenericReader/cancel(reason)": [
    "reason"
  ],
  "ReadableStreamGetReaderOptions": [
    "mode"
  ],
  "ReadableStreamIteratorOptions": [
    "preventCancel"
  ],
  "ReadableStreamReaderMode": [
    "\"byob\""
  ],
  "ReadableStreamType": [
    "\"bytes\"",
    "bytes"
  ],
  "ReadableWritablePair": [
    "readable",
    "writable"
  ],
  "ReadyState": [
    "ReadyState",
    "closed",
    "ended",
    "open"
  ],
  "Realm": [
    "change",
    "global object",
    "settings object"
  ],
  "ReceiveStream": [
    "[[internalstream]]",
    "abortReading()",
    "abortReading(abortInfo)",
    "create",
    "creating",
    "readingAborted"
  ],
  "ReceiveStream/abortReading()": [
    "abortInfo"
  ],
  "ReceiveStream/abortReading(abortInfo)": [
    "abortInfo"
  ],
  "RecordingState": [
    "\"inactive\"",
    "\"paused\"",
    "\"recording\"",
    "inactive",
    "paused",
    "recording"
  ],
  "RedEyeReduction": [
    "\"always\"",
    "\"controllable\"",
    "\"never\"",
    "always",
    "controllable",
    "never"
  ],
  "ReferrerPolicy": [
    "",
    "\"\"",
    "\"no-referrer\"",
    "\"no-referrer-when-downgrade\"",
    "\"origin\"",
    "\"origin-when-cross-origin\"",
    "\"same-origin\"",
    "\"strict-origin\"",
    "\"strict-origin-when-cross-origin\"",
    "\"unsafe-url\"",
    "no-referrer",
    "no-referrer-when-downgrade",
    "origin",
    "origin-when-cross-origin",
    "same-origin",
    "strict-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ],
  "Region": [
    "getRegionFlowRanges()",
    "regionOverset"
  ],
  "RegistrationOptions": [
    "scope",
    "type",
    "updateViaCache"
  ],
  "RelatedApplication": [
    "id",
    "platform",
    "url",
    "version"
  ],
  "RelativeOrientationSensor": [
    "RelativeOrientationSensor()",
    "RelativeOrientationSensor(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)"
  ],
  "RelativeOrientationSensor/RelativeOrientationSensor()": [
    "sensorOptions"
  ],
  "RelativeOrientationSensor/RelativeOrientationSensor(sensorOptions)": [
    "sensorOptions"
  ],
  "RelativeOrientationSensor/constructor()": [
    "sensorOptions"
  ],
  "RelativeOrientationSensor/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "RemotePlayback": [
    "cancelWatchAvailability()",
    "cancelWatchAvailability(id)",
    "onconnect",
    "onconnecting",
    "ondisconnect",
    "prompt()",
    "state",
    "watchAvailability()",
    "watchAvailability(callback)"
  ],
  "RemotePlaybackState": [
    "connected",
    "connecting",
    "disconnected"
  ],
  "RenderPassDescriptor": [
    "renderextent"
  ],
  "RenderState": [
    "bindgroups",
    "indexbuffer",
    "vertexbuffers"
  ],
  "Report": [
    "body",
    "toJSON()",
    "type",
    "url"
  ],
  "ReportBody": [
    "toJSON()"
  ],
  "ReportTo": [
    "endpoints",
    "group",
    "include_subdomains",
    "max_age",
    "priority",
    "url",
    "weight"
  ],
  "ReportingObserver": [
    "ReportingObserver(callback)",
    "ReportingObserver(callback, options)",
    "callback",
    "constructor(callback)",
    "constructor(callback, options)",
    "disconnect()",
    "observe()",
    "options",
    "report queue",
    "takeRecords()"
  ],
  "ReportingObserver/ReportingObserver(callback)": [
    "callback",
    "options"
  ],
  "ReportingObserver/ReportingObserver(callback, options)": [
    "callback",
    "options"
  ],
  "ReportingObserver/constructor(callback)": [
    "callback",
    "options"
  ],
  "ReportingObserver/constructor(callback, options)": [
    "callback",
    "options"
  ],
  "ReportingObserverCallback": [
    "observer",
    "reports"
  ],
  "ReportingObserverOptions": [
    "buffered",
    "types"
  ],
  "Request": [
    "Request(input)",
    "Request(input, init)",
    "cache",
    "clone()",
    "constructor(input)",
    "constructor(input, init)",
    "create",
    "creating",
    "credentials",
    "destination",
    "headers",
    "integrity",
    "isHistoryNavigation",
    "isReloadNavigation",
    "keepalive",
    "method",
    "mode",
    "redirect",
    "referrer",
    "referrerPolicy",
    "request",
    "signal",
    "url"
  ],
  "Request/Request(input)": [
    "init",
    "input"
  ],
  "Request/Request(input, init)": [
    "init",
    "input"
  ],
  "Request/constructor(input)": [
    "init",
    "input"
  ],
  "Request/constructor(input, init)": [
    "init",
    "input"
  ],
  "RequestCache": [
    "\"default\"",
    "\"force-cache\"",
    "\"no-cache\"",
    "\"no-store\"",
    "\"only-if-cached\"",
    "\"reload\""
  ],
  "RequestCredentials": [
    "\"include\"",
    "\"omit\"",
    "\"same-origin\""
  ],
  "RequestDestination": [
    "\"\"",
    "\"audio\"",
    "\"audioworklet\"",
    "\"document\"",
    "\"embed\"",
    "\"font\"",
    "\"frame\"",
    "\"iframe\"",
    "\"image\"",
    "\"manifest\"",
    "\"object\"",
    "\"paintworklet\"",
    "\"report\"",
    "\"script\"",
    "\"sharedworker\"",
    "\"style\"",
    "\"track\"",
    "\"video\"",
    "\"worker\"",
    "\"xslt\""
  ],
  "RequestDeviceOptions": [
    "acceptAllDevices",
    "filters",
    "optionalManufacturerData",
    "optionalServices"
  ],
  "RequestInit": [
    "body",
    "cache",
    "credentials",
    "headers",
    "integrity",
    "keepalive",
    "method",
    "mode",
    "redirect",
    "referrer",
    "referrerPolicy",
    "signal",
    "window"
  ],
  "RequestMode": [
    "\"cors\"",
    "\"navigate\"",
    "\"no-cors\"",
    "\"same-origin\""
  ],
  "RequestRedirect": [
    "\"error\"",
    "\"follow\"",
    "\"manual\""
  ],
  "ResidentKeyRequirement": [
    "\"discouraged\"",
    "\"preferred\"",
    "\"required\"",
    "discouraged",
    "preferred",
    "required"
  ],
  "ResizeObservation": [
    "ResizeObservation(target)",
    "ResizeObservation(target, options)",
    "constructor(target)",
    "isActive()",
    "lastReportedSizes",
    "observedBox",
    "target"
  ],
  "ResizeObservation/ResizeObservation(target)": [
    "target"
  ],
  "ResizeObservation/constructor(target)": [
    "target"
  ],
  "ResizeObserver": [
    "ResizeObserver(callback)",
    "[[activeTargets]]",
    "[[callback]]",
    "[[observationTargets]]",
    "[[skippedTargets]]",
    "activeTargets",
    "callback",
    "constructor(callback)",
    "disconnect()",
    "observationTargets",
    "observe(target)",
    "observe(target, options)",
    "skippedTargets",
    "unobserve(target)"
  ],
  "ResizeObserver/ResizeObserver(callback)": [
    "callback"
  ],
  "ResizeObserver/constructor(callback)": [
    "callback"
  ],
  "ResizeObserver/observe(target)": [
    "options",
    "target"
  ],
  "ResizeObserver/observe(target, options)": [
    "options",
    "target"
  ],
  "ResizeObserver/unobserve(target)": [
    "target"
  ],
  "ResizeObserverBoxOptions": [
    "\"border-box\"",
    "\"content-box\"",
    "\"device-pixel-content-box\""
  ],
  "ResizeObserverCallback": [
    "entries",
    "observer"
  ],
  "ResizeObserverEntry": [
    "borderBoxSize",
    "contentBoxSize",
    "contentRect",
    "devicePixelContentBoxSize",
    "target"
  ],
  "ResizeObserverOptions": [
    "box"
  ],
  "ResizeObserverSize": [
    "blockSize",
    "inlineSize"
  ],
  "ResizeQuality": [
    "high",
    "low",
    "medium",
    "pixelated"
  ],
  "Response": [
    "Response()",
    "Response(body)",
    "Response(body, init)",
    "clone()",
    "constructor()",
    "constructor(body)",
    "constructor(body, init)",
    "create",
    "creating",
    "error()",
    "headers",
    "ok",
    "redirect(url)",
    "redirect(url, status)",
    "redirected",
    "response",
    "status",
    "statusText",
    "type",
    "url"
  ],
  "Response/Response()": [
    "body",
    "init"
  ],
  "Response/Response(body)": [
    "body",
    "init"
  ],
  "Response/Response(body, init)": [
    "body",
    "init"
  ],
  "Response/constructor()": [
    "body",
    "init"
  ],
  "Response/constructor(body)": [
    "body",
    "init"
  ],
  "Response/constructor(body, init)": [
    "body",
    "init"
  ],
  "Response/redirect(url)": [
    "status",
    "url"
  ],
  "Response/redirect(url, status)": [
    "status",
    "url"
  ],
  "ResponseInit": [
    "headers",
    "status",
    "statusText"
  ],
  "ResponseType": [
    "\"basic\"",
    "\"cors\"",
    "\"default\"",
    "\"error\"",
    "\"opaque\"",
    "\"opaqueredirect\""
  ],
  "RsaHashedImportParams": [
    "hash"
  ],
  "RsaHashedKeyAlgorithm": [
    "hash"
  ],
  "RsaHashedKeyGenParams": [
    "hash"
  ],
  "RsaKeyAlgorithm": [
    "modulusLength",
    "publicExponent"
  ],
  "RsaKeyGenParams": [
    "modulusLength",
    "publicExponent"
  ],
  "RsaOaepParams": [
    "label"
  ],
  "RsaOtherPrimesInfo": [
    "d",
    "r",
    "t"
  ],
  "RsaPssParams": [
    "saltLength"
  ],
  "SFrameTransform": [
    "SFrameTransform()",
    "SFrameTransform(options)",
    "constructor()",
    "constructor(options)",
    "onerror",
    "setEncryptionKey(key)",
    "setEncryptionKey(key, keyID)"
  ],
  "SFrameTransform/SFrameTransform()": [
    "options"
  ],
  "SFrameTransform/SFrameTransform(options)": [
    "options"
  ],
  "SFrameTransform/constructor()": [
    "options"
  ],
  "SFrameTransform/constructor(options)": [
    "options"
  ],
  "SFrameTransform/setEncryptionKey(key)": [
    "key",
    "keyID"
  ],
  "SFrameTransform/setEncryptionKey(key, keyID)": [
    "key",
    "keyID"
  ],
  "SFrameTransformErrorEvent": [
    "SFrameTransformErrorEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "frame",
    "keyID",
    "type"
  ],
  "SFrameTransformErrorEvent/SFrameTransformErrorEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SFrameTransformErrorEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SFrameTransformErrorEventInit": [
    "frame",
    "keyID",
    "type"
  ],
  "SFrameTransformErrorEventType": [
    "\"authentication\"",
    "\"keyID\"",
    "\"syntax\""
  ],
  "SFrameTransformOptions": [
    "role"
  ],
  "SFrameTransformRole": [
    "\"decrypt\"",
    "\"encrypt\""
  ],
  "SVGAElement": [
    "download",
    "hreflang",
    "ping",
    "referrerPolicy",
    "rel",
    "relList",
    "target",
    "text",
    "type"
  ],
  "SVGAngle": [
    "SVG_ANGLETYPE_DEG",
    "SVG_ANGLETYPE_GRAD",
    "SVG_ANGLETYPE_RAD",
    "SVG_ANGLETYPE_UNKNOWN",
    "SVG_ANGLETYPE_UNSPECIFIED",
    "convertToSpecifiedUnits",
    "newValueSpecifiedUnits",
    "unitType",
    "value",
    "valueAsString",
    "valueInSpecifiedUnits"
  ],
  "SVGAnimatedAngle": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedBoolean": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedEnumeration": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedInteger": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedLength": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedLengthList": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedNumber": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedNumberList": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedPoints": [
    "animatedPoints",
    "points"
  ],
  "SVGAnimatedPreserveAspectRatio": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedRect": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedString": [
    "animVal",
    "baseVal"
  ],
  "SVGAnimatedTransformList": [
    "animVal",
    "baseVal"
  ],
  "SVGCircleElement": [
    "cx",
    "cy",
    "r"
  ],
  "SVGClipPathElement": [
    "clipPathUnits",
    "transform"
  ],
  "SVGComponentTransferFunctionElement": [
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
    "amplitude",
    "exponent",
    "intercept",
    "offset",
    "slope",
    "tableValues",
    "type"
  ],
  "SVGElement": [
    "className",
    "ownerSVGElement",
    "viewportElement"
  ],
  "SVGElementInstance": [
    "correspondingElement",
    "correspondingUseElement"
  ],
  "SVGEllipseElement": [
    "cx",
    "cy",
    "rx",
    "ry"
  ],
  "SVGFEBlendElement": [
    "SVG_FEBLEND_MODE_COLOR",
    "SVG_FEBLEND_MODE_COLOR_BURN",
    "SVG_FEBLEND_MODE_COLOR_DODGE",
    "SVG_FEBLEND_MODE_DARKEN",
    "SVG_FEBLEND_MODE_DIFFERENCE",
    "SVG_FEBLEND_MODE_EXCLUSION",
    "SVG_FEBLEND_MODE_HARD_LIGHT",
    "SVG_FEBLEND_MODE_HUE",
    "SVG_FEBLEND_MODE_LIGHTEN",
    "SVG_FEBLEND_MODE_LUMINOSITY",
    "SVG_FEBLEND_MODE_MULTIPLY",
    "SVG_FEBLEND_MODE_NORMAL",
    "SVG_FEBLEND_MODE_OVERLAY",
    "SVG_FEBLEND_MODE_SATURATION",
    "SVG_FEBLEND_MODE_SCREEN",
    "SVG_FEBLEND_MODE_SOFT_LIGHT",
    "SVG_FEBLEND_MODE_UNKNOWN",
    "in1",
    "in2",
    "mode"
  ],
  "SVGFEColorMatrixElement": [
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE",
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
    "SVG_FECOLORMATRIX_TYPE_MATRIX",
    "SVG_FECOLORMATRIX_TYPE_SATURATE",
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN",
    "in1",
    "type",
    "values"
  ],
  "SVGFEComponentTransferElement": [
    "in1"
  ],
  "SVGFECompositeElement": [
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
    "SVG_FECOMPOSITE_OPERATOR_ATOP",
    "SVG_FECOMPOSITE_OPERATOR_IN",
    "SVG_FECOMPOSITE_OPERATOR_OUT",
    "SVG_FECOMPOSITE_OPERATOR_OVER",
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
    "SVG_FECOMPOSITE_OPERATOR_XOR",
    "in1",
    "in2",
    "k1",
    "k2",
    "k3",
    "k4",
    "operator"
  ],
  "SVGFEConvolveMatrixElement": [
    "SVG_EDGEMODE_DUPLICATE",
    "SVG_EDGEMODE_NONE",
    "SVG_EDGEMODE_UNKNOWN",
    "SVG_EDGEMODE_WRAP",
    "bias",
    "divisor",
    "edgeMode",
    "in1",
    "kernelMatrix",
    "kernelUnitLengthX",
    "kernelUnitLengthY",
    "orderX",
    "orderY",
    "preserveAlpha",
    "targetX",
    "targetY"
  ],
  "SVGFEDiffuseLightingElement": [
    "diffuseConstant",
    "in1",
    "kernelUnitLengthX",
    "kernelUnitLengthY",
    "surfaceScale"
  ],
  "SVGFEDisplacementMapElement": [
    "SVG_CHANNEL_A",
    "SVG_CHANNEL_B",
    "SVG_CHANNEL_G",
    "SVG_CHANNEL_R",
    "SVG_CHANNEL_UNKNOWN",
    "in1",
    "in2",
    "scale",
    "xChannelSelector",
    "yChannelSelector"
  ],
  "SVGFEDistantLightElement": [
    "azimuth",
    "elevation"
  ],
  "SVGFEDropShadowElement": [
    "dx",
    "dy",
    "in1",
    "setStdDeviation(stdDeviationX, stdDeviationY)",
    "stdDeviationX",
    "stdDeviationY"
  ],
  "SVGFEDropShadowElement/setStdDeviation(stdDeviationX, stdDeviationY)": [
    "stdDeviationX",
    "stdDeviationY"
  ],
  "SVGFEGaussianBlurElement": [
    "SVG_EDGEMODE_DUPLICATE",
    "SVG_EDGEMODE_NONE",
    "SVG_EDGEMODE_UNKNOWN",
    "SVG_EDGEMODE_WRAP",
    "edgeMode",
    "in1",
    "setStdDeviation(stdDeviationX, stdDeviationY)",
    "stdDeviationX",
    "stdDeviationY"
  ],
  "SVGFEGaussianBlurElement/setStdDeviation(stdDeviationX, stdDeviationY)": [
    "stdDeviationX",
    "stdDeviationY"
  ],
  "SVGFEImageElement": [
    "crossOrigin",
    "preserveAspectRatio"
  ],
  "SVGFEMergeNodeElement": [
    "in1"
  ],
  "SVGFEMorphologyElement": [
    "SVG_MORPHOLOGY_OPERATOR_DILATE",
    "SVG_MORPHOLOGY_OPERATOR_ERODE",
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
    "in1",
    "operator",
    "radiusX",
    "radiusY"
  ],
  "SVGFEOffsetElement": [
    "dx",
    "dy",
    "in1"
  ],
  "SVGFEPointLightElement": [
    "x",
    "y",
    "z"
  ],
  "SVGFESpecularLightingElement": [
    "in1",
    "kernelUnitLengthX",
    "kernelUnitLengthY",
    "specularConstant",
    "specularExponent",
    "surfaceScale"
  ],
  "SVGFESpotLightElement": [
    "limitingConeAngle",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "specularExponent",
    "x",
    "y",
    "z"
  ],
  "SVGFETileElement": [
    "in1"
  ],
  "SVGFETurbulenceElement": [
    "SVG_STITCHTYPE_NOSTITCH",
    "SVG_STITCHTYPE_STITCH",
    "SVG_STITCHTYPE_UNKNOWN",
    "SVG_TURBULENCE_TYPE_FRACTALNOISE",
    "SVG_TURBULENCE_TYPE_TURBULENCE",
    "SVG_TURBULENCE_TYPE_UNKNOWN",
    "baseFrequencyX",
    "baseFrequencyY",
    "numOctaves",
    "seed",
    "stitchTiles",
    "type"
  ],
  "SVGFilterElement": [
    "filterUnits",
    "height",
    "primitiveUnits",
    "width",
    "x",
    "y"
  ],
  "SVGFilterPrimitiveStandardAttributes": [
    "height",
    "result",
    "width",
    "x",
    "y"
  ],
  "SVGFitToViewBox": [
    "preserveAspectRatio",
    "viewBox"
  ],
  "SVGForeignObjectElement": [
    "height",
    "width",
    "x",
    "y"
  ],
  "SVGGeometryElement": [
    "getPointAtLength",
    "getTotalLength",
    "isPointInFill",
    "isPointInStroke",
    "pathLength"
  ],
  "SVGGradientElement": [
    "SVG_SPREADMETHOD_PAD",
    "SVG_SPREADMETHOD_REFLECT",
    "SVG_SPREADMETHOD_REPEAT",
    "SVG_SPREADMETHOD_UNKNOWN",
    "gradientTransform",
    "gradientUnits",
    "spreadMethod"
  ],
  "SVGGraphicsElement": [
    "getBBox",
    "getCTM",
    "getScreenCTM",
    "transform"
  ],
  "SVGImageElement": [
    "crossOrigin",
    "height",
    "preserveAspectRatio",
    "width",
    "x",
    "y"
  ],
  "SVGLength": [
    "SVG_LENGTHTYPE_CM",
    "SVG_LENGTHTYPE_EMS",
    "SVG_LENGTHTYPE_EXS",
    "SVG_LENGTHTYPE_IN",
    "SVG_LENGTHTYPE_MM",
    "SVG_LENGTHTYPE_NUMBER",
    "SVG_LENGTHTYPE_PC",
    "SVG_LENGTHTYPE_PERCENTAGE",
    "SVG_LENGTHTYPE_PT",
    "SVG_LENGTHTYPE_PX",
    "SVG_LENGTHTYPE_UNKNOWN",
    "convertToSpecifiedUnits",
    "newValueSpecifiedUnits",
    "unitType",
    "value",
    "valueAsString",
    "valueInSpecifiedUnits"
  ],
  "SVGLineElement": [
    "x1",
    "x2",
    "y1",
    "y2"
  ],
  "SVGLinearGradientElement": [
    "x1",
    "x2",
    "y1",
    "y2"
  ],
  "SVGMarkerElement": [
    "SVG_MARKERUNITS_STROKEWIDTH",
    "SVG_MARKERUNITS_UNKNOWN",
    "SVG_MARKERUNITS_USERSPACEONUSE",
    "SVG_MARKER_ORIENT_ANGLE",
    "SVG_MARKER_ORIENT_AUTO",
    "SVG_MARKER_ORIENT_UNKNOWN",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "orient",
    "orientAngle",
    "orientType",
    "refX",
    "refY",
    "setOrientToAngle",
    "setOrientToAuto"
  ],
  "SVGMaskElement": [
    "height",
    "maskContentUnits",
    "maskUnits",
    "width",
    "x",
    "y"
  ],
  "SVGNumber": [
    "value"
  ],
  "SVGPatternElement": [
    "height",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "width",
    "x",
    "y"
  ],
  "SVGPreserveAspectRatio": [
    "SVG_MEETORSLICE_MEET",
    "SVG_MEETORSLICE_SLICE",
    "SVG_MEETORSLICE_UNKNOWN",
    "SVG_PRESERVEASPECTRATIO_NONE",
    "SVG_PRESERVEASPECTRATIO_UNKNOWN",
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
    "SVG_PRESERVEASPECTRATIO_XMAXYMID",
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
    "SVG_PRESERVEASPECTRATIO_XMIDYMID",
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
    "SVG_PRESERVEASPECTRATIO_XMINYMAX",
    "SVG_PRESERVEASPECTRATIO_XMINYMID",
    "SVG_PRESERVEASPECTRATIO_XMINYMIN",
    "align",
    "meetOrSlice"
  ],
  "SVGRadialGradientElement": [
    "cx",
    "cy",
    "fr",
    "fx",
    "fy",
    "r"
  ],
  "SVGRectElement": [
    "height",
    "rx",
    "ry",
    "width",
    "x",
    "y"
  ],
  "SVGSVGElement": [
    "checkEnclosure",
    "checkIntersection",
    "createSVGAngle",
    "createSVGLength",
    "createSVGMatrix",
    "createSVGNumber",
    "createSVGPoint",
    "createSVGRect",
    "createSVGTransform",
    "createSVGTransformFromMatrix",
    "currentScale",
    "currentTranslate",
    "deselectAll",
    "forceRedraw",
    "getElementById",
    "getEnclosureList",
    "getIntersectionList",
    "height",
    "suspendRedraw",
    "unsuspendRedraw",
    "unsuspendRedrawAll",
    "width",
    "x",
    "y"
  ],
  "SVGScriptElement": [
    "crossOrigin",
    "type"
  ],
  "SVGStopElement": [
    "offset"
  ],
  "SVGStyleElement": [
    "media",
    "title",
    "type"
  ],
  "SVGTests": [
    "requiredExtensions",
    "systemLanguage"
  ],
  "SVGTextContentElement": [
    "LENGTHADJUST_SPACING",
    "LENGTHADJUST_SPACINGANDGLYPHS",
    "LENGTHADJUST_UNKNOWN",
    "getCharNumAtPosition",
    "getComputedTextLength",
    "getEndPositionOfChar",
    "getExtentOfChar",
    "getNumberOfChars",
    "getRotationOfChar",
    "getStartPositionOfChar",
    "getSubStringLength",
    "lengthAdjust",
    "selectSubString",
    "textLength"
  ],
  "SVGTextPathElement": [
    "TEXTPATH_METHODTYPE_ALIGN",
    "TEXTPATH_METHODTYPE_STRETCH",
    "TEXTPATH_METHODTYPE_UNKNOWN",
    "TEXTPATH_SPACINGTYPE_AUTO",
    "TEXTPATH_SPACINGTYPE_EXACT",
    "TEXTPATH_SPACINGTYPE_UNKNOWN",
    "method",
    "spacing",
    "startOffset"
  ],
  "SVGTextPositioningElement": [
    "dx",
    "dy",
    "rotate",
    "x",
    "y"
  ],
  "SVGTransform": [
    "SVG_TRANSFORM_MATRIX",
    "SVG_TRANSFORM_ROTATE",
    "SVG_TRANSFORM_SCALE",
    "SVG_TRANSFORM_SKEWX",
    "SVG_TRANSFORM_SKEWY",
    "SVG_TRANSFORM_TRANSLATE",
    "SVG_TRANSFORM_UNKNOWN",
    "angle",
    "matrix",
    "setMatrix",
    "setRotate",
    "setScale",
    "setSkewX",
    "setSkewY",
    "setTranslate",
    "type"
  ],
  "SVGTransformList": [
    "consolidate",
    "createSVGTransformFromMatrix"
  ],
  "SVGURIReference": [
    "href"
  ],
  "SVGUnitTypes": [
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
    "SVG_UNIT_TYPE_UNKNOWN",
    "SVG_UNIT_TYPE_USERSPACEONUSE"
  ],
  "SVGUseElement": [
    "animatedInstanceRoot",
    "height",
    "instanceRoot",
    "width",
    "x",
    "y"
  ],
  "SVGZoomAndPan": [
    "SVG_ZOOMANDPAN_DISABLE",
    "SVG_ZOOMANDPAN_MAGNIFY",
    "SVG_ZOOMANDPAN_UNKNOWN",
    "zoomAndPan"
  ],
  "Sanitizer": [
    "Sanitizer()",
    "Sanitizer(aConfig)",
    "config",
    "constructor()",
    "constructor(aConfig)",
    "defaultConfig",
    "sanitize(input)",
    "sanitizeToString(input)"
  ],
  "Sanitizer/Sanitizer()": [
    "aConfig"
  ],
  "Sanitizer/Sanitizer(aConfig)": [
    "aConfig"
  ],
  "Sanitizer/constructor()": [
    "aConfig"
  ],
  "Sanitizer/constructor(aConfig)": [
    "aConfig"
  ],
  "Sanitizer/sanitize(input)": [
    "input"
  ],
  "Sanitizer/sanitizeToString(input)": [
    "input"
  ],
  "SanitizerConfig": [
    "allowAttributes",
    "allowCustomElements",
    "allowElements",
    "blockElements",
    "dropAttributes",
    "dropElements"
  ],
  "SaveFilePickerOptions": [
    "suggestedName"
  ],
  "Scheduler": [
    "dynamic priority task queue map",
    "next enqueue order",
    "postTask(callback)",
    "postTask(callback, options)",
    "static priority task queue map"
  ],
  "Scheduler/postTask(callback)": [
    "callback",
    "options"
  ],
  "Scheduler/postTask(callback, options)": [
    "callback",
    "options"
  ],
  "SchedulerPostTaskOptions": [
    "delay",
    "priority",
    "signal"
  ],
  "Scheduling": [
    "isInputPending()",
    "isInputPending(isInputPendingOptions)"
  ],
  "Screen": [
    "availHeight",
    "availWidth",
    "colorDepth",
    "height",
    "orientation",
    "pixelDepth",
    "width"
  ],
  "ScreenIdleState": [
    "\"locked\"",
    "\"unlocked\""
  ],
  "ScreenOrientation": [
    "angle",
    "lock()",
    "lock(orientation)",
    "onchange",
    "type",
    "unlock()"
  ],
  "ScriptProcessorNode": [
    "bufferSize",
    "onaudioprocess"
  ],
  "ScrollBehavior": [
    "\"auto\"",
    "\"instant\"",
    "\"smooth\""
  ],
  "ScrollDirection": [
    "\"block\"",
    "\"horizontal\"",
    "\"inline\"",
    "\"vertical\""
  ],
  "ScrollIntoViewOptions": [
    "block",
    "inline"
  ],
  "ScrollLogicalPosition": [
    "\"center\"",
    "\"end\"",
    "\"nearest\"",
    "\"start\""
  ],
  "ScrollOptions": [
    "behavior"
  ],
  "ScrollRestoration": [
    "auto",
    "manual"
  ],
  "ScrollSetting": [
    "",
    "\"\"",
    "\"up\"",
    "up"
  ],
  "ScrollTimeline": [
    "ScrollTimeline()",
    "ScrollTimeline(options)",
    "constructor()",
    "constructor(options)",
    "orientation",
    "scrollOffsets",
    "source"
  ],
  "ScrollTimeline/ScrollTimeline()": [
    "options"
  ],
  "ScrollTimeline/ScrollTimeline(options)": [
    "options"
  ],
  "ScrollTimeline/constructor()": [
    "options"
  ],
  "ScrollTimeline/constructor(options)": [
    "options"
  ],
  "ScrollTimelineAutoKeyword": [
    "\"auto\""
  ],
  "ScrollTimelineOptions": [
    "orientation",
    "scrollOffsets",
    "source"
  ],
  "ScrollToOptions": [
    "left",
    "top"
  ],
  "SecurityPolicyViolationEvent": [
    "SecurityPolicyViolationEvent(type)",
    "SecurityPolicyViolationEvent(type, eventInitDict)",
    "blockedURI",
    "columnNumber",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "disposition",
    "documentURI",
    "effectiveDirective",
    "lineNumber",
    "originalPolicy",
    "referrer",
    "sample",
    "sourceFile",
    "statusCode",
    "violatedDirective"
  ],
  "SecurityPolicyViolationEvent/SecurityPolicyViolationEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "SecurityPolicyViolationEvent/SecurityPolicyViolationEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SecurityPolicyViolationEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "SecurityPolicyViolationEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SecurityPolicyViolationEventDisposition": [
    "\"enforce\"",
    "\"report\""
  ],
  "SecurityPolicyViolationEventInit": [
    "blockedURI",
    "columnNumber",
    "disposition",
    "documentURI",
    "effectiveDirective",
    "lineNumber",
    "originalPolicy",
    "referrer",
    "sample",
    "sourceFile",
    "statusCode",
    "violatedDirective"
  ],
  "Selection": [
    "Selection",
    "addRange()",
    "addRange(range)",
    "anchorNode",
    "anchorOffset",
    "collapse()",
    "collapse(node)",
    "collapse(node, offset)",
    "collapseToEnd()",
    "collapseToStart()",
    "containsNode()",
    "containsNode(node)",
    "containsNode(node, allowPartialContainment)",
    "deleteFromDocument()",
    "empty()",
    "extend()",
    "extend(node)",
    "extend(node, offset)",
    "focusNode",
    "focusOffset",
    "getRangeAt()",
    "getRangeAt(index)",
    "isCollapsed",
    "rangeCount",
    "removeAllRanges()",
    "removeRange()",
    "removeRange(range)",
    "selectAllChildren()",
    "selectAllChildren(node)",
    "setBaseAndExtent()",
    "setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)",
    "setPosition()",
    "setPosition(node)",
    "setPosition(node, offset)",
    "stringifier()",
    "type"
  ],
  "SelectionMode": [
    "end",
    "preserve",
    "select",
    "start"
  ],
  "SendStream": [
    "[[internalstream]]",
    "[[pendingoperation]]",
    "[[transport]]",
    "abort",
    "abortWriting()",
    "abortWriting(abortInfo)",
    "close",
    "create",
    "creating",
    "write",
    "writingAborted"
  ],
  "SendStream/abortWriting()": [
    "abortInfo"
  ],
  "SendStream/abortWriting(abortInfo)": [
    "abortInfo"
  ],
  "Sensor": [
    "[[frequency]]",
    "[[lastEventFiredAt]]",
    "[[pendingReadingNotification]]",
    "[[state]]",
    "activated",
    "hasReading",
    "onactivate",
    "onerror",
    "onreading",
    "start()",
    "stop()",
    "timestamp"
  ],
  "SensorErrorEvent": [
    "SensorErrorEvent(type, errorEventInitDict)",
    "constructor(type, errorEventInitDict)",
    "error"
  ],
  "SensorErrorEvent/SensorErrorEvent(type, errorEventInitDict)": [
    "errorEventInitDict",
    "type"
  ],
  "SensorErrorEvent/constructor(type, errorEventInitDict)": [
    "errorEventInitDict",
    "type"
  ],
  "SensorErrorEventInit": [
    "error"
  ],
  "SensorOptions": [
    "frequency"
  ],
  "SequenceEffect": [
    "SequenceEffect()",
    "SequenceEffect(children)",
    "SequenceEffect(children, timing)",
    "clone()",
    "constructor(children)",
    "constructor(children, timing)"
  ],
  "SequenceEffect/SequenceEffect(children)": [
    "children",
    "timing"
  ],
  "SequenceEffect/SequenceEffect(children, timing)": [
    "children",
    "timing"
  ],
  "SequenceEffect/constructor(children)": [
    "children",
    "timing"
  ],
  "SequenceEffect/constructor(children, timing)": [
    "children",
    "timing"
  ],
  "Serial": [
    "Serial",
    "getPorts()",
    "onconnect",
    "ondisconnect",
    "requestPort()",
    "requestPort(options)"
  ],
  "SerialInputSignals": [
    "clearToSend",
    "dataCarrierDetect",
    "dataSetReady",
    "ringIndicator"
  ],
  "SerialOptions": [
    "baudRate",
    "bufferSize",
    "dataBits",
    "flowControl",
    "parity",
    "stopBits"
  ],
  "SerialOutputSignals": [
    "break",
    "dataTerminalReady",
    "requestToSend"
  ],
  "SerialPort": [
    "close()",
    "getInfo()",
    "getSignals()",
    "onconnect",
    "ondisconnect",
    "open()",
    "open(options)",
    "readable",
    "setSignals()",
    "setSignals(signals)",
    "writable"
  ],
  "SerialPortFilter": [
    "usbProductId",
    "usbVendorId"
  ],
  "SerialPortInfo": [
    "usbProductId",
    "usbVendorId"
  ],
  "SerialPortRequestOptions": [
    "filters"
  ],
  "ServiceEventHandlers": [
    "onserviceadded",
    "onservicechanged",
    "onserviceremoved"
  ],
  "ServiceWorker": [
    "onstatechange",
    "postMessage(message)",
    "postMessage(message, options)",
    "postMessage(message, transfer)",
    "scriptURL",
    "state",
    "statechange"
  ],
  "ServiceWorker/postMessage(message)": [
    "message",
    "options",
    "transfer"
  ],
  "ServiceWorker/postMessage(message, options)": [
    "message",
    "options"
  ],
  "ServiceWorker/postMessage(message, transfer)": [
    "message",
    "transfer"
  ],
  "ServiceWorkerClient": [
    "lifecycleState"
  ],
  "ServiceWorkerContainer": [
    "client message queue",
    "controller",
    "controllerchange",
    "getRegistration()",
    "getRegistration(clientURL)",
    "getRegistrations()",
    "message",
    "messageerror",
    "oncontrollerchange",
    "onmessage",
    "onmessageerror",
    "ready",
    "ready promise",
    "register(scriptURL)",
    "register(scriptURL, options)",
    "service worker client",
    "startMessages()"
  ],
  "ServiceWorkerContainer/getRegistration()": [
    "clientURL"
  ],
  "ServiceWorkerContainer/getRegistration(clientURL)": [
    "clientURL"
  ],
  "ServiceWorkerContainer/register(scriptURL)": [
    "options",
    "scriptURL"
  ],
  "ServiceWorkerContainer/register(scriptURL, options)": [
    "options",
    "scriptURL"
  ],
  "ServiceWorkerGlobalScope": [
    "activate",
    "associated cookiestore",
    "backgroundfetchabort",
    "backgroundfetchclick",
    "backgroundfetchfail",
    "backgroundfetchsuccess",
    "clients",
    "contentdelete",
    "cookieStore",
    "fetch",
    "force bypass cache for import scripts flag",
    "importScripts(urls)",
    "install",
    "message",
    "messageerror",
    "onactivate",
    "onbackgroundfetchabort",
    "onbackgroundfetchclick",
    "onbackgroundfetchfail",
    "onbackgroundfetchsuccess",
    "oncanmakepayment",
    "oncontentdelete",
    "oncookiechange",
    "onfetch",
    "oninstall",
    "onmessage",
    "onmessageerror",
    "onnotificationclick",
    "onnotificationclose",
    "onpaymentrequest",
    "onperiodicsync",
    "onpush",
    "onpushsubscriptionchange",
    "onsync",
    "registration",
    "service worker",
    "serviceWorker",
    "skipWaiting()"
  ],
  "ServiceWorkerRegistration": [
    "active",
    "background fetch manager",
    "backgroundFetch",
    "content index",
    "cookies",
    "getNotifications()",
    "getNotifications(filter)",
    "index",
    "installing",
    "navigationPreload",
    "onupdatefound",
    "paymentManager",
    "periodic sync manager",
    "periodicSync",
    "pushManager",
    "scope",
    "service worker registration",
    "showNotification(title)",
    "showNotification(title, options)",
    "sync",
    "unregister()",
    "update()",
    "updateViaCache",
    "updatefound",
    "waiting"
  ],
  "ServiceWorkerRegistration/getNotifications()": [
    "filter"
  ],
  "ServiceWorkerRegistration/getNotifications(filter)": [
    "filter"
  ],
  "ServiceWorkerRegistration/showNotification(title)": [
    "options",
    "title"
  ],
  "ServiceWorkerRegistration/showNotification(title, options)": [
    "options",
    "title"
  ],
  "ServiceWorkerState": [
    "\"activated\"",
    "\"activating\"",
    "\"installed\"",
    "\"installing\"",
    "\"parsed\"",
    "\"redundant\""
  ],
  "ServiceWorkerUpdateViaCache": [
    "\"all\"",
    "\"imports\"",
    "\"none\""
  ],
  "SessionManager async iterator": [
    "current state"
  ],
  "ShadowAnimation": [
    "sourceAnimation"
  ],
  "ShadowRoot": [
    "available to element internals",
    "delegates focus",
    "delegatesFocus",
    "host",
    "mode",
    "onslotchange",
    "slot assignment",
    "slotAssignment"
  ],
  "ShadowRootInit": [
    "delegatesFocus",
    "mode",
    "slotAssignment"
  ],
  "ShadowRootMode": [
    "\"closed\"",
    "\"open\""
  ],
  "ShareData": [
    "files",
    "text",
    "title",
    "url"
  ],
  "ShareTarget": [
    "action",
    "enctype",
    "method",
    "params"
  ],
  "ShareTargetParams": [
    "text",
    "title",
    "url"
  ],
  "SharedWorker": [
    "SharedWorker(scriptURL)",
    "SharedWorker(scriptURL, options)",
    "constructor(scriptURL)",
    "constructor(scriptURL, options)",
    "error",
    "port"
  ],
  "SharedWorker/SharedWorker(scriptURL)": [
    "options",
    "scriptURL"
  ],
  "SharedWorker/SharedWorker(scriptURL, options)": [
    "options",
    "scriptURL"
  ],
  "SharedWorker/constructor(scriptURL)": [
    "options",
    "scriptURL"
  ],
  "SharedWorker/constructor(scriptURL, options)": [
    "options",
    "scriptURL"
  ],
  "SharedWorkerGlobalScope": [
    "close()",
    "connect",
    "constructor origin",
    "constructor url",
    "credentials",
    "name",
    "onconnect"
  ],
  "SlotAssignmentMode": [
    "\"manual\"",
    "\"named\""
  ],
  "Slottable": [
    "assignedSlot"
  ],
  "SourceBuffer": [
    "abort()",
    "appendBuffer()",
    "appendBuffer(data)",
    "appendWindowEnd",
    "appendWindowStart",
    "audioTracks",
    "buffered",
    "changeType()",
    "changeType(type)",
    "mode",
    "onabort",
    "onerror",
    "onupdate",
    "onupdateend",
    "onupdatestart",
    "remove()",
    "remove(start, end)",
    "textTracks",
    "timestampOffset",
    "updating",
    "videoTracks"
  ],
  "SourceBufferList": [
    "getter()",
    "getter(index)",
    "length",
    "onaddsourcebuffer",
    "onremovesourcebuffer"
  ],
  "SpatialNavigationDirection": [
    "\"down\"",
    "\"left\"",
    "\"right\"",
    "\"up\""
  ],
  "SpatialNavigationSearchOptions": [
    "candidates",
    "container"
  ],
  "SpeechGrammar": [
    "src",
    "weight"
  ],
  "SpeechGrammarList": [
    "SpeechGrammarList()",
    "addFromString(string)",
    "addFromString(string, weight)",
    "addFromURI(src)",
    "addFromURI(src, weight)",
    "constructor()",
    "item(index)",
    "length"
  ],
  "SpeechGrammarList/addFromString(string)": [
    "string",
    "weight"
  ],
  "SpeechGrammarList/addFromString(string, weight)": [
    "string",
    "weight"
  ],
  "SpeechGrammarList/addFromURI(src)": [
    "src",
    "weight"
  ],
  "SpeechGrammarList/addFromURI(src, weight)": [
    "src",
    "weight"
  ],
  "SpeechGrammarList/item(index)": [
    "index"
  ],
  "SpeechRecognition": [
    "SpeechRecognition()",
    "abort()",
    "audioend",
    "audiostart",
    "constructor()",
    "continuous",
    "end",
    "error",
    "grammars",
    "interimResults",
    "lang",
    "maxAlternatives",
    "nomatch",
    "onaudioend",
    "onaudiostart",
    "onend",
    "onerror",
    "onnomatch",
    "onresult",
    "onsoundend",
    "onsoundstart",
    "onspeechend",
    "onspeechstart",
    "onstart",
    "result",
    "soundend",
    "soundstart",
    "speechend",
    "speechstart",
    "start",
    "start()",
    "stop()"
  ],
  "SpeechRecognitionAlternative": [
    "confidence",
    "transcript"
  ],
  "SpeechRecognitionErrorCode": [
    "\"aborted\"",
    "\"audio-capture\"",
    "\"bad-grammar\"",
    "\"language-not-supported\"",
    "\"network\"",
    "\"no-speech\"",
    "\"not-allowed\"",
    "\"service-not-allowed\""
  ],
  "SpeechRecognitionErrorEvent": [
    "SpeechRecognitionErrorEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "error",
    "message"
  ],
  "SpeechRecognitionErrorEvent/SpeechRecognitionErrorEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechRecognitionErrorEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechRecognitionErrorEventInit": [
    "error",
    "message"
  ],
  "SpeechRecognitionEvent": [
    "SpeechRecognitionEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "resultIndex",
    "results"
  ],
  "SpeechRecognitionEvent/SpeechRecognitionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechRecognitionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechRecognitionEventInit": [
    "resultIndex",
    "results"
  ],
  "SpeechRecognitionResult": [
    "isFinal",
    "item(index)",
    "length"
  ],
  "SpeechRecognitionResult/item(index)": [
    "index"
  ],
  "SpeechRecognitionResultList": [
    "item(index)",
    "length"
  ],
  "SpeechRecognitionResultList/item(index)": [
    "index"
  ],
  "SpeechSynthesis": [
    "cancel()",
    "getVoices()",
    "onvoiceschanged",
    "pause()",
    "paused",
    "pending",
    "resume()",
    "speak(utterance)",
    "speaking",
    "voiceschanged"
  ],
  "SpeechSynthesis/speak(utterance)": [
    "utterance"
  ],
  "SpeechSynthesisErrorCode": [
    "\"audio-busy\"",
    "\"audio-hardware\"",
    "\"canceled\"",
    "\"interrupted\"",
    "\"invalid-argument\"",
    "\"language-unavailable\"",
    "\"network\"",
    "\"not-allowed\"",
    "\"synthesis-failed\"",
    "\"synthesis-unavailable\"",
    "\"text-too-long\"",
    "\"voice-unavailable\""
  ],
  "SpeechSynthesisErrorEvent": [
    "SpeechSynthesisErrorEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "error"
  ],
  "SpeechSynthesisErrorEvent/SpeechSynthesisErrorEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechSynthesisErrorEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechSynthesisErrorEventInit": [
    "error"
  ],
  "SpeechSynthesisEvent": [
    "SpeechSynthesisEvent(type, eventInitDict)",
    "charIndex",
    "charLength",
    "constructor(type, eventInitDict)",
    "elapsedTime",
    "name",
    "utterance"
  ],
  "SpeechSynthesisEvent/SpeechSynthesisEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechSynthesisEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "SpeechSynthesisEventInit": [
    "charIndex",
    "charLength",
    "elapsedTime",
    "name",
    "utterance"
  ],
  "SpeechSynthesisUtterance": [
    "SpeechSynthesisUtterance()",
    "SpeechSynthesisUtterance(text)",
    "boundary",
    "constructor()",
    "constructor(text)",
    "end",
    "error",
    "lang",
    "mark",
    "onboundary",
    "onend",
    "onerror",
    "onmark",
    "onpause",
    "onresume",
    "onstart",
    "pause",
    "pitch",
    "rate",
    "resume",
    "start",
    "text",
    "voice",
    "volume"
  ],
  "SpeechSynthesisUtterance/SpeechSynthesisUtterance()": [
    "text"
  ],
  "SpeechSynthesisUtterance/SpeechSynthesisUtterance(text)": [
    "text"
  ],
  "SpeechSynthesisUtterance/constructor()": [
    "text"
  ],
  "SpeechSynthesisUtterance/constructor(text)": [
    "text"
  ],
  "SpeechSynthesisVoice": [
    "default",
    "lang",
    "localService",
    "name",
    "voiceURI"
  ],
  "StatefulAnimator": [
    "StatefulAnimator()",
    "StatefulAnimator(options)",
    "StatefulAnimator(options, state)",
    "state()"
  ],
  "StatefulAnimator/StatefulAnimator(options, state)": [
    "options",
    "state"
  ],
  "StatelessAnimator": [
    "StatelessAnimator()",
    "StatelessAnimator(options)"
  ],
  "StatelessAnimator/StatelessAnimator(options)": [
    "options"
  ],
  "StaticRange": [
    "StaticRange(init)",
    "constructor(init)"
  ],
  "StaticRange/StaticRange(init)": [
    "init"
  ],
  "StaticRange/constructor(init)": [
    "init"
  ],
  "StaticRangeInit": [
    "endContainer",
    "endOffset",
    "startContainer",
    "startOffset"
  ],
  "StereoPannerNode": [
    "StereoPannerNode(context)",
    "StereoPannerNode(context, options)",
    "constructor(context)",
    "constructor(context, options)",
    "pan"
  ],
  "StereoPannerNode/StereoPannerNode(context)": [
    "context",
    "options"
  ],
  "StereoPannerNode/StereoPannerNode(context, options)": [
    "context",
    "options"
  ],
  "StereoPannerNode/constructor()": [
    "context",
    "options"
  ],
  "StereoPannerNode/constructor(context)": [
    "context",
    "options"
  ],
  "StereoPannerNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "StereoPannerOptions": [
    "pan"
  ],
  "Storage": [
    "clear()",
    "getItem(key)",
    "key(index)",
    "length",
    "removeItem(key)",
    "setItem(key, value)"
  ],
  "StorageEstimate": [
    "quota",
    "usage"
  ],
  "StorageEvent": [
    "initStorageEvent(type, bubbles, cancelable, key, oldValue, newValue, url, storageArea)",
    "key",
    "newValue",
    "oldValue",
    "storageArea",
    "url"
  ],
  "StorageManager": [
    "estimate()",
    "getDirectory()",
    "persist()",
    "persisted()"
  ],
  "StreamAbortInfo": [
    "errorCode"
  ],
  "StreamPipeOptions": [
    "preventAbort",
    "preventCancel",
    "preventClose",
    "signal"
  ],
  "StylePropertyMap": [
    "[[declarations]]",
    "append(property)",
    "append(property, ...values)",
    "clear()",
    "delete(property)",
    "get(property)",
    "getAll(property)",
    "has(property)",
    "set(property)",
    "set(property, ...values)",
    "size"
  ],
  "StylePropertyMap/append(property)": [
    "property",
    "values"
  ],
  "StylePropertyMap/append(property, ...values)": [
    "property",
    "values"
  ],
  "StylePropertyMap/delete(property)": [
    "property"
  ],
  "StylePropertyMap/set(property)": [
    "property",
    "values"
  ],
  "StylePropertyMap/set(property, ...values)": [
    "property",
    "values"
  ],
  "StylePropertyMapReadOnly": [
    "get(property)",
    "getAll(property)",
    "has(property)",
    "size"
  ],
  "StylePropertyMapReadOnly/get(property)": [
    "property"
  ],
  "StylePropertyMapReadOnly/getAll(property)": [
    "property"
  ],
  "StylePropertyMapReadOnly/has(property)": [
    "property"
  ],
  "StylePropertyMapReadonly": [
    "[[declarations]]",
    "size"
  ],
  "StyleSheet": [
    "disabled",
    "href",
    "media",
    "ownerNode",
    "parentStyleSheet",
    "title",
    "type"
  ],
  "StyleSheetList": [
    "item(index)",
    "length"
  ],
  "StyleSheetList/item(index)": [
    "index"
  ],
  "SubmitEvent": [
    "submitter"
  ],
  "SubtleCrypto": [
    "decrypt()",
    "decrypt(algorithm, key, data)",
    "deriveBits()",
    "deriveBits(algorithm, baseKey, length)",
    "deriveKey()",
    "deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages)",
    "digest()",
    "digest(algorithm, data)",
    "encrypt()",
    "encrypt(algorithm, key, data)",
    "exportKey()",
    "exportKey(format, key)",
    "generateKey()",
    "generateKey(algorithm, extractable, keyUsages)",
    "importKey()",
    "importKey(format, keyData, algorithm, extractable, keyUsages)",
    "sign()",
    "sign(algorithm, key, data)",
    "unwrapKey()",
    "unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages)",
    "verify()",
    "verify(algorithm, key, signature, data)",
    "wrapKey()",
    "wrapKey(format, key, wrappingKey, wrapAlgorithm)"
  ],
  "SvcOutputMetadata": [
    "temporalLayerId"
  ],
  "SyncEvent": [
    "SyncEvent(type, init)",
    "constructor(type, init)",
    "lastChance",
    "tag"
  ],
  "SyncEvent/SyncEvent(type, init)": [
    "init",
    "type"
  ],
  "SyncEvent/constructor(type, init)": [
    "init",
    "type"
  ],
  "SyncEventInit": [
    "lastChance",
    "tag"
  ],
  "SyncManager": [
    "getTags()",
    "register(tag)",
    "sync"
  ],
  "SyncManager/register(tag)": [
    "tag"
  ],
  "Table": [
    "Table(descriptor)",
    "Table(descriptor, value)",
    "constructor(descriptor)",
    "constructor(descriptor, value)",
    "get(index)",
    "grow(delta)",
    "grow(delta, value)",
    "length",
    "set(index)",
    "set(index, value)"
  ],
  "Table/Table(descriptor)": [
    "descriptor",
    "value"
  ],
  "Table/Table(descriptor, value)": [
    "descriptor",
    "value"
  ],
  "Table/constructor(descriptor)": [
    "descriptor",
    "value"
  ],
  "Table/constructor(descriptor, value)": [
    "descriptor",
    "value"
  ],
  "Table/get(index)": [
    "index"
  ],
  "Table/grow(delta)": [
    "delta",
    "value"
  ],
  "Table/grow(delta, value)": [
    "delta",
    "value"
  ],
  "Table/set(index)": [
    "index",
    "value"
  ],
  "Table/set(index, value)": [
    "index",
    "value"
  ],
  "TableDescriptor": [
    "element",
    "initial",
    "maximum"
  ],
  "TableKind": [
    "\"anyfunc\"",
    "\"externref\""
  ],
  "TaskAttributionTiming": [
    "containerId",
    "containerName",
    "containerSrc",
    "containerType",
    "toJSON()"
  ],
  "TaskController": [
    "TaskController()",
    "TaskController(priority)",
    "constructor()",
    "constructor(priority)",
    "setPriority(priority)"
  ],
  "TaskController/TaskController()": [
    "priority"
  ],
  "TaskController/TaskController(priority)": [
    "priority"
  ],
  "TaskController/constructor()": [
    "priority"
  ],
  "TaskController/constructor(priority)": [
    "priority"
  ],
  "TaskController/setPriority(priority)": [
    "priority"
  ],
  "TaskPriority": [
    "\"background\"",
    "\"user-blocking\"",
    "\"user-visible\"",
    "background",
    "less than",
    "user-blocking",
    "user-visible"
  ],
  "TaskPriorityChangeEvent": [
    "TaskPriorityChangeEvent(type, priorityChangeEventInitDict)",
    "constructor(type, priorityChangeEventInitDict)",
    "previousPriority"
  ],
  "TaskPriorityChangeEvent/TaskPriorityChangeEvent(type, priorityChangeEventInitDict)": [
    "priorityChangeEventInitDict",
    "type"
  ],
  "TaskPriorityChangeEvent/constructor(type, priorityChangeEventInitDict)": [
    "priorityChangeEventInitDict",
    "type"
  ],
  "TaskPriorityChangeEventInit": [
    "previousPriority"
  ],
  "TaskSignal": [
    "add a priority change algorithm",
    "onprioritychange",
    "priority",
    "priority change algorithms",
    "priority changing",
    "prioritychange",
    "signal priority change"
  ],
  "Text": [
    "Text()",
    "Text(data)",
    "constructor()",
    "constructor(data)",
    "isElementContentWhitespace",
    "replaceWholeText()",
    "splitText(offset)",
    "substring data",
    "wholeText"
  ],
  "Text/Text()": [
    "data"
  ],
  "Text/Text(data)": [
    "data"
  ],
  "Text/constructor()": [
    "data"
  ],
  "Text/constructor(data)": [
    "data"
  ],
  "Text/splitText(offset)": [
    "offset"
  ],
  "TextDecodeOptions": [
    "stream"
  ],
  "TextDecoder": [
    "TextDecoder()",
    "TextDecoder(label)",
    "TextDecoder(label, options)",
    "constructor()",
    "constructor(label)",
    "constructor(label, options)",
    "decode()",
    "decode(input)",
    "decode(input, options)",
    "do not flush"
  ],
  "TextDecoder/TextDecoder()": [
    "label",
    "options"
  ],
  "TextDecoder/TextDecoder(label)": [
    "label",
    "options"
  ],
  "TextDecoder/TextDecoder(label, options)": [
    "label",
    "options"
  ],
  "TextDecoder/constructor()": [
    "label",
    "options"
  ],
  "TextDecoder/constructor(label)": [
    "label",
    "options"
  ],
  "TextDecoder/constructor(label, options)": [
    "label",
    "options"
  ],
  "TextDecoder/decode()": [
    "input",
    "options"
  ],
  "TextDecoder/decode(input)": [
    "input",
    "options"
  ],
  "TextDecoder/decode(input, options)": [
    "input",
    "options"
  ],
  "TextDecoderCommon": [
    "bom seen",
    "decoder",
    "encoding",
    "error mode",
    "fatal",
    "i/o queue",
    "ignore bom",
    "ignoreBOM"
  ],
  "TextDecoderOptions": [
    "fatal",
    "ignoreBOM"
  ],
  "TextDecoderStream": [
    "TextDecoderStream()",
    "TextDecoderStream(label)",
    "TextDecoderStream(label, options)",
    "constructor()",
    "constructor(label)",
    "constructor(label, options)"
  ],
  "TextDecoderStream/TextDecoderStream()": [
    "label",
    "options"
  ],
  "TextDecoderStream/TextDecoderStream(label)": [
    "label",
    "options"
  ],
  "TextDecoderStream/TextDecoderStream(label, options)": [
    "label",
    "options"
  ],
  "TextDecoderStream/constructor()": [
    "label",
    "options"
  ],
  "TextDecoderStream/constructor(label)": [
    "label",
    "options"
  ],
  "TextDecoderStream/constructor(label, options)": [
    "label",
    "options"
  ],
  "TextDetector": [
    "TextDetector()",
    "constructor()",
    "detect(image)"
  ],
  "TextDetector/detect(image)": [
    "image"
  ],
  "TextEncoder": [
    "TextEncoder()",
    "constructor()",
    "encode()",
    "encode(input)",
    "encodeInto(source, destination)"
  ],
  "TextEncoder/encode()": [
    "input"
  ],
  "TextEncoder/encode(input)": [
    "input"
  ],
  "TextEncoder/encodeInto(source, destination)": [
    "destination",
    "source"
  ],
  "TextEncoderCommon": [
    "encoding"
  ],
  "TextEncoderEncodeIntoResult": [
    "read",
    "written"
  ],
  "TextEncoderStream": [
    "TextEncoderStream()",
    "constructor()",
    "encoder",
    "pending high surrogate"
  ],
  "TextMetrics": [
    "actualBoundingBoxAscent",
    "actualBoundingBoxDescent",
    "actualBoundingBoxLeft",
    "actualBoundingBoxRight",
    "alphabeticBaseline",
    "emHeightAscent",
    "emHeightDescent",
    "fontBoundingBoxAscent",
    "fontBoundingBoxDescent",
    "hangingBaseline",
    "ideographicBaseline",
    "width"
  ],
  "TextTrack": [
    "activeCues",
    "addCue(cue)",
    "cues",
    "id",
    "inBandMetadataTrackDispatchType",
    "kind",
    "label",
    "language",
    "mode",
    "oncuechange",
    "removeCue(cue)",
    "sourceBuffer"
  ],
  "TextTrackCue": [
    "endTime",
    "id",
    "onenter",
    "onexit",
    "pauseOnExit",
    "startTime",
    "track"
  ],
  "TextTrackCueList": [
    "getCueById(id)",
    "length"
  ],
  "TextTrackList": [
    "addtrack",
    "change",
    "getTrackById(id)",
    "length",
    "onaddtrack",
    "onchange",
    "onremovetrack",
    "removetrack"
  ],
  "TimeRanges": [
    "end(index)",
    "length",
    "start(index)"
  ],
  "TimelinePhase": [
    "\"active\"",
    "\"after\"",
    "\"before\"",
    "\"inactive\""
  ],
  "TokenBinding": [
    "id",
    "status"
  ],
  "TokenBindingStatus": [
    "\"present\"",
    "\"supported\"",
    "present",
    "supported"
  ],
  "Touch": [
    "altitudeAngle",
    "azimuthAngle",
    "clientX",
    "clientY",
    "constructor()",
    "constructor(touchInitDict)",
    "force",
    "identifier",
    "pageX",
    "pageY",
    "radiusX",
    "radiusY",
    "rotationAngle",
    "screenX",
    "screenY",
    "target",
    "touchType"
  ],
  "TouchEvent": [
    "altKey",
    "changedTouches",
    "constructor()",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "targetTouches",
    "touches"
  ],
  "TouchEventInit": [
    "changedTouches",
    "targetTouches",
    "touches"
  ],
  "TouchInit": [
    "TouchInit",
    "altitudeAngle",
    "azimuthAngle",
    "clientX",
    "clientY",
    "force",
    "identifier",
    "pageX",
    "pageY",
    "radiusX",
    "radiusY",
    "rotationAngle",
    "screenX",
    "screenY",
    "target",
    "touchType"
  ],
  "TouchList": [
    "item()",
    "item(index)",
    "length"
  ],
  "TouchType": [
    "direct",
    "stylus"
  ],
  "TrackEvent": [
    "track"
  ],
  "TrackingExData": [
    "details",
    "explanation",
    "maxAge",
    "name",
    "site",
    "targets"
  ],
  "TrackingExResult": [
    "isSiteWide"
  ],
  "TransferFunction": [
    "\"hlg\"",
    "\"pq\"",
    "\"srgb\"",
    "hlg",
    "pq",
    "srgb"
  ],
  "TransformStream": [
    "TransformStream()",
    "TransformStream(transformer)",
    "TransformStream(transformer, writableStrategy)",
    "TransformStream(transformer, writableStrategy, readableStrategy)",
    "[[backpressure]]",
    "[[backpressurechangepromise]]",
    "[[controller]]",
    "[[detached]]",
    "[[readable]]",
    "[[writable]]",
    "constructor()",
    "constructor(transformer)",
    "constructor(transformer, writableStrategy)",
    "constructor(transformer, writableStrategy, readableStrategy)",
    "enqueue",
    "error",
    "readable",
    "set up",
    "setting up",
    "terminate",
    "writable"
  ],
  "TransformStream/TransformStream()": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/TransformStream(transformer)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/TransformStream(transformer, writableStrategy)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/TransformStream(transformer, writableStrategy, readableStrategy)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/constructor()": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/constructor(transformer)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/constructor(transformer, writableStrategy)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/constructor(transformer, writableStrategy, readableStrategy)": [
    "readableStrategy",
    "transformer",
    "writableStrategy"
  ],
  "TransformStream/set up": [
    "flushalgorithm",
    "transformalgorithm"
  ],
  "TransformStreamDefaultController": [
    "[[flushalgorithm]]",
    "[[stream]]",
    "[[transformalgorithm]]",
    "desiredSize",
    "enqueue()",
    "enqueue(chunk)",
    "error()",
    "error(e)",
    "error(reason)",
    "terminate()"
  ],
  "TransformStreamDefaultController/enqueue()": [
    "chunk"
  ],
  "TransformStreamDefaultController/enqueue(chunk)": [
    "chunk"
  ],
  "TransformStreamDefaultController/error()": [
    "reason"
  ],
  "TransformStreamDefaultController/error(reason)": [
    "reason"
  ],
  "Transformer": [
    "flush",
    "readableType",
    "start",
    "transform",
    "writableType"
  ],
  "TransformerFlushCallback": [
    "controller"
  ],
  "TransformerStartCallback": [
    "controller"
  ],
  "TransformerTransformCallback": [
    "chunk",
    "controller"
  ],
  "TransitionEvent": [
    "TransitionEvent(type)",
    "TransitionEvent(type, transitionEventInitDict)",
    "constructor(type)",
    "constructor(type, transitionEventInitDict)",
    "elapsedTime",
    "propertyName",
    "pseudoElement"
  ],
  "TransitionEvent/TransitionEvent(type)": [
    "transitionEventInitDict",
    "type"
  ],
  "TransitionEvent/TransitionEvent(type, transitionEventInitDict)": [
    "transitionEventInitDict",
    "type"
  ],
  "TransitionEvent/constructor(type)": [
    "transitionEventInitDict",
    "type"
  ],
  "TransitionEvent/constructor(type, transitionEventInitDict)": [
    "transitionEventInitDict",
    "type"
  ],
  "TransitionEventInit": [
    "elapsedTime",
    "propertyName",
    "pseudoElement"
  ],
  "TreeWalker": [
    "current",
    "currentNode",
    "expandEntityReferences",
    "filter",
    "firstChild()",
    "lastChild()",
    "nextNode()",
    "nextSibling()",
    "parentNode()",
    "previousNode()",
    "previousSibling()",
    "root",
    "traverse children",
    "whatToShow"
  ],
  "TrustedHTML": [
    "stringificationbehavior",
    "toJSON()"
  ],
  "TrustedScript": [
    "stringificationbehavior",
    "toJSON()"
  ],
  "TrustedScriptURL": [
    "stringificationbehavior",
    "toJSON()"
  ],
  "TrustedTypePolicy": [
    "createHTML(input)",
    "createHTML(input, ...arguments)",
    "createScript(input)",
    "createScript(input, ...arguments)",
    "createScriptURL(input)",
    "createScriptURL(input, ...arguments)",
    "name"
  ],
  "TrustedTypePolicy/createHTML(input)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicy/createHTML(input, ...arguments)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicy/createScript(input)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicy/createScript(input, ...arguments)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicy/createScriptURL(input)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicy/createScriptURL(input, ...arguments)": [
    "arguments",
    "input"
  ],
  "TrustedTypePolicyFactory": [
    "createPolicy(policyName)",
    "createPolicy(policyName, policyOptions)",
    "defaultPolicy",
    "emptyHTML",
    "emptyScript",
    "getAttributeType(tagName, attribute)",
    "getAttributeType(tagName, attribute, elementNs)",
    "getAttributeType(tagName, attribute, elementNs, attrNs)",
    "getPropertyType(tagName, property)",
    "getPropertyType(tagName, property, elementNs)",
    "isHTML(value)",
    "isScript(value)",
    "isScriptURL(value)"
  ],
  "TrustedTypePolicyFactory/createPolicy(policyName)": [
    "policyName",
    "policyOptions"
  ],
  "TrustedTypePolicyFactory/createPolicy(policyName, policyOptions)": [
    "policyName",
    "policyOptions"
  ],
  "TrustedTypePolicyFactory/getAttributeType(tagName, attribute)": [
    "attrNs",
    "attribute",
    "elementNs",
    "tagName"
  ],
  "TrustedTypePolicyFactory/getAttributeType(tagName, attribute, elementNs)": [
    "attrNs",
    "attribute",
    "elementNs",
    "tagName"
  ],
  "TrustedTypePolicyFactory/getAttributeType(tagName, attribute, elementNs, attrNs)": [
    "attrNs",
    "attribute",
    "elementNs",
    "tagName"
  ],
  "TrustedTypePolicyFactory/getPropertyType(tagName, property)": [
    "elementNs",
    "property",
    "tagName"
  ],
  "TrustedTypePolicyFactory/getPropertyType(tagName, property, elementNs)": [
    "elementNs",
    "property",
    "tagName"
  ],
  "TrustedTypePolicyFactory/isHTML(value)": [
    "value"
  ],
  "TrustedTypePolicyFactory/isScript(value)": [
    "value"
  ],
  "TrustedTypePolicyFactory/isScriptURL(value)": [
    "value"
  ],
  "TrustedTypePolicyOptions": [
    "createHTML",
    "createScript",
    "createScriptURL"
  ],
  "UADataValues": [
    "architecture",
    "bitness",
    "brands",
    "mobile",
    "model",
    "platform",
    "platformVersion",
    "uaFullVersion"
  ],
  "UALowEntropyJSON": [
    "brands",
    "mobile",
    "platform"
  ],
  "UIEvent": [
    "UIEvent(type)",
    "UIEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "detail",
    "initUIEvent()",
    "initUIEvent(typeArg)",
    "initUIEvent(typeArg, bubblesArg)",
    "initUIEvent(typeArg, bubblesArg, cancelableArg)",
    "initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg)",
    "initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)",
    "sourceCapabilities",
    "view",
    "which"
  ],
  "UIEvent/UIEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "UIEvent/UIEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "UIEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "UIEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "UIEvent/initUIEvent(typeArg)": [
    "bubblesArg",
    "cancelableArg",
    "detailArg",
    "typeArg",
    "viewArg"
  ],
  "UIEvent/initUIEvent(typeArg, bubblesArg)": [
    "bubblesArg",
    "cancelableArg",
    "detailArg",
    "typeArg",
    "viewArg"
  ],
  "UIEvent/initUIEvent(typeArg, bubblesArg, cancelableArg)": [
    "bubblesArg",
    "cancelableArg",
    "detailArg",
    "typeArg",
    "viewArg"
  ],
  "UIEvent/initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg)": [
    "bubblesArg",
    "cancelableArg",
    "detailArg",
    "typeArg",
    "viewArg"
  ],
  "UIEvent/initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)": [
    "bubblesArg",
    "cancelableArg",
    "detailArg",
    "typeArg",
    "viewArg"
  ],
  "UIEventInit": [
    "detail",
    "sourceCapabilities",
    "view",
    "which"
  ],
  "ULongRange": [
    "max",
    "min"
  ],
  "URL": [
    "URL(url)",
    "URL(url, base)",
    "constructor(url)",
    "constructor(url, base)",
    "createObjectURL(obj)",
    "hash",
    "host",
    "hostname",
    "href",
    "origin",
    "password",
    "pathname",
    "port",
    "protocol",
    "query object",
    "revokeObjectURL(url)",
    "search",
    "searchParams",
    "stringification behavior",
    "toJSON()",
    "url",
    "username",
    "within scope"
  ],
  "URL serializer": [
    "exclude fragment"
  ],
  "URL/URL(url)": [
    "base",
    "url"
  ],
  "URL/URL(url, base)": [
    "base",
    "url"
  ],
  "URL/constructor(url)": [
    "base",
    "url"
  ],
  "URL/constructor(url, base)": [
    "base",
    "url"
  ],
  "URL/createObjectURL(obj)": [
    "obj"
  ],
  "URL/revokeObjectURL(url)": [
    "url"
  ],
  "URLSearchParams": [
    "URLSearchParams()",
    "URLSearchParams(init)",
    "append(name, value)",
    "constructor()",
    "constructor(init)",
    "delete(name)",
    "get(name)",
    "getAll(name)",
    "has(name)",
    "initialize",
    "list",
    "set(name, value)",
    "sort()",
    "stringificationbehavior",
    "update",
    "url object"
  ],
  "URLSearchParams/URLSearchParams()": [
    "init"
  ],
  "URLSearchParams/URLSearchParams(init)": [
    "init"
  ],
  "URLSearchParams/append(name, value)": [
    "name",
    "value"
  ],
  "URLSearchParams/constructor()": [
    "init"
  ],
  "URLSearchParams/constructor(init)": [
    "init"
  ],
  "URLSearchParams/delete(name)": [
    "name"
  ],
  "URLSearchParams/get(name)": [
    "name"
  ],
  "URLSearchParams/getAll(name)": [
    "name"
  ],
  "URLSearchParams/has(name)": [
    "name"
  ],
  "URLSearchParams/set(name, value)": [
    "name",
    "value"
  ],
  "USB": [
    "getDevices()",
    "onconnect",
    "ondisconnect",
    "requestDevice(options)"
  ],
  "USB/requestDevice(options)": [
    "options"
  ],
  "USBAlternateInterface": [
    "USBAlternateInterface(deviceInterface, alternateSetting)",
    "alternateSetting",
    "constructor(deviceInterface, alternateSetting)",
    "endpoints",
    "interfaceClass",
    "interfaceName",
    "interfaceProtocol",
    "interfaceSubclass"
  ],
  "USBAlternateInterface/USBAlternateInterface(deviceInterface, alternateSetting)": [
    "alternateSetting",
    "deviceInterface"
  ],
  "USBAlternateInterface/constructor(deviceInterface, alternateSetting)": [
    "alternateSetting",
    "deviceInterface"
  ],
  "USBConfiguration": [
    "USBConfiguration(device, configurationValue)",
    "configurationName",
    "configurationValue",
    "constructor(device, configurationValue)",
    "interfaces"
  ],
  "USBConfiguration/USBConfiguration(device, configurationValue)": [
    "configurationValue",
    "device"
  ],
  "USBConfiguration/constructor(device, configurationValue)": [
    "configurationValue",
    "device"
  ],
  "USBConnectionEvent": [
    "USBConnectionEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "device"
  ],
  "USBConnectionEvent/USBConnectionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "USBConnectionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "USBConnectionEventInit": [
    "device"
  ],
  "USBControlTransferParameters": [
    "index",
    "recipient",
    "request",
    "requestType",
    "value"
  ],
  "USBDevice": [
    "claimInterface(interfaceNumber)",
    "clearHalt(direction, endpointNumber)",
    "close()",
    "configuration",
    "configurations",
    "controlTransferIn(setup, length)",
    "controlTransferOut(setup)",
    "controlTransferOut(setup, data)",
    "deviceClass",
    "deviceProtocol",
    "deviceSubclass",
    "deviceVersionMajor",
    "deviceVersionMinor",
    "deviceVersionSubminor",
    "isochronousTransferIn(endpointNumber, packetLengths)",
    "isochronousTransferOut(endpointNumber, data, packetLengths)",
    "manufacturerName",
    "open()",
    "opened",
    "productId",
    "productName",
    "releaseInterface(interfaceNumber)",
    "reset()",
    "selectAlternateInterface(interfaceNumber, alternateSetting)",
    "selectConfiguration(configurationValue)",
    "serialNumber",
    "transferIn(endpointNumber, length)",
    "transferOut(endpointNumber, data)",
    "usbVersionMajor",
    "usbVersionMinor",
    "usbVersionSubminor",
    "vendorId"
  ],
  "USBDevice/claimInterface(interfaceNumber)": [
    "interfaceNumber"
  ],
  "USBDevice/clearHalt(direction, endpointNumber)": [
    "direction",
    "endpointNumber"
  ],
  "USBDevice/controlTransferIn(setup, length)": [
    "length",
    "setup"
  ],
  "USBDevice/controlTransferOut(setup)": [
    "data",
    "setup"
  ],
  "USBDevice/controlTransferOut(setup, data)": [
    "data",
    "setup"
  ],
  "USBDevice/isochronousTransferIn(endpointNumber, packetLengths)": [
    "endpointNumber",
    "packetLengths"
  ],
  "USBDevice/isochronousTransferOut(endpointNumber, data, packetLengths)": [
    "data",
    "endpointNumber",
    "packetLengths"
  ],
  "USBDevice/releaseInterface(interfaceNumber)": [
    "interfaceNumber"
  ],
  "USBDevice/selectAlternateInterface(interfaceNumber, alternateSetting)": [
    "alternateSetting",
    "interfaceNumber"
  ],
  "USBDevice/selectConfiguration(configurationValue)": [
    "configurationValue"
  ],
  "USBDevice/transferIn(endpointNumber, length)": [
    "endpointNumber",
    "length"
  ],
  "USBDevice/transferOut(endpointNumber, data)": [
    "data",
    "endpointNumber"
  ],
  "USBDeviceFilter": [
    "classCode",
    "productId",
    "protocolCode",
    "serialNumber",
    "subclassCode",
    "vendorId"
  ],
  "USBDeviceRequestOptions": [
    "filters"
  ],
  "USBDirection": [
    "\"in\"",
    "\"out\""
  ],
  "USBEndpoint": [
    "USBEndpoint(alternate, endpointNumber, direction)",
    "constructor(alternate, endpointNumber, direction)",
    "direction",
    "endpointNumber",
    "packetSize",
    "type"
  ],
  "USBEndpoint/USBEndpoint(alternate, endpointNumber, direction)": [
    "alternate",
    "direction",
    "endpointNumber"
  ],
  "USBEndpoint/constructor(alternate, endpointNumber, direction)": [
    "alternate",
    "direction",
    "endpointNumber"
  ],
  "USBEndpointType": [
    "\"bulk\"",
    "\"interrupt\"",
    "\"isochronous\""
  ],
  "USBInTransferResult": [
    "USBInTransferResult(status)",
    "USBInTransferResult(status, data)",
    "constructor(status)",
    "constructor(status, data)",
    "data",
    "status"
  ],
  "USBInTransferResult/USBInTransferResult(status)": [
    "data",
    "status"
  ],
  "USBInTransferResult/USBInTransferResult(status, data)": [
    "data",
    "status"
  ],
  "USBInTransferResult/constructor(status)": [
    "data",
    "status"
  ],
  "USBInTransferResult/constructor(status, data)": [
    "data",
    "status"
  ],
  "USBInterface": [
    "USBInterface(configuration, interfaceNumber)",
    "alternate",
    "alternates",
    "claimed",
    "constructor(configuration, interfaceNumber)",
    "interfaceNumber"
  ],
  "USBInterface/USBInterface(configuration, interfaceNumber)": [
    "configuration",
    "interfaceNumber"
  ],
  "USBInterface/constructor(configuration, interfaceNumber)": [
    "configuration",
    "interfaceNumber"
  ],
  "USBIsochronousInTransferPacket": [
    "USBIsochronousInTransferPacket(status)",
    "USBIsochronousInTransferPacket(status, data)",
    "constructor(status)",
    "constructor(status, data)",
    "data",
    "status"
  ],
  "USBIsochronousInTransferPacket/USBIsochronousInTransferPacket(status)": [
    "data",
    "status"
  ],
  "USBIsochronousInTransferPacket/USBIsochronousInTransferPacket(status, data)": [
    "data",
    "status"
  ],
  "USBIsochronousInTransferPacket/constructor(status)": [
    "data",
    "status"
  ],
  "USBIsochronousInTransferPacket/constructor(status, data)": [
    "data",
    "status"
  ],
  "USBIsochronousInTransferResult": [
    "USBIsochronousInTransferResult(packets)",
    "USBIsochronousInTransferResult(packets, data)",
    "constructor(packets)",
    "constructor(packets, data)",
    "data",
    "packets"
  ],
  "USBIsochronousInTransferResult/USBIsochronousInTransferResult(packets)": [
    "data",
    "packets"
  ],
  "USBIsochronousInTransferResult/USBIsochronousInTransferResult(packets, data)": [
    "data",
    "packets"
  ],
  "USBIsochronousInTransferResult/constructor(packets)": [
    "data",
    "packets"
  ],
  "USBIsochronousInTransferResult/constructor(packets, data)": [
    "data",
    "packets"
  ],
  "USBIsochronousOutTransferPacket": [
    "USBIsochronousOutTransferPacket(status)",
    "USBIsochronousOutTransferPacket(status, bytesWritten)",
    "bytesWritten",
    "constructor(status)",
    "constructor(status, bytesWritten)",
    "status"
  ],
  "USBIsochronousOutTransferPacket/USBIsochronousOutTransferPacket(status)": [
    "bytesWritten",
    "status"
  ],
  "USBIsochronousOutTransferPacket/USBIsochronousOutTransferPacket(status, bytesWritten)": [
    "bytesWritten",
    "status"
  ],
  "USBIsochronousOutTransferPacket/constructor(status)": [
    "bytesWritten",
    "status"
  ],
  "USBIsochronousOutTransferPacket/constructor(status, bytesWritten)": [
    "bytesWritten",
    "status"
  ],
  "USBIsochronousOutTransferResult": [
    "USBIsochronousOutTransferResult(packets)",
    "constructor(packets)",
    "packets"
  ],
  "USBIsochronousOutTransferResult/USBIsochronousOutTransferResult(packets)": [
    "packets"
  ],
  "USBIsochronousOutTransferResult/constructor(packets)": [
    "packets"
  ],
  "USBOutTransferResult": [
    "USBOutTransferResult(status)",
    "USBOutTransferResult(status, bytesWritten)",
    "bytesWritten",
    "constructor(status)",
    "constructor(status, bytesWritten)",
    "status"
  ],
  "USBOutTransferResult/USBOutTransferResult(status)": [
    "bytesWritten",
    "status"
  ],
  "USBOutTransferResult/USBOutTransferResult(status, bytesWritten)": [
    "bytesWritten",
    "status"
  ],
  "USBOutTransferResult/constructor(status)": [
    "bytesWritten",
    "status"
  ],
  "USBOutTransferResult/constructor(status, bytesWritten)": [
    "bytesWritten",
    "status"
  ],
  "USBPermissionDescriptor": [
    "filters"
  ],
  "USBPermissionResult": [
    "devices"
  ],
  "USBPermissionStorage": [
    "allowedDevices"
  ],
  "USBRecipient": [
    "\"device\"",
    "\"endpoint\"",
    "\"interface\"",
    "\"other\""
  ],
  "USBRequestType": [
    "\"class\"",
    "\"standard\"",
    "\"vendor\""
  ],
  "USBTransferStatus": [
    "\"babble\"",
    "\"ok\"",
    "\"stall\""
  ],
  "UncalibratedMagnetometer": [
    "UncalibratedMagnetometer()",
    "UncalibratedMagnetometer(sensorOptions)",
    "constructor()",
    "constructor(sensorOptions)",
    "x",
    "xBias",
    "y",
    "yBias",
    "z",
    "zBias"
  ],
  "UncalibratedMagnetometer/UncalibratedMagnetometer()": [
    "sensorOptions"
  ],
  "UncalibratedMagnetometer/UncalibratedMagnetometer(sensorOptions)": [
    "sensorOptions"
  ],
  "UncalibratedMagnetometer/constructor()": [
    "sensorOptions"
  ],
  "UncalibratedMagnetometer/constructor(sensorOptions)": [
    "sensorOptions"
  ],
  "UncalibratedMagnetometerReadingValues": [
    "x",
    "xBias",
    "y",
    "yBias",
    "z",
    "zBias"
  ],
  "UnderlyingSink": [
    "abort",
    "close",
    "start",
    "type",
    "write"
  ],
  "UnderlyingSinkAbortCallback": [
    "reason"
  ],
  "UnderlyingSinkStartCallback": [
    "controller"
  ],
  "UnderlyingSinkWriteCallback": [
    "chunk",
    "controller"
  ],
  "UnderlyingSource": [
    "autoAllocateChunkSize",
    "cancel",
    "pull",
    "start",
    "type"
  ],
  "UnderlyingSourceCancelCallback": [
    "reason"
  ],
  "UnderlyingSourcePullCallback": [
    "controller"
  ],
  "UnderlyingSourceStartCallback": [
    "controller"
  ],
  "UnidirectionalStreamsTransport": [
    "createUnidirectionalStream()",
    "createUnidirectionalStream(parameters)",
    "incomingUnidirectionalStreams"
  ],
  "UnidirectionalStreamsTransport/createUnidirectionalStream()": [
    "parameters"
  ],
  "UnidirectionalStreamsTransport/createUnidirectionalStream(parameters)": [
    "parameters"
  ],
  "UserIdleState": [
    "\"active\"",
    "\"idle\""
  ],
  "UserVerificationRequirement": [
    "\"discouraged\"",
    "\"preferred\"",
    "\"required\"",
    "discouraged",
    "preferred",
    "required"
  ],
  "VTTCue": [
    "VTTCue(startTime, endTime, text)",
    "align",
    "constructor(startTime, endTime, text)",
    "getCueAsHTML()",
    "line",
    "lineAlign",
    "position",
    "positionAlign",
    "region",
    "size",
    "snapToLines",
    "text",
    "vertical"
  ],
  "VTTCue/VTTCue(startTime, endTime, text)": [
    "endTime",
    "startTime",
    "text"
  ],
  "VTTCue/constructor(startTime, endTime, text)": [
    "endTime",
    "startTime",
    "text"
  ],
  "VTTRegion": [
    "VTTRegion()",
    "constructor()",
    "id",
    "lines",
    "regionAnchorX",
    "regionAnchorY",
    "scroll",
    "viewportAnchorX",
    "viewportAnchorY",
    "width"
  ],
  "ValidityState": [
    "badInput",
    "customError",
    "patternMismatch",
    "rangeOverflow",
    "rangeUnderflow",
    "stepMismatch",
    "tooLong",
    "tooShort",
    "typeMismatch",
    "valid",
    "valueMissing"
  ],
  "ValueEvent": [
    "ValueEvent(type)",
    "ValueEvent(type, initDict)",
    "constructor(type)",
    "constructor(type, initDict)",
    "value"
  ],
  "ValueEvent/ValueEvent(type)": [
    "initDict",
    "type"
  ],
  "ValueEvent/ValueEvent(type, initDict)": [
    "initDict",
    "type"
  ],
  "ValueEvent/constructor(type)": [
    "initDict",
    "type"
  ],
  "ValueEvent/constructor(type, initDict)": [
    "initDict",
    "type"
  ],
  "ValueEventInit": [
    "value"
  ],
  "ValueType": [
    "\"anyfunc\"",
    "\"externref\"",
    "\"f32\"",
    "\"f64\"",
    "\"i32\"",
    "\"i64\""
  ],
  "VideoConfiguration": [
    "bitrate",
    "colorGamut",
    "contentType",
    "framerate",
    "hasAlphaChannel",
    "hdrMetadataType",
    "height",
    "scalabilityMode",
    "transferFunction",
    "width"
  ],
  "VideoDecoder": [
    "VideoDecoder(init)",
    "[[active decoder config]]",
    "[[codec implementation]]",
    "[[decodeQueueSize]]",
    "[[error callback]]",
    "[[key chunk required]]",
    "[[output callback]]",
    "[[pending flush promises]]",
    "[[state]]",
    "close()",
    "configure(config)",
    "constructor(init)",
    "decode(chunk)",
    "decodeQueueSize",
    "flush()",
    "isConfigSupported(config)",
    "reset()",
    "state"
  ],
  "VideoDecoder/VideoDecoder(init)": [
    "init"
  ],
  "VideoDecoder/configure(config)": [
    "config"
  ],
  "VideoDecoder/constructor(init)": [
    "init"
  ],
  "VideoDecoder/decode(chunk)": [
    "chunk"
  ],
  "VideoDecoder/isConfigSupported(config)": [
    "config"
  ],
  "VideoDecoderConfig": [
    "codec",
    "codedHeight",
    "codedWidth",
    "description",
    "displayAspectHeight",
    "displayAspectWidth",
    "hardwareAcceleration"
  ],
  "VideoDecoderInit": [
    "error",
    "output"
  ],
  "VideoDecoderSupport": [
    "config",
    "supported"
  ],
  "VideoEncoder": [
    "VideoEncoder(init)",
    "[[active encoder config]]",
    "[[active output config]]",
    "[[codec implementation]]",
    "[[encodeQueueSize]]",
    "[[error callback]]",
    "[[output callback]]",
    "[[pending flush promises]]",
    "[[state]]",
    "close()",
    "configure(config)",
    "constructor(init)",
    "encode(frame)",
    "encode(frame, options)",
    "encodeQueueSize",
    "flush()",
    "isConfigSupported(config)",
    "reset()",
    "state"
  ],
  "VideoEncoder/VideoEncoder(init)": [
    "init"
  ],
  "VideoEncoder/configure(config)": [
    "config"
  ],
  "VideoEncoder/constructor(init)": [
    "init"
  ],
  "VideoEncoder/encode(frame)": [
    "frame",
    "options"
  ],
  "VideoEncoder/encode(frame, options)": [
    "frame",
    "options"
  ],
  "VideoEncoder/isConfigSupported(config)": [
    "config"
  ],
  "VideoEncoderConfig": [
    "bitrate",
    "bitrateMode",
    "codec",
    "displayHeight",
    "displayWidth",
    "hardwareAcceleration",
    "height",
    "scalabilityMode",
    "width"
  ],
  "VideoEncoderEncodeOptions": [
    "keyFrame"
  ],
  "VideoEncoderInit": [
    "error",
    "output"
  ],
  "VideoEncoderSupport": [
    "config",
    "supported"
  ],
  "VideoFacingModeEnum": [
    "environment",
    "left",
    "right",
    "user"
  ],
  "VideoFrame": [
    "VideoFrame(image)",
    "VideoFrame(image, init)",
    "VideoFrame(planes, init)",
    "[[coded height]]",
    "[[coded width]]",
    "[[detached]]",
    "[[display height]]",
    "[[display width]]",
    "[[duration]]",
    "[[format]]",
    "[[resource reference]]",
    "[[timestamp]]",
    "[[visible height]]",
    "[[visible left]]",
    "[[visible top]]",
    "[[visible width]]",
    "allocationSize()",
    "allocationSize(options)",
    "clone()",
    "close()",
    "codedHeight",
    "codedRect",
    "codedWidth",
    "compute layout and allocation size",
    "constructor(image)",
    "constructor(image, init)",
    "constructor(planes, init)",
    "copyTo(destination)",
    "copyTo(destination, options)",
    "displayHeight",
    "displayWidth",
    "duration",
    "format",
    "initialize frame from other frame",
    "initialize frame with resource and size",
    "parse copyto rect",
    "parse videoframecopytooptions",
    "timestamp",
    "visibleRect"
  ],
  "VideoFrame/VideoFrame(image)": [
    "image",
    "init"
  ],
  "VideoFrame/VideoFrame(image, init)": [
    "image",
    "init"
  ],
  "VideoFrame/VideoFrame(planes, init)": [
    "init",
    "planes"
  ],
  "VideoFrame/allocationSize()": [
    "options"
  ],
  "VideoFrame/allocationSize(options)": [
    "options"
  ],
  "VideoFrame/constructor(image)": [
    "image",
    "init"
  ],
  "VideoFrame/constructor(image, init)": [
    "image",
    "init"
  ],
  "VideoFrame/constructor(planes, init)": [
    "init",
    "planes"
  ],
  "VideoFrame/copyTo(destination)": [
    "destination",
    "options"
  ],
  "VideoFrame/copyTo(destination, options)": [
    "destination",
    "options"
  ],
  "VideoFrameCopyToOptions": [
    "layout",
    "rect"
  ],
  "VideoFrameInit": [
    "duration",
    "timestamp"
  ],
  "VideoFrameMetadata": [
    "captureTime",
    "expectedDisplayTime",
    "height",
    "mediaTime",
    "presentationTime",
    "presentedFrames",
    "processingDuration",
    "receiveTime",
    "rtpTimestamp",
    "width"
  ],
  "VideoFrameOutputCallback": [
    "output"
  ],
  "VideoFramePlaneInit": [
    "codedHeight",
    "codedWidth",
    "displayHeight",
    "displayWidth",
    "duration",
    "format",
    "timestamp",
    "visibleRect"
  ],
  "VideoFrameRect": [
    "height",
    "left",
    "top",
    "width"
  ],
  "VideoFrameRequestCallback": [
    "metadata",
    "now"
  ],
  "VideoKindEnum": [
    "color",
    "depth"
  ],
  "VideoPlaybackQuality": [
    "VideoPlaybackQuality",
    "corruptedVideoFrames",
    "creationTime",
    "droppedVideoFrames",
    "foo",
    "totalVideoFrames"
  ],
  "VideoResizeModeEnum": [
    "crop-and-scale",
    "none"
  ],
  "VideoTrack": [
    "id",
    "kind",
    "label",
    "language",
    "selected",
    "sourceBuffer"
  ],
  "VideoTrackList": [
    "addtrack",
    "change",
    "getTrackById(id)",
    "length",
    "onaddtrack",
    "onchange",
    "onremovetrack",
    "removetrack",
    "selectedIndex"
  ],
  "VisibilityState": [
    "hidden",
    "visible"
  ],
  "VisualViewport": [
    "height",
    "offsetLeft",
    "offsetTop",
    "onresize",
    "onscroll",
    "pageLeft",
    "pageTop",
    "scale",
    "segments",
    "width"
  ],
  "WakeLock": [
    "request()",
    "request(type)"
  ],
  "WakeLockSentinel": [
    "[[Released]]",
    "onrelease",
    "release()",
    "released",
    "type"
  ],
  "WakeLockType": [
    "screen"
  ],
  "WatchAdvertisementsOptions": [
    "signal"
  ],
  "WaveShaperNode": [
    "WaveShaperNode(context)",
    "WaveShaperNode(context, options)",
    "[[curve set]]",
    "constructor(context)",
    "constructor(context, options)",
    "curve",
    "oversample"
  ],
  "WaveShaperNode/WaveShaperNode(context)": [
    "context",
    "options"
  ],
  "WaveShaperNode/WaveShaperNode(context, options)": [
    "context",
    "options"
  ],
  "WaveShaperNode/constructor()": [
    "context",
    "options"
  ],
  "WaveShaperNode/constructor(context)": [
    "context",
    "options"
  ],
  "WaveShaperNode/constructor(context, options)": [
    "context",
    "options"
  ],
  "WaveShaperOptions": [
    "curve",
    "oversample"
  ],
  "Web IDL arguments list": [
    "converting"
  ],
  "WebAppManifest": [
    "share_target"
  ],
  "WebAssembly": [
    "compile(bytes)",
    "compileStreaming(source)",
    "instantiate(bytes)",
    "instantiate(bytes, importObject)",
    "instantiate(moduleObject)",
    "instantiate(moduleObject, importObject)",
    "instantiateStreaming(source)",
    "instantiateStreaming(source, importObject)",
    "validate(bytes)"
  ],
  "WebAssembly/compile(bytes)": [
    "bytes"
  ],
  "WebAssembly/compileStreaming(source)": [
    "source"
  ],
  "WebAssembly/instantiate(bytes)": [
    "bytes",
    "importObject"
  ],
  "WebAssembly/instantiate(bytes, importObject)": [
    "bytes",
    "importObject"
  ],
  "WebAssembly/instantiate(moduleObject)": [
    "importObject",
    "moduleObject"
  ],
  "WebAssembly/instantiate(moduleObject, importObject)": [
    "importObject",
    "moduleObject"
  ],
  "WebAssembly/instantiateStreaming(source)": [
    "importObject",
    "source"
  ],
  "WebAssembly/instantiateStreaming(source, importObject)": [
    "importObject",
    "source"
  ],
  "WebAssembly/validate(bytes)": [
    "bytes"
  ],
  "WebAssemblyInstantiatedSource": [
    "instance",
    "module"
  ],
  "WebCodecsErrorCallback": [
    "error"
  ],
  "WebGLContextAttributes": [
    "xrCompatible"
  ],
  "WebGLRenderingContextBase": [
    "makeXRCompatible()"
  ],
  "WebSocket": [
    "CLOSED",
    "CLOSING",
    "CONNECTING",
    "OPEN",
    "WebSocket(url, protocols)",
    "binaryType",
    "bufferedAmount",
    "close",
    "close(code, reason)",
    "error",
    "extensions",
    "message",
    "onclose",
    "onerror",
    "onmessage",
    "onopen",
    "open",
    "protocol",
    "readyState",
    "send(data)",
    "url"
  ],
  "WebTransport": [
    "WebTransport(url)",
    "WebTransport(url, options)",
    "[[closed]]",
    "[[connection]]",
    "[[datagrams]]",
    "[[incomingbidirectionalstreams]]",
    "[[incomingunidirectionalstreams]]",
    "[[outgoingdatagramsexpirationduration]]",
    "[[outgoingdatagramshighwatermark]]",
    "[[outgoingdatagramsqueue]]",
    "[[outgoingstreams]]",
    "[[ready]]",
    "[[receivedbidirectionalstreams]]",
    "[[receivedstreams]]",
    "[[receivestreams]]",
    "[[sendstreams]]",
    "[[session]]",
    "[[state]]",
    "cleanup",
    "close()",
    "close(closeInfo)",
    "closed",
    "constructor(url)",
    "constructor(url, options)",
    "createBidirectionalStream()",
    "createUnidirectionalStream()",
    "datagrams",
    "getStats()",
    "incomingBidirectionalStreams",
    "incomingUnidirectionalStreams",
    "maxDatagramSize",
    "onstatechange",
    "queue a network task",
    "ready",
    "state"
  ],
  "WebTransport/WebTransport(url)": [
    "options",
    "url"
  ],
  "WebTransport/WebTransport(url, options)": [
    "options",
    "url"
  ],
  "WebTransport/close()": [
    "closeInfo"
  ],
  "WebTransport/close(closeInfo)": [
    "closeInfo"
  ],
  "WebTransport/constructor(url)": [
    "options",
    "url"
  ],
  "WebTransport/constructor(url, options)": [
    "options",
    "url"
  ],
  "WebTransportCloseInfo": [
    "errorCode",
    "reason"
  ],
  "WebTransportOptions": [
    "allowPooling",
    "serverCertificateFingerprints"
  ],
  "WebTransportState": [
    "\"closed\"",
    "\"connected\"",
    "\"connecting\"",
    "\"failed\""
  ],
  "WebTransportStats": [
    "bytesReceived",
    "bytesSent",
    "minRtt",
    "numIncomingStreamsCreated",
    "numOutgoingStreamsCreated",
    "numReceivedDatagramsDropped",
    "packetsReceived",
    "packetsSent",
    "timestamp"
  ],
  "WellKnownDirectory": [
    "\"desktop\"",
    "\"documents\"",
    "\"downloads\"",
    "\"music\"",
    "\"pictures\"",
    "\"videos\"",
    "determine the directory the picker will start in",
    "malware scans and safe browsing checks",
    "origin private file system",
    "remember a picked directory",
    "too sensitive or dangerous"
  ],
  "WheelEvent": [
    "DOM_DELTA_LINE",
    "DOM_DELTA_PAGE",
    "DOM_DELTA_PIXEL",
    "WheelEvent(type)",
    "WheelEvent(type, eventInitDict)",
    "constructor(type)",
    "constructor(type, eventInitDict)",
    "deltaMode",
    "deltaX",
    "deltaY",
    "deltaZ",
    "initWheelEvent()"
  ],
  "WheelEvent/WheelEvent(type)": [
    "eventInitDict",
    "type"
  ],
  "WheelEvent/WheelEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "WheelEvent/constructor(type)": [
    "eventInitDict",
    "type"
  ],
  "WheelEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "WheelEventInit": [
    "deltaMode",
    "deltaX",
    "deltaY",
    "deltaZ"
  ],
  "Window": [
    "[[defaultElementStylesMap]]",
    "[[registeredPropertySet]]",
    "afterprint",
    "alert()",
    "alert(message)",
    "associated cookiestore",
    "beforeprint",
    "beforeunload",
    "blur",
    "blur()",
    "browsing context",
    "cancelIdleCallback()",
    "cancelIdleCallback(handle)",
    "captureEvents()",
    "clientInformation",
    "close()",
    "closed",
    "confirm(message)",
    "cookieStore",
    "current event",
    "customElements",
    "devicePixelRatio",
    "document",
    "error",
    "event",
    "external",
    "focus",
    "focus()",
    "frameElement",
    "frames",
    "getComputedStyle(elt)",
    "getComputedStyle(elt, pseudoElt)",
    "getSelection()",
    "hashchange",
    "history",
    "innerHeight",
    "innerWidth",
    "languagechange",
    "length",
    "load",
    "location",
    "locationbar",
    "matchMedia(query)",
    "menubar",
    "message",
    "messageerror",
    "moveBy(x, y)",
    "moveTo(x, y)",
    "name",
    "navigate(dir)",
    "navigator",
    "offline",
    "onabort",
    "onanimationcancel",
    "onanimationend",
    "onanimationiteration",
    "onanimationstart",
    "onauxclick",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncompassneedscalibration",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondevicemotion",
    "ondeviceorientation",
    "ondeviceorientationabsolute",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onformdata",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "online",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onorientationchange",
    "onpause",
    "onplay",
    "onplaying",
    "onportalactivate",
    "onprogress",
    "onratechange",
    "onreset",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onslotchange",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "onvolumechange",
    "onwaiting",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkittransitionend",
    "onwheel",
    "open(url, target, features)",
    "opener",
    "orientation",
    "originAgentCluster",
    "outerHeight",
    "outerWidth",
    "pageXOffset",
    "pageYOffset",
    "pagehide",
    "pageshow",
    "parent",
    "personalbar",
    "popstate",
    "portalHost",
    "portalactivate",
    "postMessage(message, options)",
    "postMessage(message, targetOrigin, transfer)",
    "print()",
    "prompt(message, default)",
    "rejectionhandled",
    "releaseEvents()",
    "requestIdleCallback()",
    "requestIdleCallback(callback)",
    "requestIdleCallback(callback, options)",
    "resize",
    "resizeBy(x, y)",
    "resizeTo(width, height)",
    "resizeTo(x, y)",
    "screen",
    "screenLeft",
    "screenTop",
    "screenX",
    "screenY",
    "scroll()",
    "scroll(options)",
    "scroll(x, y)",
    "scrollBy()",
    "scrollBy(options)",
    "scrollBy(x, y)",
    "scrollTo()",
    "scrollTo(options)",
    "scrollTo(x, y)",
    "scrollX",
    "scrollY",
    "scrollbars",
    "self",
    "showDirectoryPicker()",
    "showDirectoryPicker(options)",
    "showOpenFilePicker()",
    "showOpenFilePicker(options)",
    "showSaveFilePicker()",
    "showSaveFilePicker(options)",
    "speechSynthesis",
    "status",
    "statusbar",
    "stop()",
    "storage",
    "toolbar",
    "top",
    "trusted type policy factory",
    "unhandledrejection",
    "unload",
    "visualViewport",
    "window"
  ],
  "Window/getComputedStyle(elt)": [
    "elt",
    "pseudoElt"
  ],
  "Window/getComputedStyle(elt, pseudoElt)": [
    "elt",
    "pseudoElt"
  ],
  "Window/matchMedia(query)": [
    "query"
  ],
  "Window/moveBy(x, y)": [
    "x",
    "y"
  ],
  "Window/moveTo(x, y)": [
    "x",
    "y"
  ],
  "Window/navigate(dir)": [
    "dir"
  ],
  "Window/resizeBy(x, y)": [
    "x",
    "y"
  ],
  "Window/resizeTo(width, height)": [
    "height",
    "width"
  ],
  "Window/resizeTo(x, y)": [
    "x",
    "y"
  ],
  "Window/scroll()": [
    "options"
  ],
  "Window/scroll(options)": [
    "options"
  ],
  "Window/scroll(x, y)": [
    "x",
    "y"
  ],
  "Window/scrollBy()": [
    "options"
  ],
  "Window/scrollBy(options)": [
    "options"
  ],
  "Window/scrollBy(x, y)": [
    "x",
    "y"
  ],
  "Window/scrollTo()": [
    "options"
  ],
  "Window/scrollTo(options)": [
    "options"
  ],
  "Window/scrollTo(x, y)": [
    "x",
    "y"
  ],
  "Window/showDirectoryPicker()": [
    "options"
  ],
  "Window/showDirectoryPicker(options)": [
    "options"
  ],
  "Window/showOpenFilePicker()": [
    "options"
  ],
  "Window/showOpenFilePicker(options)": [
    "options"
  ],
  "Window/showSaveFilePicker()": [
    "options"
  ],
  "Window/showSaveFilePicker(options)": [
    "options"
  ],
  "WindowClient": [
    "ancestor origins array",
    "ancestorOrigins",
    "browsing context",
    "focus()",
    "focused",
    "navigate(url)",
    "visibilityState"
  ],
  "WindowClient/navigate(url)": [
    "url"
  ],
  "WindowEventHandlers": [
    "onafterprint",
    "onbeforeprint",
    "onbeforeunload",
    "ongamepadconnected",
    "ongamepaddisconnected",
    "onhashchange",
    "onlanguagechange",
    "onmessage",
    "onmessageerror",
    "onoffline",
    "ononline",
    "onpagehide",
    "onpageshow",
    "onpopstate",
    "onportalactivate",
    "onrejectionhandled",
    "onstorage",
    "onunhandledrejection",
    "onunload"
  ],
  "WindowLocalStorage": [
    "localStorage"
  ],
  "WindowOrWorkerGlobalScope": [
    "atob(data)",
    "brands frozen array",
    "btoa(data)",
    "caches",
    "clearInterval(handle)",
    "clearTimeout(handle)",
    "createImageBitmap(image, options)",
    "crossOriginIsolated",
    "crypto",
    "endpoints",
    "fetch(input)",
    "fetch(input, init)",
    "indexedDB",
    "isSecureContext",
    "memory attribution token",
    "origin",
    "origin policy ids",
    "originPolicyIds",
    "performance",
    "queueMicrotask(callback)",
    "registered reporting observer list",
    "report buffer",
    "reports",
    "scheduler",
    "setInterval(handler)",
    "setInterval(handler, timeout)",
    "setInterval(handler, timeout, ...arguments)",
    "setTimeout(handler)",
    "setTimeout(handler, timeout)",
    "setTimeout(handler, timeout, ...arguments)",
    "trustedTypes"
  ],
  "WindowOrWorkerGlobalScope/fetch(input)": [
    "init",
    "input"
  ],
  "WindowOrWorkerGlobalScope/fetch(input, init)": [
    "init",
    "input"
  ],
  "WindowOrWorkerGlobalScope/setInterval(handler)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowOrWorkerGlobalScope/setInterval(handler, timeout)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowOrWorkerGlobalScope/setInterval(handler, timeout, ...arguments)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowOrWorkerGlobalScope/setTimeout(handler)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowOrWorkerGlobalScope/setTimeout(handler, timeout)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowOrWorkerGlobalScope/setTimeout(handler, timeout, ...arguments)": [
    "arguments",
    "handler",
    "timeout"
  ],
  "WindowPostMessageOptions": [
    "targetOrigin"
  ],
  "WindowSessionStorage": [
    "sessionStorage"
  ],
  "Worker": [
    "Worker(scriptURL)",
    "Worker(scriptURL, options)",
    "constructor(scriptURL)",
    "constructor(scriptURL, options)",
    "error",
    "message",
    "messageerror",
    "onmessage",
    "onmessageerror",
    "postMessage(message, options)",
    "postMessage(message, transfer)",
    "terminate()"
  ],
  "Worker/Worker(scriptURL)": [
    "options",
    "scriptURL"
  ],
  "Worker/Worker(scriptURL, options)": [
    "options",
    "scriptURL"
  ],
  "Worker/constructor(scriptURL)": [
    "options",
    "scriptURL"
  ],
  "Worker/constructor(scriptURL, options)": [
    "options",
    "scriptURL"
  ],
  "WorkerGlobalScope": [
    "closing",
    "cross-origin isolated capability",
    "embedder policy",
    "error",
    "import map",
    "importScripts()",
    "importScripts(...urls)",
    "languagechange",
    "location",
    "module map",
    "name",
    "navigator",
    "offline",
    "onerror",
    "onlanguagechange",
    "online",
    "onoffline",
    "ononline",
    "onrejectionhandled",
    "onunhandledrejection",
    "owner set",
    "policy container",
    "rejectionhandled",
    "self",
    "type",
    "unhandledrejection",
    "url"
  ],
  "WorkerGlobalScope/importScripts()": [
    "urls"
  ],
  "WorkerGlobalScope/importScripts(...urls)": [
    "urls"
  ],
  "WorkerLocation": [
    "hash",
    "host",
    "hostname",
    "href",
    "origin",
    "pathname",
    "port",
    "protocol",
    "search"
  ],
  "WorkerNavigator": [
    "mediaCapabilities",
    "permissions",
    "serial",
    "serviceWorker",
    "usb"
  ],
  "Worklet": [
    "addModule(moduleURL, options)",
    "global scopes"
  ],
  "WorkletAnimation": [
    "WorkletAnimation(animatorName)",
    "WorkletAnimation(animatorName, effects)",
    "WorkletAnimation(animatorName, effects, timeline)",
    "WorkletAnimation(animatorName, effects, timeline, options)",
    "animatorName",
    "constructor(animatorName)",
    "constructor(animatorName, effects)",
    "constructor(animatorName, effects, timeline)",
    "constructor(animatorName, effects, timeline, options)"
  ],
  "WorkletAnimation/WorkletAnimation(animatorName)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/WorkletAnimation(animatorName, effects)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/WorkletAnimation(animatorName, effects, timeline)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/WorkletAnimation(animatorName, effects, timeline, options)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/constructor(animatorName)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/constructor(animatorName, effects)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/constructor(animatorName, effects, timeline)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimation/constructor(animatorName, effects, timeline, options)": [
    "animatorName",
    "effects",
    "options",
    "timeline"
  ],
  "WorkletAnimationEffect": [
    "getComputedTiming()",
    "getTiming()",
    "localTime"
  ],
  "WorkletGroupEffect": [
    "getChildren()"
  ],
  "WorkletOptions": [
    "credentials"
  ],
  "WritableStream": [
    "WritableStream()",
    "WritableStream(underlyingSink)",
    "WritableStream(underlyingSink, strategy)",
    "[[backpressure]]",
    "[[closerequest]]",
    "[[controller]]",
    "[[detached]]",
    "[[inflightcloserequest]]",
    "[[inflightwriterequest]]",
    "[[pendingabortrequest]]",
    "[[state]]",
    "[[storederror]]",
    "[[writer]]",
    "[[writerequests]]",
    "abort",
    "abort()",
    "abort(reason)",
    "aborting",
    "close",
    "close()",
    "closing",
    "constructor()",
    "constructor(underlyingSink)",
    "constructor(underlyingSink, strategy)",
    "error",
    "erroring",
    "get a writer",
    "getWriter()",
    "getting a writer",
    "locked",
    "set up"
  ],
  "WritableStream/WritableStream()": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/WritableStream(underlyingSink)": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/WritableStream(underlyingSink, strategy)": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/abort()": [
    "reason"
  ],
  "WritableStream/abort(reason)": [
    "reason"
  ],
  "WritableStream/constructor()": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/constructor(underlyingSink)": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/constructor(underlyingSink, strategy)": [
    "strategy",
    "underlyingSink"
  ],
  "WritableStream/set up": [
    "abortalgorithm",
    "closealgorithm",
    "highwatermark",
    "sizealgorithm",
    "writealgorithm"
  ],
  "WritableStreamController": [
    "[[AbortSteps]]",
    "[[ErrorSteps]]"
  ],
  "WritableStreamDefaultController": [
    "[[AbortSteps]]",
    "[[ErrorSteps]]",
    "[[abortalgorithm]]",
    "[[abortreason]]",
    "[[closealgorithm]]",
    "[[queue]]",
    "[[queuetotalsize]]",
    "[[signal]]",
    "[[started]]",
    "[[strategyhwm]]",
    "[[strategysizealgorithm]]",
    "[[stream]]",
    "[[writealgorithm]]",
    "abortReason",
    "error()",
    "error(e)",
    "signal"
  ],
  "WritableStreamDefaultController/error()": [
    "e"
  ],
  "WritableStreamDefaultController/error(e)": [
    "e"
  ],
  "WritableStreamDefaultWriter": [
    "WritableStreamDefaultWriter(stream)",
    "[[closedpromise]]",
    "[[readypromise]]",
    "[[stream]]",
    "abort()",
    "abort(reason)",
    "close()",
    "closed",
    "constructor(stream)",
    "desiredSize",
    "ready",
    "release",
    "releaseLock()",
    "write a chunk",
    "write()",
    "write(chunk)",
    "writing a chunk"
  ],
  "WritableStreamDefaultWriter/WritableStreamDefaultWriter(stream)": [
    "stream"
  ],
  "WritableStreamDefaultWriter/abort()": [
    "reason"
  ],
  "WritableStreamDefaultWriter/abort(reason)": [
    "reason"
  ],
  "WritableStreamDefaultWriter/constructor(stream)": [
    "stream"
  ],
  "WritableStreamDefaultWriter/write()": [
    "chunk"
  ],
  "WritableStreamDefaultWriter/write(chunk)": [
    "chunk"
  ],
  "WriteCommandType": [
    "\"seek\"",
    "\"truncate\"",
    "\"write\""
  ],
  "WriteParams": [
    "data",
    "position",
    "size",
    "type"
  ],
  "XMLHttpRequest": [
    "DONE",
    "HEADERS_RECEIVED",
    "LOADING",
    "OPENED",
    "UNSENT",
    "XMLHttpRequest()",
    "abort",
    "abort()",
    "constructor()",
    "error",
    "getAllResponseHeaders()",
    "getResponseHeader(name)",
    "load",
    "loadend",
    "loadstart",
    "onreadystatechange",
    "open(method, url)",
    "open(method, url, async)",
    "open(method, url, async, username)",
    "open(method, url, async, username, password)",
    "overrideMimeType(mime)",
    "progress",
    "readyState",
    "readystatechange",
    "response",
    "responseText",
    "responseType",
    "responseURL",
    "responseXML",
    "send()",
    "send(body)",
    "setRequestHeader(name, value)",
    "status",
    "statusText",
    "timeout",
    "upload",
    "withCredentials"
  ],
  "XMLHttpRequest/getResponseHeader(name)": [
    "name"
  ],
  "XMLHttpRequest/open(method, url)": [
    "method",
    "url"
  ],
  "XMLHttpRequest/open(method, url, async)": [
    "async",
    "method",
    "password",
    "url",
    "username"
  ],
  "XMLHttpRequest/open(method, url, async, username)": [
    "async",
    "method",
    "password",
    "url",
    "username"
  ],
  "XMLHttpRequest/open(method, url, async, username, password)": [
    "async",
    "method",
    "password",
    "url",
    "username"
  ],
  "XMLHttpRequest/overrideMimeType(mime)": [
    "mime"
  ],
  "XMLHttpRequest/send()": [
    "body"
  ],
  "XMLHttpRequest/send(body)": [
    "body"
  ],
  "XMLHttpRequest/setRequestHeader(name, value)": [
    "name",
    "value"
  ],
  "XMLHttpRequestEventTarget": [
    "onabort",
    "onerror",
    "onload",
    "onloadend",
    "onloadstart",
    "onprogress",
    "ontimeout"
  ],
  "XMLHttpRequestResponseType": [
    "\"\"",
    "\"arraybuffer\"",
    "\"blob\"",
    "\"document\"",
    "\"json\"",
    "\"text\""
  ],
  "XMLSerializer": [
    "constructor()",
    "serializeToString()",
    "serializeToString(root)"
  ],
  "XPathEvaluator": [
    "XPathEvaluator()",
    "constructor()"
  ],
  "XPathEvaluatorBase": [
    "createExpression(expression)",
    "createExpression(expression, resolver)",
    "createNSResolver(nodeResolver)",
    "evaluate(expression, contextNode)",
    "evaluate(expression, contextNode, resolver)",
    "evaluate(expression, contextNode, resolver, type)",
    "evaluate(expression, contextNode, resolver, type, result)"
  ],
  "XPathEvaluatorBase/createExpression(expression)": [
    "expression",
    "resolver"
  ],
  "XPathEvaluatorBase/createExpression(expression, resolver)": [
    "expression",
    "resolver"
  ],
  "XPathEvaluatorBase/createNSResolver(nodeResolver)": [
    "nodeResolver"
  ],
  "XPathEvaluatorBase/evaluate(expression, contextNode)": [
    "contextNode",
    "expression",
    "resolver",
    "result",
    "type"
  ],
  "XPathEvaluatorBase/evaluate(expression, contextNode, resolver)": [
    "contextNode",
    "expression",
    "resolver",
    "result",
    "type"
  ],
  "XPathEvaluatorBase/evaluate(expression, contextNode, resolver, type)": [
    "contextNode",
    "expression",
    "resolver",
    "result",
    "type"
  ],
  "XPathEvaluatorBase/evaluate(expression, contextNode, resolver, type, result)": [
    "contextNode",
    "expression",
    "resolver",
    "result",
    "type"
  ],
  "XPathExpression": [
    "evaluate(contextNode)",
    "evaluate(contextNode, type)",
    "evaluate(contextNode, type, result)"
  ],
  "XPathExpression/evaluate(contextNode)": [
    "contextNode",
    "result",
    "type"
  ],
  "XPathExpression/evaluate(contextNode, type)": [
    "contextNode",
    "result",
    "type"
  ],
  "XPathExpression/evaluate(contextNode, type, result)": [
    "contextNode",
    "result",
    "type"
  ],
  "XPathNSResolver": [
    "lookupNamespaceURI(prefix)"
  ],
  "XPathNSResolver/lookupNamespaceURI(prefix)": [
    "prefix"
  ],
  "XPathResult": [
    "ANY_TYPE",
    "ANY_UNORDERED_NODE_TYPE",
    "BOOLEAN_TYPE",
    "FIRST_ORDERED_NODE_TYPE",
    "NUMBER_TYPE",
    "ORDERED_NODE_ITERATOR_TYPE",
    "ORDERED_NODE_SNAPSHOT_TYPE",
    "STRING_TYPE",
    "UNORDERED_NODE_ITERATOR_TYPE",
    "UNORDERED_NODE_SNAPSHOT_TYPE",
    "booleanValue",
    "invalidIteratorState",
    "iterateNext()",
    "numberValue",
    "resultType",
    "singleNodeValue",
    "snapshotItem(index)",
    "snapshotLength",
    "stringValue"
  ],
  "XPathResult/snapshotItem(index)": [
    "index"
  ],
  "XR device": [
    "list of enabled features",
    "set of granted features"
  ],
  "XRAnchor": [
    "anchorSpace",
    "delete()",
    "deleted",
    "native origin",
    "session"
  ],
  "XRBoundedReferenceSpace": [
    "boundsGeometry",
    "native bounds geometry"
  ],
  "XRCPUDepthInformation": [
    "data",
    "getDepthInMeters(x, y)"
  ],
  "XRCPUDepthInformation/getDepthInMeters(x, y)": [
    "x",
    "y"
  ],
  "XRCompositionLayer": [
    "blendTextureSourceAlpha",
    "chromaticAberrationCorrection",
    "context",
    "destroy()",
    "fixedFoveation",
    "isstatic",
    "layout",
    "media",
    "mipLevels",
    "needsRedraw",
    "session"
  ],
  "XRCubeLayer": [
    "onredraw",
    "orientation",
    "space"
  ],
  "XRCubeLayerInit": [
    "orientation"
  ],
  "XRCylinderLayer": [
    "aspectRatio",
    "centralAngle",
    "onredraw",
    "radius",
    "space",
    "transform"
  ],
  "XRCylinderLayerInit": [
    "aspectRatio",
    "centralAngle",
    "radius",
    "textureType",
    "transform"
  ],
  "XRDOMOverlayInit": [
    "root"
  ],
  "XRDOMOverlayState": [
    "type"
  ],
  "XRDOMOverlayType": [
    "\"floating\"",
    "\"head-locked\"",
    "\"screen\"",
    "floating",
    "head-locked",
    "screen"
  ],
  "XRDepthDataFormat": [
    "\"float32\"",
    "\"luminance-alpha\""
  ],
  "XRDepthInformation": [
    "depth buffer",
    "height",
    "normDepthBufferFromNormView",
    "rawValueToMeters",
    "view",
    "width"
  ],
  "XRDepthStateInit": [
    "dataFormatPreference",
    "usagePreference"
  ],
  "XRDepthUsage": [
    "\"cpu-optimized\"",
    "\"gpu-optimized\""
  ],
  "XREnvironmentBlendMode": [
    "\"additive\"",
    "\"alpha-blend\"",
    "\"opaque\"",
    "additive",
    "alpha-blend",
    "opaque"
  ],
  "XREquirectLayer": [
    "centralHorizontalAngle",
    "lowerVerticalAngle",
    "onredraw",
    "radius",
    "space",
    "transform",
    "upperVerticalAngle"
  ],
  "XREquirectLayerInit": [
    "centralHorizontalAngle",
    "lowerVerticalAngle",
    "radius",
    "textureType",
    "transform",
    "upperVerticalAngle"
  ],
  "XREye": [
    "\"left\"",
    "\"none\"",
    "\"right\""
  ],
  "XRFrame": [
    "active",
    "animationframe",
    "apply frame updates",
    "apply gamepad frame updates",
    "createAnchor(pose, space)",
    "fillJointRadii(jointSpaces, radii)",
    "fillPoses(spaces, baseSpace, transforms)",
    "getDepthInformation(view)",
    "getHitTestResults(hitTestSource)",
    "getHitTestResultsForTransientInput(hitTestSource)",
    "getJointPose(joint, baseSpace)",
    "getLightEstimate(lightProbe)",
    "getPose(space, baseSpace)",
    "getViewerPose(referenceSpace)",
    "map of hit test sources to hit test results",
    "map of hit test sources to hit test results for transient input",
    "session",
    "time",
    "trackedAnchors"
  ],
  "XRFrame/createAnchor(pose, space)": [
    "pose",
    "space"
  ],
  "XRFrame/fillJointRadii(jointSpaces, radii)": [
    "jointSpaces",
    "radii"
  ],
  "XRFrame/fillPoses(spaces, baseSpace, transforms)": [
    "baseSpace",
    "spaces",
    "transforms"
  ],
  "XRFrame/getDepthInformation(view)": [
    "view"
  ],
  "XRFrame/getHitTestResults(hitTestSource)": [
    "hitTestSource"
  ],
  "XRFrame/getHitTestResultsForTransientInput(hitTestSource)": [
    "hitTestSource"
  ],
  "XRFrame/getJointPose(joint, baseSpace)": [
    "baseSpace",
    "joint"
  ],
  "XRFrame/getLightEstimate(lightProbe)": [
    "lightProbe"
  ],
  "XRFrame/getPose(space, baseSpace)": [
    "baseSpace",
    "space"
  ],
  "XRFrame/getViewerPose(referenceSpace)": [
    "referenceSpace"
  ],
  "XRFrameRequestCallback": [
    "cancelled",
    "frame",
    "time"
  ],
  "XRHand": [
    "INDEX_METACARPAL",
    "INDEX_PHALANX_DISTAL",
    "INDEX_PHALANX_INTERMEDIATE",
    "INDEX_PHALANX_PROXIMAL",
    "INDEX_PHALANX_TIP",
    "LITTLE_METACARPAL",
    "LITTLE_PHALANX_DISTAL",
    "LITTLE_PHALANX_INTERMEDIATE",
    "LITTLE_PHALANX_PROXIMAL",
    "LITTLE_PHALANX_TIP",
    "MIDDLE_METACARPAL",
    "MIDDLE_PHALANX_DISTAL",
    "MIDDLE_PHALANX_INTERMEDIATE",
    "MIDDLE_PHALANX_PROXIMAL",
    "MIDDLE_PHALANX_TIP",
    "RING_METACARPAL",
    "RING_PHALANX_DISTAL",
    "RING_PHALANX_INTERMEDIATE",
    "RING_PHALANX_PROXIMAL",
    "RING_PHALANX_TIP",
    "THUMB_METACARPAL",
    "THUMB_PHALANX_DISTAL",
    "THUMB_PHALANX_PROXIMAL",
    "THUMB_PHALANX_TIP",
    "WRIST",
    "[[joints]]",
    "get(jointName)",
    "get(key)",
    "input source",
    "joint(jointIndex)",
    "length",
    "list of joint spaces",
    "size"
  ],
  "XRHand/get(key)": [
    "key"
  ],
  "XRHand/joint(jointIndex)": [
    "jointIndex"
  ],
  "XRHandJoint": [
    "\"index-finger-metacarpal\"",
    "\"index-finger-phalanx-distal\"",
    "\"index-finger-phalanx-intermediate\"",
    "\"index-finger-phalanx-proximal\"",
    "\"index-finger-tip\"",
    "\"middle-finger-metacarpal\"",
    "\"middle-finger-phalanx-distal\"",
    "\"middle-finger-phalanx-intermediate\"",
    "\"middle-finger-phalanx-proximal\"",
    "\"middle-finger-tip\"",
    "\"pinky-finger-metacarpal\"",
    "\"pinky-finger-phalanx-distal\"",
    "\"pinky-finger-phalanx-intermediate\"",
    "\"pinky-finger-phalanx-proximal\"",
    "\"pinky-finger-tip\"",
    "\"ring-finger-metacarpal\"",
    "\"ring-finger-phalanx-distal\"",
    "\"ring-finger-phalanx-intermediate\"",
    "\"ring-finger-phalanx-proximal\"",
    "\"ring-finger-tip\"",
    "\"thumb-metacarpal\"",
    "\"thumb-phalanx-distal\"",
    "\"thumb-phalanx-proximal\"",
    "\"thumb-tip\"",
    "\"wrist\""
  ],
  "XRHandedness": [
    "\"left\"",
    "\"none\"",
    "\"right\""
  ],
  "XRHitTestOptionsInit": [
    "effective entitytypes",
    "effective offsetray",
    "entityTypes",
    "offsetRay",
    "space"
  ],
  "XRHitTestResult": [
    "createAnchor()",
    "frame",
    "getPose(baseSpace)",
    "native entity",
    "native origin"
  ],
  "XRHitTestResult/getPose(baseSpace)": [
    "baseSpace"
  ],
  "XRHitTestSource": [
    "active",
    "cancel()",
    "entity types",
    "native origin",
    "offset ray",
    "session"
  ],
  "XRHitTestTrackableType": [
    "\"mesh\"",
    "\"plane\"",
    "\"point\""
  ],
  "XRInputSource": [
    "gamepad",
    "gripSpace",
    "hand",
    "handedness",
    "input profile name",
    "profiles",
    "targetRayMode",
    "targetRaySpace"
  ],
  "XRInputSourceArray": [
    "indexed property getter",
    "length"
  ],
  "XRInputSourceArray/__getter__(index)": [
    "index"
  ],
  "XRInputSourceEvent": [
    "XRInputSourceEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "frame",
    "inputSource"
  ],
  "XRInputSourceEvent/XRInputSourceEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRInputSourceEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRInputSourceEventInit": [
    "frame",
    "inputSource"
  ],
  "XRInputSourcesChangeEvent": [
    "XRInputSourcesChangeEvent(type, eventInitDict)",
    "added",
    "constructor(type, eventInitDict)",
    "removed",
    "session"
  ],
  "XRInputSourcesChangeEvent/XRInputSourcesChangeEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRInputSourcesChangeEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRInputSourcesChangeEventInit": [
    "added",
    "removed",
    "session"
  ],
  "XRInteractionMode": [
    "\"screen-space\"",
    "\"world-space\""
  ],
  "XRJointPose": [
    "radius"
  ],
  "XRJointSpace": [
    "hand",
    "joint",
    "joint index",
    "joint(jointIndex)",
    "jointName",
    "jointname"
  ],
  "XRLayer": [
    "redraw"
  ],
  "XRLayerEvent": [
    "XRLayerEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "layer"
  ],
  "XRLayerEvent/XRLayerEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRLayerEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRLayerEventInit": [
    "layer"
  ],
  "XRLayerInit": [
    "colorFormat",
    "depthFormat",
    "isStatic",
    "layout",
    "mipLevels",
    "space",
    "viewPixelHeight",
    "viewPixelWidth"
  ],
  "XRLayerLayout": [
    "\"default\"",
    "\"mono\"",
    "\"stereo\"",
    "\"stereo-left-right\"",
    "\"stereo-top-bottom\"",
    "default",
    "mono",
    "stereo",
    "stereo-left-right",
    "stereo-top-bottom"
  ],
  "XRLightEstimate": [
    "primaryLightDirection",
    "primaryLightIntensity",
    "sphericalHarmonicsCoefficients"
  ],
  "XRLightProbe": [
    "onreflectionchange",
    "probeSpace",
    "reflection format",
    "reflectionchange",
    "session"
  ],
  "XRLightProbeInit": [
    "reflectionFormat"
  ],
  "XRMediaBinding": [
    "XRMediaBinding(session)",
    "constructor(session)",
    "createCylinderLayer(video)",
    "createCylinderLayer(video, init)",
    "createEquirectLayer(video)",
    "createEquirectLayer(video, init)",
    "createQuadLayer(video)",
    "createQuadLayer(video, init)",
    "session"
  ],
  "XRMediaBinding/XRMediaBinding(session)": [
    "session"
  ],
  "XRMediaBinding/constructor(session)": [
    "session"
  ],
  "XRMediaBinding/createCylinderLayer(video)": [
    "init",
    "video"
  ],
  "XRMediaBinding/createCylinderLayer(video, init)": [
    "init",
    "video"
  ],
  "XRMediaBinding/createEquirectLayer(video)": [
    "init",
    "video"
  ],
  "XRMediaBinding/createEquirectLayer(video, init)": [
    "init",
    "video"
  ],
  "XRMediaBinding/createQuadLayer(video)": [
    "init",
    "video"
  ],
  "XRMediaBinding/createQuadLayer(video, init)": [
    "init",
    "video"
  ],
  "XRMediaCylinderLayerInit": [
    "aspectRatio",
    "centralAngle",
    "radius",
    "transform"
  ],
  "XRMediaEquirectLayerInit": [
    "centralHorizontalAngle",
    "lowerVerticalAngle",
    "radius",
    "transform",
    "upperVerticalAngle"
  ],
  "XRMediaLayerInit": [
    "invertStereo",
    "layout",
    "space"
  ],
  "XRMediaQuadLayerInit": [
    "height",
    "transform",
    "width"
  ],
  "XRPermissionDescriptor": [
    "mode",
    "optionalFeatures",
    "requiredFeatures"
  ],
  "XRPermissionStatus": [
    "granted"
  ],
  "XRPose": [
    "angularVelocity",
    "computed offset",
    "emulatedPosition",
    "linearVelocity",
    "transform"
  ],
  "XRProjectionLayer": [
    "colortextures for secondary views",
    "depthstenciltextures for secondary views",
    "fixedFoveation",
    "ignoreDepthValues",
    "textureArrayLength",
    "textureHeight",
    "textureWidth"
  ],
  "XRProjectionLayerInit": [
    "colorFormat",
    "depthFormat",
    "scaleFactor",
    "textureType"
  ],
  "XRQuadLayer": [
    "height",
    "onredraw",
    "space",
    "transform",
    "width"
  ],
  "XRQuadLayerInit": [
    "height",
    "textureType",
    "transform",
    "width"
  ],
  "XRRay": [
    "XRRay()",
    "XRRay(origin)",
    "XRRay(origin, direction)",
    "XRRay(transform)",
    "constructor()",
    "constructor(origin)",
    "constructor(origin, direction)",
    "constructor(transform)",
    "direction",
    "matrix",
    "obtain the matrix",
    "origin"
  ],
  "XRRay/XRRay()": [
    "direction",
    "origin"
  ],
  "XRRay/XRRay(origin)": [
    "direction",
    "origin"
  ],
  "XRRay/XRRay(origin, direction)": [
    "direction",
    "origin"
  ],
  "XRRay/XRRay(transform)": [
    "transform"
  ],
  "XRRay/constructor()": [
    "direction",
    "origin"
  ],
  "XRRay/constructor(origin)": [
    "direction",
    "origin"
  ],
  "XRRay/constructor(origin, direction)": [
    "direction",
    "origin"
  ],
  "XRRay/constructor(transform)": [
    "transform"
  ],
  "XRRayDirectionInit": [
    "w",
    "x",
    "y",
    "z"
  ],
  "XRReferenceSpace": [
    "getOffsetReferenceSpace(originOffset)",
    "onreset",
    "reset",
    "type"
  ],
  "XRReferenceSpace/getOffsetReferenceSpace(originOffset)": [
    "originOffset"
  ],
  "XRReferenceSpaceEvent": [
    "XRReferenceSpaceEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "referenceSpace",
    "transform"
  ],
  "XRReferenceSpaceEvent/XRReferenceSpaceEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRReferenceSpaceEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRReferenceSpaceEventInit": [
    "referenceSpace",
    "transform"
  ],
  "XRReferenceSpaceType": [
    "\"bounded-floor\"",
    "\"local\"",
    "\"local-floor\"",
    "\"unbounded\"",
    "\"viewer\"",
    "bounded-floor",
    "local",
    "local-floor",
    "unbounded",
    "viewer"
  ],
  "XRReflectionFormat": [
    "\"rgba16f\"",
    "\"srgba8\""
  ],
  "XRRenderState": [
    "baseLayer",
    "composition disabled",
    "composition enabled",
    "depthFar",
    "depthNear",
    "inlineVerticalFieldOfView",
    "layers",
    "output canvas"
  ],
  "XRRenderStateInit": [
    "baseLayer",
    "depthFar",
    "depthNear",
    "inlineVerticalFieldOfView",
    "layers"
  ],
  "XRRigidTransform": [
    "XRRigidTransform()",
    "XRRigidTransform(position)",
    "XRRigidTransform(position, orientation)",
    "constructor()",
    "constructor(position)",
    "constructor(position, orientation)",
    "internal matrix",
    "inverse",
    "matrix",
    "obtain the matrix",
    "orientation",
    "position"
  ],
  "XRRigidTransform/XRRigidTransform()": [
    "orientation",
    "position"
  ],
  "XRRigidTransform/XRRigidTransform(position)": [
    "orientation",
    "position"
  ],
  "XRRigidTransform/XRRigidTransform(position, orientation)": [
    "orientation",
    "position"
  ],
  "XRRigidTransform/constructor()": [
    "orientation",
    "position"
  ],
  "XRRigidTransform/constructor(position)": [
    "orientation",
    "position"
  ],
  "XRRigidTransform/constructor(position, orientation)": [
    "orientation",
    "position"
  ],
  "XRSession": [
    "add input source",
    "animation frame",
    "cancelAnimationFrame(handle)",
    "change input source",
    "depthDataFormat",
    "depthUsage",
    "domOverlayState",
    "end",
    "end()",
    "environmentBlendMode",
    "inputSources",
    "inputsourceschange",
    "interactionMode",
    "list of frame updates",
    "list of views",
    "map of new anchors",
    "mode",
    "onend",
    "oninputsourceschange",
    "onselect",
    "onselectend",
    "onselectstart",
    "onsqueeze",
    "onsqueezeend",
    "onsqueezestart",
    "onvisibilitychange",
    "preferredReflectionFormat",
    "promise resolved",
    "remove input source",
    "renderState",
    "requestAnimationFrame(callback)",
    "requestHitTestSource(options)",
    "requestHitTestSourceForTransientInput(options)",
    "requestLightProbe()",
    "requestLightProbe(options)",
    "requestReferenceSpace(type)",
    "select",
    "selectend",
    "selectstart",
    "set of active hit test sources",
    "set of active hit test sources for transient input",
    "set of granted features",
    "set of tracked anchors",
    "squeeze",
    "squeezeend",
    "squeezestart",
    "updateRenderState()",
    "updateRenderState(newState)",
    "updateRenderState(state)",
    "viewer reference space",
    "visibility state",
    "visibilityState",
    "visibilitychange",
    "xr device"
  ],
  "XRSession/cancelAnimationFrame(handle)": [
    "handle"
  ],
  "XRSession/requestAnimationFrame(callback)": [
    "callback"
  ],
  "XRSession/requestHitTestSource(options)": [
    "options"
  ],
  "XRSession/requestHitTestSourceForTransientInput(options)": [
    "options"
  ],
  "XRSession/requestLightProbe()": [
    "options"
  ],
  "XRSession/requestLightProbe(options)": [
    "options"
  ],
  "XRSession/requestReferenceSpace(type)": [
    "type"
  ],
  "XRSession/updateRenderState()": [
    "state"
  ],
  "XRSession/updateRenderState(state)": [
    "state"
  ],
  "XRSessionEvent": [
    "XRSessionEvent(type, eventInitDict)",
    "constructor(type, eventInitDict)",
    "session"
  ],
  "XRSessionEvent/XRSessionEvent(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRSessionEvent/constructor(type, eventInitDict)": [
    "eventInitDict",
    "type"
  ],
  "XRSessionEventInit": [
    "session"
  ],
  "XRSessionInit": [
    "depthSensing",
    "domOverlay",
    "optionalFeatures",
    "requiredFeatures"
  ],
  "XRSessionMode": [
    "\"immersive-ar\"",
    "\"immersive-vr\"",
    "\"inline\"",
    "immersive-ar",
    "immersive-vr",
    "inline"
  ],
  "XRSessionSupportedPermissionDescriptor": [
    "mode"
  ],
  "XRSpace": [
    "coordinate system",
    "effective origin",
    "native origin",
    "origin offset",
    "session"
  ],
  "XRSubImage": [
    "viewport"
  ],
  "XRSystem": [
    "devicechange",
    "isSessionSupported(mode)",
    "ondevicechange",
    "requestSession(mode)",
    "requestSession(mode, options)"
  ],
  "XRSystem/isSessionSupported(mode)": [
    "mode"
  ],
  "XRSystem/requestSession(mode)": [
    "mode",
    "options"
  ],
  "XRSystem/requestSession(mode, options)": [
    "mode",
    "options"
  ],
  "XRTargetRayMode": [
    "\"gaze\"",
    "\"screen\"",
    "\"tracked-pointer\"",
    "gaze",
    "screen",
    "tracked-pointer"
  ],
  "XRTextureType": [
    "\"texture\"",
    "\"texture-array\"",
    "texture",
    "texture-array"
  ],
  "XRTransientInputHitTestOptionsInit": [
    "effective entitytypes",
    "effective offsetray",
    "entityTypes",
    "offsetRay",
    "profile"
  ],
  "XRTransientInputHitTestResult": [
    "frame",
    "inputSource",
    "results"
  ],
  "XRTransientInputHitTestSource": [
    "active",
    "cancel()",
    "entity types",
    "offset ray",
    "profile",
    "session"
  ],
  "XRView": [
    "eye",
    "frame",
    "frame time",
    "internal projection matrix",
    "isFirstPersonObserver",
    "obtain a scaled viewport",
    "obtain the projection matrix",
    "projectionMatrix",
    "recommendedViewportScale",
    "requestViewportScale(scale)",
    "session",
    "transform",
    "underlying view"
  ],
  "XRView/requestViewportScale(scale)": [
    "scale"
  ],
  "XRViewerPose": [
    "views"
  ],
  "XRViewport": [
    "height",
    "width",
    "x",
    "y"
  ],
  "XRVisibilityState": [
    "\"hidden\"",
    "\"visible\"",
    "\"visible-blurred\"",
    "hidden",
    "visible",
    "visible-blurred"
  ],
  "XRWebGLBinding": [
    "XRWebGLBinding(session, context)",
    "constructor(session, context)",
    "context",
    "createCubeLayer()",
    "createCubeLayer(init)",
    "createCylinderLayer()",
    "createCylinderLayer(init)",
    "createEquirectLayer()",
    "createEquirectLayer(init)",
    "createProjectionLayer()",
    "createProjectionLayer(init)",
    "createQuadLayer()",
    "createQuadLayer(init)",
    "getDepthInformation(view)",
    "getReflectionCubeMap(lightProbe)",
    "getSubImage(layer, frame)",
    "getSubImage(layer, frame, eye)",
    "getViewSubImage(layer, view)",
    "nativeProjectionScaleFactor",
    "session"
  ],
  "XRWebGLBinding/XRWebGLBinding(session, context)": [
    "context",
    "session"
  ],
  "XRWebGLBinding/constructor(session, context)": [
    "context",
    "session"
  ],
  "XRWebGLBinding/createCubeLayer()": [
    "init"
  ],
  "XRWebGLBinding/createCubeLayer(init)": [
    "init"
  ],
  "XRWebGLBinding/createCylinderLayer()": [
    "init"
  ],
  "XRWebGLBinding/createCylinderLayer(init)": [
    "init"
  ],
  "XRWebGLBinding/createEquirectLayer()": [
    "init"
  ],
  "XRWebGLBinding/createEquirectLayer(init)": [
    "init"
  ],
  "XRWebGLBinding/createProjectionLayer()": [
    "init"
  ],
  "XRWebGLBinding/createProjectionLayer(init)": [
    "init"
  ],
  "XRWebGLBinding/createQuadLayer()": [
    "init"
  ],
  "XRWebGLBinding/createQuadLayer(init)": [
    "init"
  ],
  "XRWebGLBinding/getDepthInformation(view)": [
    "view"
  ],
  "XRWebGLBinding/getReflectionCubeMap(lightProbe)": [
    "lightProbe"
  ],
  "XRWebGLBinding/getSubImage(layer, frame)": [
    "eye",
    "frame",
    "layer"
  ],
  "XRWebGLBinding/getSubImage(layer, frame, eye)": [
    "eye",
    "frame",
    "layer"
  ],
  "XRWebGLBinding/getViewSubImage(layer, view)": [
    "layer",
    "view"
  ],
  "XRWebGLDepthInformation": [
    "getDepthInformation(view)",
    "texture"
  ],
  "XRWebGLLayer": [
    "XRWebGLLayer(session, context)",
    "XRWebGLLayer(session, context, layerInit)",
    "antialias",
    "composition disabled",
    "composition enabled",
    "constructor(session, context)",
    "constructor(session, context, layerInit)",
    "context",
    "fixedFoveation",
    "framebuffer",
    "framebufferHeight",
    "framebufferWidth",
    "getNativeFramebufferScaleFactor(session)",
    "getViewport(view)",
    "ignoreDepthValues",
    "session",
    "target framebuffer"
  ],
  "XRWebGLLayer/XRWebGLLayer(session, context)": [
    "context",
    "layerInit",
    "session"
  ],
  "XRWebGLLayer/XRWebGLLayer(session, context, layerInit)": [
    "context",
    "layerInit",
    "session"
  ],
  "XRWebGLLayer/constructor(session, context)": [
    "context",
    "layerInit",
    "session"
  ],
  "XRWebGLLayer/constructor(session, context, layerInit)": [
    "context",
    "layerInit",
    "session"
  ],
  "XRWebGLLayer/getNativeFramebufferScaleFactor(session)": [
    "session"
  ],
  "XRWebGLLayer/getViewport(view)": [
    "view"
  ],
  "XRWebGLLayerInit": [
    "alpha",
    "antialias",
    "depth",
    "framebufferScaleFactor",
    "ignoreDepthValues",
    "stencil"
  ],
  "XRWebGLSubImage": [
    "colorTexture",
    "depthStencilTexture",
    "imageIndex",
    "textureHeight",
    "textureWidth"
  ],
  "XSLTProcessor": [
    "XSLTProcessor()",
    "clearParameters()",
    "constructor()",
    "getParameter(namespaceURI, localName)",
    "importStylesheet(style)",
    "removeParameter(namespaceURI, localName)",
    "reset()",
    "setParameter(namespaceURI, localName, value)",
    "transformToDocument(source)",
    "transformToFragment(source, output)"
  ],
  "XSLTProcessor/getParameter(namespaceURI, localName)": [
    "localName",
    "namespaceURI"
  ],
  "XSLTProcessor/importStylesheet(style)": [
    "style"
  ],
  "XSLTProcessor/removeParameter(namespaceURI, localName)": [
    "localName",
    "namespaceURI"
  ],
  "XSLTProcessor/setParameter(namespaceURI, localName, value)": [
    "localName",
    "namespaceURI",
    "value"
  ],
  "XSLTProcessor/transformToDocument(source)": [
    "source"
  ],
  "XSLTProcessor/transformToFragment(source, output)": [
    "output",
    "source"
  ],
  "a": [
    "charset",
    "coords",
    "download",
    "href",
    "hreflang",
    "methods",
    "name",
    "ping",
    "referrerpolicy",
    "rel",
    "requiredextensions",
    "rev",
    "shape",
    "systemlanguage",
    "target",
    "type",
    "urn",
    "xlink:href",
    "xlink:title"
  ],
  "a/rel": [
    "alternate",
    "author",
    "bookmark",
    "external",
    "help",
    "license",
    "next",
    "nofollow",
    "noopener",
    "noreferrer",
    "opener",
    "prev",
    "search",
    "tag"
  ],
  "abbr": [
    "title"
  ],
  "accent-color": [
    "<color>",
    "auto"
  ],
  "accept-ch-cache": [
    "client hints set",
    "origin"
  ],
  "access": [
    "read",
    "read_write",
    "write"
  ],
  "action": [
    "icon resource",
    "icon url",
    "name",
    "title"
  ],
  "adapter": [
    "[[current]]",
    "[[features]]",
    "[[limits]]",
    "[[software]]"
  ],
  "agent": [
    "event loop"
  ],
  "agent cluster": [
    "storage access map"
  ],
  "align-content": [
    "baseline",
    "center",
    "end",
    "first",
    "first baseline",
    "flex-end",
    "flex-start",
    "last",
    "last baseline",
    "normal",
    "space-around",
    "space-between",
    "space-evenly",
    "start",
    "stretch"
  ],
  "align-items": [
    "auto",
    "baseline",
    "center",
    "first",
    "first baseline",
    "flex-end",
    "flex-start",
    "last",
    "last baseline",
    "participates in baseline alignment",
    "stretch"
  ],
  "align-self": [
    "auto",
    "baseline",
    "center",
    "end",
    "first",
    "first baseline",
    "flex-end",
    "flex-start",
    "last",
    "last baseline",
    "normal",
    "participates in baseline alignment",
    "self-end",
    "self-start",
    "start",
    "stretch"
  ],
  "alignment-baseline": [
    "alphabetic",
    "baseline",
    "central",
    "ideographic",
    "mathematical",
    "middle",
    "text-after-edge",
    "text-before-edge",
    "text-bottom",
    "text-top"
  ],
  "all": [
    "inherit",
    "initial",
    "revert",
    "revert-layer",
    "unset"
  ],
  "allowed signed exchange link info": [
    "header integrity",
    "target",
    "variant key",
    "variants"
  ],
  "alternate signed exchange link info": [
    "context",
    "target",
    "variant key",
    "variants"
  ],
  "alternate signed exchange preload info": [
    "link",
    "prefetched alternate exchange",
    "target"
  ],
  "animate": [
    "accumulate",
    "additive",
    "attributename",
    "begin",
    "dur",
    "end",
    "fill",
    "from",
    "href",
    "keypoints",
    "keysplines",
    "keytimes",
    "max",
    "min",
    "onbegin",
    "onend",
    "onrepeat",
    "origin",
    "repeatcount",
    "repeatdur",
    "requiredextensions",
    "restart",
    "rotate",
    "systemlanguage",
    "values"
  ],
  "animateMotion": [
    "calcmode",
    "onbegin",
    "onend",
    "onrepeat",
    "path",
    "requiredextensions",
    "systemlanguage"
  ],
  "animateTransform": [
    "onbegin",
    "onend",
    "onrepeat",
    "requiredextensions",
    "systemlanguage",
    "type"
  ],
  "animation-delay": [
    "<time>"
  ],
  "animation-direction": [
    "alternate",
    "alternate-reverse",
    "normal",
    "reverse"
  ],
  "animation-duration": [
    "<time>"
  ],
  "animation-fill-mode": [
    "backwards",
    "both",
    "forwards",
    "none"
  ],
  "animation-iteration-count": [
    "<number>",
    "infinite"
  ],
  "animation-name": [
    "<keyframes-name>",
    "none"
  ],
  "animation-play-state": [
    "paused",
    "running"
  ],
  "animationevent": [
    "animationcancel",
    "animationend",
    "animationiteration",
    "animationstart"
  ],
  "animator definition": [
    "stateful flag"
  ],
  "annotated types": [
    "inner type"
  ],
  "appearance": [
    "<compat-auto>",
    "auto",
    "button",
    "checkbox",
    "listbox",
    "menulist",
    "menulist-button",
    "meter",
    "none",
    "progress-bar",
    "push-button",
    "radio",
    "searchfield",
    "slider-horizontal",
    "square-button",
    "textarea",
    "textfield"
  ],
  "appendmode": [
    "segments",
    "sequence"
  ],
  "arc": [
    "ccw",
    "cw",
    "large",
    "small"
  ],
  "area": [
    "alt",
    "coords",
    "download",
    "href",
    "hreflang",
    "nohref",
    "ping",
    "referrerpolicy",
    "rel",
    "shape",
    "target",
    "type"
  ],
  "area/rel": [
    "alternate",
    "author",
    "bookmark",
    "external",
    "help",
    "license",
    "next",
    "nofollow",
    "noopener",
    "noreferrer",
    "opener",
    "prev",
    "search",
    "tag"
  ],
  "area/shape": [
    "circle state",
    "default state",
    "polygon state",
    "rectangle state"
  ],
  "ascent-override!!descriptor": [
    "<percentage>",
    "normal"
  ],
  "aspect-ratio": [
    "<ratio>",
    "auto",
    "auto && <ratio>"
  ],
  "assertionCreationData": [
    "authenticatordataresult",
    "clientdatajsonresult",
    "clientextensionresults",
    "credentialidresult",
    "signatureresult",
    "userhandleresult"
  ],
  "attr()": [
    "<dimension-unit>",
    "angle",
    "color",
    "flex",
    "frequency",
    "ident",
    "length",
    "number",
    "percentage",
    "string",
    "substitution value",
    "time",
    "url"
  ],
  "attribute": [
    "align",
    "binding",
    "block",
    "builtin",
    "group",
    "interpolate",
    "invariant",
    "location",
    "override",
    "size",
    "stage",
    "stride",
    "workgroup_size"
  ],
  "audio": [
    "autoplay",
    "controls",
    "crossorigin",
    "loop",
    "muted",
    "preload",
    "requiredextensions",
    "src",
    "systemlanguage"
  ],
  "audio/crossorigin": [
    "anonymous",
    "use-credentials"
  ],
  "audio/preload": [
    "auto",
    "metadata",
    "none"
  ],
  "audiotrack": [
    "sourcebuffer"
  ],
  "augmented certificate": [
    "certificate",
    "ocsp response",
    "sct"
  ],
  "authenticator": [
    "credentials map"
  ],
  "authenticator data": [
    "perform the following steps to generate an authenticator data structure"
  ],
  "background fetch": [
    "abort all flag",
    "display",
    "download total",
    "failure reason",
    "icons",
    "id",
    "paused flag",
    "records",
    "records available flag",
    "result",
    "service worker registration",
    "stored body bytes total",
    "title",
    "update handling queue",
    "upload total",
    "uploaded"
  ],
  "background fetch record": [
    "request",
    "response data"
  ],
  "background fetch response": [
    "bytes",
    "exposed",
    "response",
    "result"
  ],
  "background-attachment": [
    "fixed",
    "local",
    "scroll"
  ],
  "background-clip": [
    "<box>",
    "border",
    "border-box",
    "content-box",
    "padding-box",
    "text"
  ],
  "background-image": [
    "<uri>",
    "none"
  ],
  "background-origin": [
    "border-box",
    "content-box",
    "padding-box"
  ],
  "background-position": [
    "<length>",
    "<percentage>",
    "bottom",
    "center",
    "left",
    "right",
    "top"
  ],
  "background-repeat": [
    "no-repeat",
    "repeat",
    "repeat-x",
    "repeat-y",
    "round",
    "space"
  ],
  "background-size": [
    "<length-percentage [0,∞]>",
    "auto",
    "contain",
    "cover"
  ],
  "base": [
    "href",
    "target"
  ],
  "baseline-shift": [
    "<length>",
    "<percentage>",
    "baseline",
    "bottom",
    "center",
    "sub",
    "super",
    "top"
  ],
  "baseline-source": [
    "auto",
    "first",
    "last"
  ],
  "basic URL parser": [
    "state override",
    "url"
  ],
  "blob URL": [
    "resolve"
  ],
  "blob URL entry": [
    "environment",
    "object"
  ],
  "blob url": [
    "lifetime",
    "lifetime stipulation"
  ],
  "blob url store": [
    "add an entry",
    "add an entry to the blob url store",
    "add the entry",
    "add the entry to the blob url store",
    "adding an entry to the blob url store",
    "remove an entry",
    "remove an entry from the blob url store",
    "remove the entry",
    "remove the entry from the blob url store"
  ],
  "block-ellipsis": [
    "<string>",
    "auto",
    "none"
  ],
  "block-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "block-step-align": [
    "auto",
    "center",
    "down",
    "end",
    "nearest",
    "start",
    "up"
  ],
  "block-step-insert": [
    "margin",
    "padding"
  ],
  "blockquote": [
    "cite"
  ],
  "body": [
    "alink",
    "bgcolor",
    "bottommargin",
    "clone",
    "fully read",
    "incrementally read",
    "leftmargin",
    "length",
    "link",
    "marginheight",
    "marginwidth",
    "rightmargin",
    "source",
    "stream",
    "text",
    "topmargin",
    "vlink"
  ],
  "bookmark-label": [
    "<content-list>"
  ],
  "bookmark-level": [
    "<integer>",
    "none"
  ],
  "bookmark-state": [
    "closed",
    "open"
  ],
  "border": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "medium",
    "none",
    "outset",
    "ridge",
    "solid",
    "thick",
    "thin"
  ],
  "border-bottom-color": [
    "<color>",
    "transparent"
  ],
  "border-bottom-style": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "border-bottom-width": [
    "medium",
    "thick",
    "thin"
  ],
  "border-bottom-wight": [
    "<length>",
    "medium",
    "thick",
    "thin"
  ],
  "border-collapse": [
    "collapse",
    "separate"
  ],
  "border-color": [
    "<color>",
    "logical",
    "transparent"
  ],
  "border-image-repeat": [
    "repeat",
    "round",
    "space",
    "stretch"
  ],
  "border-image-slice": [
    "<number [0,∞]>",
    "<percentage [0,∞]>",
    "fill"
  ],
  "border-image-width": [
    "<length-percentage [0,∞]>",
    "<number [0,∞]>",
    "auto"
  ],
  "border-left-color": [
    "<color>",
    "transparent"
  ],
  "border-left-style": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "border-left-width": [
    "<length>",
    "medium",
    "thick",
    "thin"
  ],
  "border-limit": [
    "bottom",
    "corners",
    "left",
    "right",
    "sides",
    "top"
  ],
  "border-right-color": [
    "<color>",
    "transparent"
  ],
  "border-right-style": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "border-right-width": [
    "<length>",
    "medium",
    "thick",
    "thin"
  ],
  "border-style": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "logical",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "border-top-color": [
    "<color>",
    "transparent"
  ],
  "border-top-style": [
    "dashed",
    "dotted",
    "double",
    "groove",
    "hidden",
    "inset",
    "none",
    "outset",
    "ridge",
    "solid"
  ],
  "border-top-width": [
    "<length>",
    "medium",
    "thick",
    "thin"
  ],
  "border-width": [
    "<length>",
    "logical",
    "medium",
    "thick",
    "thin"
  ],
  "bottom": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "boundary point": [
    "after",
    "before",
    "equal",
    "node",
    "offset",
    "position"
  ],
  "box": [
    "[[layoutChildMap]]"
  ],
  "box-decoration-break": [
    "clone",
    "slice"
  ],
  "box-shadow": [
    "<color>",
    "inset",
    "none"
  ],
  "box-sizing": [
    "border-box",
    "content-box"
  ],
  "box-snap": [
    "baseline",
    "block-end",
    "block-start",
    "center",
    "first-baseline",
    "last-baseline",
    "none"
  ],
  "br": [
    "clear"
  ],
  "break-after": [
    "all",
    "always",
    "auto",
    "avoid",
    "avoid-column",
    "avoid-page",
    "avoid-region",
    "column",
    "left",
    "page",
    "recto",
    "region",
    "right",
    "verso"
  ],
  "break-before": [
    "all",
    "always",
    "auto",
    "avoid",
    "avoid-column",
    "avoid-page",
    "avoid-region",
    "column",
    "left",
    "page",
    "recto",
    "region",
    "right",
    "verso"
  ],
  "break-inside": [
    "auto",
    "avoid",
    "avoid-column",
    "avoid-page",
    "avoid-region"
  ],
  "browsing context": [
    "active window",
    "container document",
    "required csp"
  ],
  "browsing session": [
    "storage shed"
  ],
  "buffer state": [
    "destroyed",
    "mapped",
    "mapped at creation",
    "mapping pending",
    "unmapped"
  ],
  "button": [
    "action",
    "autocomplete",
    "dirname",
    "disabled",
    "enctype",
    "form",
    "formaction",
    "formenctype",
    "formmethod",
    "formnovalidate",
    "formtarget",
    "method",
    "name",
    "novalidate",
    "target",
    "type",
    "value"
  ],
  "button/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "button/enctype": [
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ],
  "button/method": [
    "dialog",
    "get",
    "post"
  ],
  "button/type": [
    "button",
    "reset",
    "submit"
  ],
  "byte": [
    "percent-encode",
    "value"
  ],
  "byte sequence": [
    "length",
    "percent-decode",
    "prefix",
    "starts with"
  ],
  "cache batch operation": [
    "options",
    "request",
    "response",
    "type"
  ],
  "cache entry": [
    "byte-serialized origin",
    "credentials",
    "header name",
    "ip address space",
    "key",
    "max-age",
    "method",
    "url"
  ],
  "calc()": [
    "-infinity",
    "calculation",
    "e",
    "infinity",
    "nan",
    "pi"
  ],
  "calculation tree": [
    "calc-operator nodes",
    "operator nodes"
  ],
  "canvas": [
    "height",
    "requiredextensions",
    "systemlanguage",
    "width"
  ],
  "caption": [
    "align"
  ],
  "caption-side": [
    "bottom",
    "top"
  ],
  "caret-shape": [
    "auto",
    "bar",
    "block",
    "underscore"
  ],
  "certificate": [
    "extensions",
    "public key"
  ],
  "certificate chain": [
    "does not have a trusted leaf",
    "has a trusted leaf",
    "leaf"
  ],
  "circle": [
    "requiredextensions",
    "systemlanguage"
  ],
  "clear": [
    "all",
    "block-end",
    "block-start",
    "both",
    "both-block",
    "both-inline",
    "bottom",
    "inline-end",
    "inline-start",
    "left",
    "none",
    "right",
    "top"
  ],
  "client": [
    "endpoint-groups",
    "origin"
  ],
  "clip": [
    "<bottom>",
    "<left>",
    "<right>",
    "<top>",
    "auto",
    "rect()"
  ],
  "clip-path": [
    "fill-box",
    "stroke-box",
    "view-box"
  ],
  "clip-rule": [
    "evenodd",
    "nonzero"
  ],
  "clipPath": [
    "clippathunits",
    "requiredextensions",
    "systemlanguage"
  ],
  "clipPathUnits": [
    "objectboundingbox",
    "userspaceonuse"
  ],
  "code point": [
    "utf-8 percent-encode",
    "value"
  ],
  "col": [
    "align",
    "char",
    "charoff",
    "span",
    "valign",
    "width"
  ],
  "colgroup": [
    "span"
  ],
  "collection": [
    "live collection",
    "represented by the collection",
    "static collection"
  ],
  "color()": [
    "a98-rgb",
    "b",
    "display-p3",
    "g",
    "prophoto-rgb",
    "r",
    "rec2020",
    "srgb",
    "x",
    "xyz",
    "y",
    "z"
  ],
  "color-contrast()": [
    "aa",
    "aa-large",
    "aaa",
    "aaa-large"
  ],
  "color-interpolation-filters": [
    "auto",
    "linearrgb",
    "srgb"
  ],
  "color-scheme": [
    "<custom-ident>",
    "dark",
    "light",
    "normal",
    "only"
  ],
  "column-count": [
    "<integer [1,∞]>",
    "auto"
  ],
  "column-fill": [
    "auto",
    "balance",
    "balance-all"
  ],
  "column-gap": [
    "normal"
  ],
  "column-rule-color": [
    "<color>"
  ],
  "column-span": [
    "<integer [1,∞]>",
    "all",
    "auto",
    "none"
  ],
  "column-width": [
    "<length [0,∞]>",
    "auto",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content"
  ],
  "command": [
    "command name",
    "command parameters",
    "command type",
    "event parameters.",
    "result type",
    "set of all command names"
  ],
  "commands": [
    "browsingcontext.gettree",
    "script.getrealms",
    "session.status",
    "session.subscribe",
    "session.unsubscribe"
  ],
  "compute shader stage": [
    "workgroup"
  ],
  "computed plane layout": [
    "destinationoffset",
    "destinationstride",
    "sourceheight",
    "sourceleftbytes",
    "sourcetop",
    "sourcewidthbytes"
  ],
  "configuration point": [
    "default value",
    "name",
    "range",
    "type"
  ],
  "conic-gradient()": [
    "<angle>",
    "<position>",
    "gradient center"
  ],
  "connection": [
    "close pending flag",
    "closed",
    "credentials",
    "ip address space",
    "key",
    "object store set",
    "origin",
    "timing info",
    "version",
    "versionchange"
  ],
  "connection timing info": [
    "alpn negotiated protocol",
    "connection end time",
    "connection start time",
    "domain lookup end time",
    "domain lookup start time",
    "secure connection start time"
  ],
  "console": [
    "assert()",
    "assert(condition)",
    "assert(condition, ...data)",
    "clear()",
    "count()",
    "count(label)",
    "countReset()",
    "countReset(label)",
    "debug()",
    "debug(...data)",
    "dir()",
    "dir(item)",
    "dir(item, options)",
    "dirxml()",
    "dirxml(...data)",
    "error()",
    "error(...data)",
    "group()",
    "group(...data)",
    "groupCollapsed()",
    "groupCollapsed(...data)",
    "groupEnd()",
    "info()",
    "info(...data)",
    "log()",
    "log(...data)",
    "table()",
    "table(tabularData)",
    "table(tabularData, properties)",
    "time()",
    "time(label)",
    "timeEnd()",
    "timeEnd(label)",
    "timeLog()",
    "timeLog(label)",
    "timeLog(label, ...data)",
    "trace()",
    "trace(...data)",
    "warn()",
    "warn(...data)"
  ],
  "console/assert()": [
    "condition",
    "data"
  ],
  "console/assert(condition)": [
    "condition",
    "data"
  ],
  "console/assert(condition, ...data)": [
    "condition",
    "data"
  ],
  "console/count()": [
    "label"
  ],
  "console/count(label)": [
    "label"
  ],
  "console/countReset()": [
    "label"
  ],
  "console/countReset(label)": [
    "label"
  ],
  "console/debug()": [
    "data"
  ],
  "console/debug(...data)": [
    "data"
  ],
  "console/dir()": [
    "item",
    "options"
  ],
  "console/dir(item)": [
    "item",
    "options"
  ],
  "console/dir(item, options)": [
    "item",
    "options"
  ],
  "console/dirxml()": [
    "data"
  ],
  "console/dirxml(...data)": [
    "data"
  ],
  "console/error()": [
    "data"
  ],
  "console/error(...data)": [
    "data"
  ],
  "console/group()": [
    "data"
  ],
  "console/group(...data)": [
    "data"
  ],
  "console/groupCollapsed()": [
    "data"
  ],
  "console/groupCollapsed(...data)": [
    "data"
  ],
  "console/info()": [
    "data"
  ],
  "console/info(...data)": [
    "data"
  ],
  "console/log()": [
    "data"
  ],
  "console/log(...data)": [
    "data"
  ],
  "console/table()": [
    "properties",
    "tabularData"
  ],
  "console/table(tabularData)": [
    "properties",
    "tabularData"
  ],
  "console/table(tabularData, properties)": [
    "properties",
    "tabularData"
  ],
  "console/time()": [
    "label"
  ],
  "console/time(label)": [
    "label"
  ],
  "console/timeEnd()": [
    "label"
  ],
  "console/timeEnd(label)": [
    "label"
  ],
  "console/timeLog()": [
    "data",
    "label"
  ],
  "console/timeLog(label)": [
    "data",
    "label"
  ],
  "console/timeLog(label, ...data)": [
    "data",
    "label"
  ],
  "console/trace()": [
    "data"
  ],
  "console/trace(...data)": [
    "data"
  ],
  "console/warn()": [
    "data"
  ],
  "console/warn(...data)": [
    "data"
  ],
  "contacts source": [
    "available contacts",
    "supported properties"
  ],
  "contain": [
    "content",
    "layout",
    "none",
    "paint",
    "size",
    "strict",
    "style"
  ],
  "contain-intrinsic-block-size": [
    "<length>",
    "auto && <length>",
    "auto <length>",
    "none"
  ],
  "contain-intrinsic-height": [
    "<length>",
    "auto && <length>",
    "auto <length>",
    "none"
  ],
  "contain-intrinsic-inline-size": [
    "<length>",
    "auto && <length>",
    "auto <length>",
    "none"
  ],
  "contain-intrinsic-size": [
    "<length>",
    "auto && <length>",
    "auto <length>",
    "none"
  ],
  "contain-intrinsic-width": [
    "<length>",
    "auto && <length>",
    "auto <length>",
    "none"
  ],
  "content": [
    "/ [ <string> | <counter> ]+",
    "<content-list>",
    "<content-replacement>",
    "<counter>",
    "<string>",
    "<uri>",
    "attr(x)",
    "close-quote",
    "contents",
    "leader()",
    "no-close-quote",
    "no-open-quote",
    "none",
    "normal",
    "open-quote"
  ],
  "content index entry": [
    "description",
    "icons",
    "launch url",
    "service worker registration"
  ],
  "content security policy object": [
    "intersection"
  ],
  "content()": [
    "after",
    "before",
    "first-letter",
    "marker",
    "text"
  ],
  "content-visibility": [
    "auto",
    "hidden",
    "visible"
  ],
  "continue": [
    "-webkit-discard",
    "auto",
    "discard",
    "fragments",
    "overflow",
    "paginate"
  ],
  "contrast ratio": [
    "high contrast ratio"
  ],
  "cookie": [
    "creation-time",
    "domain",
    "expiry-time",
    "host-only-flag",
    "http-only-flag",
    "last-access-time",
    "name",
    "path",
    "persistent-flag",
    "same-site-flag",
    "secure-only-flag",
    "value"
  ],
  "cookie change subscription": [
    "name",
    "url"
  ],
  "core-attributes": [
    "autofocus",
    "class",
    "id",
    "lang",
    "style",
    "tabindex",
    "xml:space"
  ],
  "corner-shape": [
    "angle",
    "round"
  ],
  "counter()": [
    "list-item"
  ],
  "counter-increment": [
    "list-item",
    "none"
  ],
  "counter-reset": [
    "<counter-name> <integer>?",
    "<reversed-counter-name> <integer>?",
    "list-item",
    "none"
  ],
  "counter-set": [
    "list-item"
  ],
  "counter-set counter-increment": [
    "<counter-name> <integer>?",
    "none"
  ],
  "counters()": [
    "list-item"
  ],
  "create": [
    "candidate authenticator",
    "selected authenticator"
  ],
  "credential": [
    "effective"
  ],
  "credential id": [
    "looking up"
  ],
  "credential store": [
    "Modify a credential",
    "Retrieve a list of credentials",
    "Store a credential"
  ],
  "credentialCreationData": [
    "attestationconveyancepreferenceoption",
    "attestationobjectresult",
    "clientdatajsonresult",
    "clientextensionresults"
  ],
  "css": [
    "ignored",
    "invalid"
  ],
  "cubic-bezier-easing-function": [
    "cubic-bezier()",
    "ease",
    "ease-in",
    "ease-in-out",
    "ease-out"
  ],
  "cue-after": [
    "<uri>"
  ],
  "cue-before": [
    "<uri>"
  ],
  "cursor": [
    "alias",
    "all-scroll",
    "auto",
    "cell",
    "col-resize",
    "context-menu",
    "copy",
    "crosshair",
    "default",
    "direction",
    "e-resize",
    "effective key",
    "effective object store",
    "ew-resize",
    "got value flag",
    "grab",
    "grabbing",
    "help",
    "key",
    "key only flag",
    "move",
    "n-resize",
    "ne-resize",
    "nesw-resize",
    "no-drop",
    "none",
    "not-allowed",
    "ns-resize",
    "nw-resize",
    "nwse-resize",
    "object store position",
    "pointer",
    "position",
    "progress",
    "range",
    "request",
    "row-resize",
    "s-resize",
    "se-resize",
    "source",
    "sw-resize",
    "text",
    "transaction",
    "value",
    "vertical-text",
    "w-resize",
    "wait",
    "zoom-in",
    "zoom-out"
  ],
  "custom element definition": [
    "constructor",
    "disable shadow",
    "local name",
    "name"
  ],
  "custom highlight": [
    "name"
  ],
  "data": [
    "value"
  ],
  "data: URL struct": [
    "body",
    "mime type"
  ],
  "database": [
    "name",
    "upgrade transaction",
    "version"
  ],
  "default asynchronous iterator object": [
    "is finished",
    "kind",
    "ongoing promise",
    "target"
  ],
  "default iterator object": [
    "index",
    "kind",
    "target"
  ],
  "del": [
    "cite",
    "datetime"
  ],
  "descent-override!!descriptor": [
    "<percentage>",
    "normal"
  ],
  "destination": [
    "translate"
  ],
  "details": [
    "open"
  ],
  "device": [
    "[[adapter]]",
    "[[features]]",
    "[[limits]]"
  ],
  "dfn": [
    "title"
  ],
  "dialog": [
    "open"
  ],
  "dictionary": [
    "inherit"
  ],
  "dictionary member": [
    "default value",
    "optional",
    "required"
  ],
  "direction": [
    "ltr",
    "rtl"
  ],
  "directive": [
    "contains",
    "initialization",
    "inline check",
    "name",
    "navigation response check",
    "post-request check",
    "pre-navigation check",
    "pre-request check",
    "value"
  ],
  "directory": [
    "name"
  ],
  "directory entry": [
    "children"
  ],
  "discard": [
    "onbegin",
    "onend",
    "onrepeat",
    "requiredextensions",
    "systemlanguage"
  ],
  "display": [
    "block",
    "contents",
    "flex",
    "flow",
    "flow-root",
    "grid",
    "inline",
    "inline-block",
    "inline-flex",
    "inline-grid",
    "inline-table",
    "layout()",
    "list-item",
    "none",
    "ruby",
    "ruby-base",
    "ruby-base-container",
    "ruby-text",
    "ruby-text-container",
    "run-in",
    "table",
    "table-caption",
    "table-cell",
    "table-column",
    "table-column-group",
    "table-footer-group",
    "table-header-group",
    "table-row",
    "table-row-group"
  ],
  "distortioncoefficients": [
    "k1",
    "k2",
    "k3",
    "p1",
    "p2"
  ],
  "div": [
    "align"
  ],
  "dl": [
    "compact"
  ],
  "document": [
    "allowtextfragmentdirective",
    "document.exitpointerlock",
    "document.exitpointerlock()",
    "document.onpointerlockchange",
    "document.onpointerlockerror",
    "exitpointerlock",
    "exitpointerlock()",
    "onpointerlockchange",
    "onpointerlockerror",
    "textfragmenttoken"
  ],
  "document animator definition": [
    "stateful flag"
  ],
  "document layout definition": [
    "child input properties",
    "input properties",
    "layout options"
  ],
  "document load timing info": [
    "dom complete time",
    "dom content loaded event end time",
    "dom content loaded event start time",
    "dom interactive time",
    "load event end time",
    "load event start time"
  ],
  "document paint definition": [
    "input argument syntaxes",
    "input properties",
    "paintrenderingcontext2dsettings object"
  ],
  "document unload timing info": [
    "unload event end time",
    "unload event start time"
  ],
  "documentorshadowroot": [
    "documentorshadowroot.pointerlockelement",
    "pointerlockelement"
  ],
  "dominant-baseline": [
    "alphabetic",
    "auto",
    "central",
    "hanging",
    "ideographic",
    "mathematical",
    "middle",
    "text-bottom",
    "text-top"
  ],
  "easing-function": [
    "linear"
  ],
  "edgeMode": [
    "duplicate",
    "wrap"
  ],
  "effective overload set tuple": [
    "callable"
  ],
  "element": [
    "element.requestpointerlock",
    "element.requestpointerlock()",
    "forwarded part name list",
    "part name list",
    "part name map",
    "requestpointerlock",
    "requestpointerlock()"
  ],
  "ellipse": [
    "requiredextensions",
    "systemlanguage"
  ],
  "embed": [
    "align",
    "height",
    "hspace",
    "name",
    "src",
    "type",
    "vspace",
    "width"
  ],
  "embedder policy": [
    "report only reporting endpoint",
    "report only value",
    "reporting endpoint",
    "value"
  ],
  "embedder policy value": [
    "require-corp",
    "unsafe-none"
  ],
  "empty-cells": [
    "hide",
    "show"
  ],
  "encoder state": [
    "closed",
    "encoding a compute pass",
    "encoding a render pass",
    "open"
  ],
  "encoding": [
    "label",
    "name"
  ],
  "endofstreamerror": [
    "decode",
    "network"
  ],
  "endpoint": [
    "failures",
    "name",
    "pending",
    "priority",
    "retry_after",
    "url",
    "weight"
  ],
  "endpoint group": [
    "creation",
    "endpoints",
    "expired",
    "name",
    "subdomains",
    "ttl"
  ],
  "entry": [
    "file system",
    "name",
    "parent",
    "resolve",
    "root",
    "the same as"
  ],
  "env()": [
    "safe-area-inset-bottom",
    "safe-area-inset-left",
    "safe-area-inset-right",
    "safe-area-inset-top"
  ],
  "environment": [
    "active service worker",
    "creation url",
    "execution ready flag",
    "id",
    "target browsing context",
    "top-level creation url",
    "top-level origin"
  ],
  "environment settings object": [
    "api base url",
    "api url character encoding",
    "browsing session",
    "client hints set",
    "cross-origin isolated capability",
    "global object",
    "import map",
    "module map",
    "origin",
    "policy container",
    "realm",
    "realm execution context",
    "responsible document",
    "responsible event loop",
    "service worker object map",
    "service worker registration object map"
  ],
  "event": [
    "browsing context event map",
    "event name",
    "event type",
    "global event set",
    "in the default event set"
  ],
  "event listener": [
    "callback",
    "capture",
    "once",
    "passive",
    "removed",
    "signal",
    "type"
  ],
  "exception": [
    "created",
    "error name",
    "message",
    "throw"
  ],
  "exchange": [
    "request url",
    "response"
  ],
  "exchange signature": [
    "certificate chain",
    "certsha256",
    "date",
    "does not establish cross-origin trust",
    "establishes cross-origin trust",
    "expiration time",
    "integrity header",
    "is not valid",
    "is valid",
    "signature",
    "validityurl",
    "validityurlbytes"
  ],
  "extended attribute": [
    "takes a named argument list",
    "takes an argument list",
    "takes an identifier",
    "takes an identifier list",
    "takes no arguments"
  ],
  "extended attributes": [
    "applicable to types"
  ],
  "external application resource": [
    "fingerprints",
    "id",
    "min_version",
    "platform",
    "url"
  ],
  "feBlend": [
    "in2",
    "mode",
    "no-composite"
  ],
  "feColorMatrix": [
    "type",
    "values"
  ],
  "feComponentTransfer": [
    "amplitude",
    "exponent",
    "intercept",
    "offset",
    "slope",
    "tablevalues",
    "type"
  ],
  "feComposite": [
    "in2",
    "k1",
    "k2",
    "k3",
    "k4",
    "operator"
  ],
  "feConvolveMatrix": [
    "bias",
    "divisor",
    "edgemode",
    "kernelmatrix",
    "kernelunitlength",
    "order",
    "preservealpha",
    "targetx",
    "targety"
  ],
  "feDiffuseLighting": [
    "diffuseconstant",
    "kernelunitlength",
    "surfacescale"
  ],
  "feDisplacementMap": [
    "in2",
    "scale",
    "xchannelselector",
    "ychannelselector"
  ],
  "feDistantLight": [
    "azimuth",
    "elevation"
  ],
  "feDropShadow": [
    "dx",
    "dy",
    "stddeviation"
  ],
  "feGaussianBlur": [
    "edgemode",
    "stddeviation"
  ],
  "feImage": [
    "crossorigin",
    "href",
    "preserveaspectratio",
    "xlink:href"
  ],
  "feMorphology": [
    "operator",
    "radius"
  ],
  "feOffset": [
    "dx",
    "dy"
  ],
  "fePointLight": [
    "x",
    "y",
    "z"
  ],
  "feSpecularLighting": [
    "kernelunitlength",
    "specularconstant",
    "specularexponent",
    "surfacescale"
  ],
  "feSpotLight": [
    "limitingconeangle",
    "pointsatx",
    "pointsaty",
    "pointsatz",
    "specularexponent",
    "x",
    "y",
    "z"
  ],
  "feTurbulence": [
    "basefrequency",
    "numoctaves",
    "seed",
    "stitchtiles",
    "type"
  ],
  "feature descriptor": [
    "dom-overlay",
    "hand-tracking",
    "layers",
    "light-estimation"
  ],
  "fetch": [
    "fetch group",
    "processrequestbody",
    "processrequestendofbody",
    "processresponse",
    "processresponsedone",
    "processresponseendofbody",
    "resumed",
    "suspend",
    "terminated",
    "useparallelqueue"
  ],
  "fetch group": [
    "fetch record",
    "terminated"
  ],
  "fetch params": [
    "cross-origin isolated capability",
    "process request body",
    "process request end-of-body",
    "process response",
    "process response done",
    "process response end-of-body",
    "request",
    "task destination",
    "timing info"
  ],
  "fetch record": [
    "fetch",
    "request"
  ],
  "fetch timing info": [
    "decoded body size",
    "encoded body size",
    "end time",
    "final connection timing info",
    "final network-request start time",
    "final network-response start time",
    "final service worker start time",
    "post-redirect start time",
    "redirect end time",
    "redirect start time",
    "start time"
  ],
  "fetching scripts": [
    "is top-level",
    "perform the fetch"
  ],
  "fieldset": [
    "autocomplete",
    "dirname",
    "disabled",
    "form",
    "name"
  ],
  "fieldset/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "file": [
    "name"
  ],
  "file entry": [
    "binary data",
    "modification timestamp"
  ],
  "file system": [
    "name",
    "root"
  ],
  "fill-origin": [
    "border-box",
    "content-box",
    "fill-box",
    "match-parent",
    "padding-box",
    "stroke-box"
  ],
  "fill-rule": [
    "evenodd",
    "nonzero"
  ],
  "filter": [
    "<url>",
    "blur()",
    "brightness()",
    "contrast()",
    "drop-shadow()",
    "filterres",
    "filterunits",
    "grayscale()",
    "height",
    "hue-rotate()",
    "invert()",
    "opacity()",
    "primitiveunits",
    "saturate()",
    "sepia()",
    "width",
    "x",
    "y"
  ],
  "filter-primitive": [
    "height",
    "in",
    "result",
    "width",
    "x",
    "y"
  ],
  "filterUnits": [
    "objectboundingbox",
    "userspaceonuse"
  ],
  "filtered response": [
    "internal response"
  ],
  "fingerprint": [
    "type",
    "value"
  ],
  "flex": [
    "-webkit-box",
    "-webkit-flex",
    "-webkit-inline-box",
    "-webkit-inline-flex",
    "<'flex-basis'>",
    "<'flex-grow'>",
    "<'flex-shrink'>",
    "<‘flex-basis’>",
    "<‘flex-grow’>",
    "<‘flex-shrink’>",
    "flex basis",
    "flex grow factor",
    "flex shrink factor",
    "none"
  ],
  "flex-basis": [
    "auto",
    "content"
  ],
  "flex-direction": [
    "column",
    "column-reverse",
    "row",
    "row-reverse"
  ],
  "flex-grow": [
    "<number>"
  ],
  "flex-shrink": [
    "<number>"
  ],
  "flex-wrap": [
    "nowrap",
    "wrap",
    "wrap-reverse"
  ],
  "float": [
    "block-end",
    "block-start",
    "bottom",
    "footnote",
    "inline-end",
    "inline-start",
    "left",
    "none",
    "right",
    "snap-block",
    "snap-block()",
    "snap-block(<length> [, start | end | near ]?)",
    "snap-inline",
    "snap-inline()",
    "snap-inline(<length> [, left | right | near ]?)",
    "top"
  ],
  "float-reference": [
    "column",
    "inline",
    "page",
    "region"
  ],
  "font": [
    "caption",
    "icon",
    "menu",
    "message-box",
    "small-caption",
    "status-bar"
  ],
  "font representation": [
    "data bytes",
    "italic property",
    "metrics table",
    "name string",
    "name table",
    "stretch property",
    "table list",
    "weight property"
  ],
  "font table": [
    "tag"
  ],
  "font-family": [
    "cursive",
    "emoji",
    "fangsong",
    "fantasy",
    "math",
    "monospace",
    "sans-serif",
    "serif",
    "system-ui",
    "ui-monospace",
    "ui-rounded",
    "ui-sans-serif",
    "ui-serif",
    "xxx"
  ],
  "font-feature-settings": [
    "<feature-tag-value>",
    "normal"
  ],
  "font-kerning": [
    "auto",
    "none",
    "normal"
  ],
  "font-language override": [
    "normal"
  ],
  "font-language-override": [
    "<string>"
  ],
  "font-optical-sizing": [
    "auto",
    "none"
  ],
  "font-palette": [
    "<palette-identifier>",
    "dark",
    "light",
    "none",
    "normal"
  ],
  "font-size": [
    "<absolute-size>",
    "<length-percentage>",
    "<relative-size>",
    "large",
    "medium",
    "small",
    "x-large",
    "x-small",
    "xx-large",
    "xx-small"
  ],
  "font-size-adjust": [
    "<number>",
    "aspect value",
    "cap-height",
    "ch-width",
    "ex-height",
    "ex-height | cap-height | ch-width | ic-width | ic-height",
    "from-font",
    "ic-height",
    "ic-width",
    "none"
  ],
  "font-stretch": [
    "<percentage>",
    "condensed",
    "expanded",
    "extra-condensed",
    "extra-expanded",
    "normal",
    "semi-condensed",
    "semi-expanded",
    "ultra-condensed",
    "ultra-expanded"
  ],
  "font-style": [
    "italic",
    "normal",
    "oblique",
    "oblique <angle>?",
    "small-caps"
  ],
  "font-synthesis-small-caps": [
    "auto",
    "none"
  ],
  "font-synthesis-style": [
    "auto",
    "none"
  ],
  "font-synthesis-weight": [
    "auto",
    "none"
  ],
  "font-variant": [
    "none",
    "normal"
  ],
  "font-variant-alternates": [
    "annotation(<feature-value-name>)",
    "character-variant(<feature-value-name>#)",
    "historical-forms",
    "normal",
    "ornaments(<feature-value-name>)",
    "styleset(<feature-value-name>#)",
    "stylistic(<feature-value-name>)",
    "swash(<feature-value-name>)"
  ],
  "font-variant-caps": [
    "all-petite-caps",
    "all-small-caps",
    "normal",
    "petite-caps",
    "small-caps",
    "titling-caps",
    "unicase"
  ],
  "font-variant-east-asian": [
    "full-width",
    "jis04",
    "jis78",
    "jis83",
    "jis90",
    "normal",
    "proportional-width",
    "ruby",
    "simplified",
    "traditional"
  ],
  "font-variant-emoji": [
    "auto",
    "emoji",
    "text",
    "unicode"
  ],
  "font-variant-ligatures": [
    "common-ligatures",
    "contextual",
    "discretionary-ligatures",
    "historical-ligatures",
    "no-common-ligatures",
    "no-contextual",
    "no-discretionary-ligatures",
    "no-historical-ligatures",
    "none",
    "normal"
  ],
  "font-variant-numeric": [
    "diagonal-fractions",
    "lining-nums",
    "normal",
    "oldstyle-nums",
    "ordinal",
    "proportional-nums",
    "slashed-zero",
    "stacked-fractions",
    "tabular-nums"
  ],
  "font-variant-position": [
    "normal",
    "sub",
    "super"
  ],
  "font-weight": [
    "<number [1,1000]>",
    "bold",
    "bolder",
    "lighter",
    "normal"
  ],
  "footnote-display": [
    "block",
    "compact",
    "inline"
  ],
  "footnote-policy": [
    "auto",
    "block",
    "line"
  ],
  "forced-color-adjust": [
    "auto",
    "none",
    "preserve-parent-color"
  ],
  "foreignObject": [
    "requiredextensions",
    "systemlanguage"
  ],
  "form": [
    "accept",
    "accept-charset",
    "action",
    "autocomplete",
    "enctype",
    "formaction",
    "formenctype",
    "formmethod",
    "formnovalidate",
    "formtarget",
    "method",
    "name",
    "novalidate",
    "rel",
    "target"
  ],
  "form-associated custom elements": [
    "readonly"
  ],
  "form/enctype": [
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ],
  "form/method": [
    "dialog",
    "get",
    "post"
  ],
  "form/rel": [
    "external",
    "help",
    "license",
    "next",
    "nofollow",
    "noopener",
    "noreferrer",
    "opener",
    "prev",
    "search"
  ],
  "from I/O queue": [
    "convert"
  ],
  "function": [
    "function"
  ],
  "g": [
    "requiredextensions",
    "systemlanguage"
  ],
  "gap": [
    "normal"
  ],
  "global": [
    "class",
    "id",
    "slot"
  ],
  "global object": [
    "csp list",
    "realm"
  ],
  "grid": [
    "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?",
    "[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>"
  ],
  "grid-auto-flow": [
    "column",
    "dense",
    "row"
  ],
  "grid-column-end": [
    "<grid-line>"
  ],
  "grid-column-start": [
    "<grid-line>"
  ],
  "grid-row-end": [
    "<grid-line>"
  ],
  "grid-row-start": [
    "<grid-line>"
  ],
  "grid-template": [
    "<'grid-template-rows'> / <'grid-template-columns'>",
    "[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
    "none"
  ],
  "grid-template-areas": [
    "<string>+",
    "named cell token",
    "none",
    "null cell token",
    "trash token"
  ],
  "grid-template-columns": [
    "<flex>",
    "<length-percentage>",
    "<track-list> | <auto-track-list>",
    "auto",
    "fit-content()",
    "flex factor",
    "max-content",
    "min-content",
    "minmax()",
    "none",
    "sizing function",
    "subgrid",
    "subgrid <line-name-list>?",
    "track sizing function"
  ],
  "grid-template-rows": [
    "<flex>",
    "<length-percentage>",
    "<track-list> | <auto-track-list>",
    "auto",
    "fit-content()",
    "flex factor",
    "max-content",
    "min-content",
    "minmax()",
    "none",
    "sizing function",
    "subgrid",
    "subgrid <line-name-list>?",
    "track sizing function"
  ],
  "h1": [
    "align"
  ],
  "h2": [
    "align"
  ],
  "h3": [
    "align"
  ],
  "h4": [
    "align"
  ],
  "h5": [
    "align"
  ],
  "h6": [
    "align"
  ],
  "hanging-punctuation": [
    "allow-end",
    "first",
    "force-end",
    "last",
    "none"
  ],
  "head": [
    "profile"
  ],
  "header": [
    "name",
    "value"
  ],
  "header list": [
    "append",
    "combine",
    "contains",
    "delete",
    "does not contain",
    "extract a length",
    "extract a mime type",
    "extracting a length",
    "extracting a mime type",
    "get",
    "get a structured field value",
    "get, decode, and split",
    "getting, decoding, and splitting",
    "set",
    "set a structured field value",
    "sort and combine"
  ],
  "header/value": [
    "normalize"
  ],
  "height": [
    "<length-percentage>",
    "auto",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "stretch"
  ],
  "host": [
    "equal",
    "public suffix",
    "registrable domain"
  ],
  "hr": [
    "align",
    "color",
    "noshade",
    "size",
    "width"
  ],
  "hsl()": [
    "alpha",
    "h",
    "l",
    "s"
  ],
  "html": [
    "manifest",
    "version"
  ],
  "html-global": [
    "accesskey",
    "autocapitalize",
    "autofocus",
    "contenteditable",
    "dir",
    "draggable",
    "enterkeyhint",
    "exportparts",
    "hidden",
    "inputmode",
    "is",
    "itemid",
    "itemprop",
    "itemref",
    "itemscope",
    "itemtype",
    "lang",
    "part",
    "spellcheck",
    "style",
    "title",
    "translate"
  ],
  "html-global/autocapitalize": [
    "characters",
    "none",
    "off",
    "on",
    "sentences",
    "words"
  ],
  "html-global/dir": [
    "auto",
    "ltr",
    "rtl"
  ],
  "html-global/enterkeyhint": [
    "done",
    "enter",
    "go",
    "next",
    "previous",
    "search",
    "send"
  ],
  "html-global/inputmode": [
    "decimal",
    "email",
    "none",
    "numeric",
    "search",
    "tel",
    "text",
    "url"
  ],
  "htmlinputelement": [
    "capture"
  ],
  "htmlmediaelement": [
    "disableremoteplayback",
    "mediakeys",
    "onencrypted",
    "onwaitingforkey",
    "remote",
    "setmediakeys",
    "setmediakeys()"
  ],
  "htmlsvg-global": [
    "nonce",
    "tabindex"
  ],
  "hwb()": [
    "alpha",
    "b",
    "h",
    "w"
  ],
  "hyphenate-character": [
    "<string>",
    "auto"
  ],
  "hyphenate-limit-chars": [
    "auto"
  ],
  "hyphenate-limit-lines": [
    "always",
    "column",
    "none",
    "page",
    "spread"
  ],
  "hyphens": [
    "auto",
    "manual",
    "none"
  ],
  "idledeadline": [
    "didtimeout",
    "timeremaining",
    "timeremaining()"
  ],
  "idlerequestoptions": [
    "timeout"
  ],
  "iframe": [
    "align",
    "allow",
    "allowfullscreen",
    "allowtransparency",
    "csp",
    "frameborder",
    "framespacing",
    "height",
    "hspace",
    "loading",
    "longdesc",
    "marginheight",
    "marginwidth",
    "name",
    "policy object",
    "referrerpolicy",
    "requiredextensions",
    "sandbox",
    "scrolling",
    "src",
    "srcdoc",
    "systemlanguage",
    "vspace",
    "width"
  ],
  "iframe/csp": [
    "valid attribute value"
  ],
  "iframe/loading": [
    "eager",
    "lazy"
  ],
  "iframe/sandbox": [
    "allow-downloads",
    "allow-forms",
    "allow-modals",
    "allow-orientation-lock",
    "allow-pointer-lock",
    "allow-popups",
    "allow-popups-to-escape-sandbox",
    "allow-presentation",
    "allow-same-origin",
    "allow-scripts",
    "allow-secure-context",
    "allow-storage-access-by-user-activation",
    "allow-top-navigation",
    "allow-top-navigation-by-user-activation"
  ],
  "image": [
    "crossorigin",
    "href",
    "requiredextensions",
    "systemlanguage",
    "xlink:href",
    "xlink:title"
  ],
  "image resource": [
    "label",
    "sizes",
    "src",
    "type"
  ],
  "image-orientation": [
    "",
    "<angle>",
    "flip",
    "from-image",
    "none"
  ],
  "image-rendering": [
    "auto",
    "crisp-edges",
    "high-quality",
    "pixelated",
    "smooth"
  ],
  "image-resolution": [
    "<resolution>",
    "from-image",
    "snap"
  ],
  "image-set()": [
    "type()"
  ],
  "img": [
    "align",
    "alt",
    "border",
    "crossorigin",
    "decoding",
    "height",
    "hspace",
    "ismap",
    "loading",
    "longdesc",
    "lowsrc",
    "name",
    "referrerpolicy",
    "sizes",
    "src",
    "srcset",
    "usemap",
    "vspace",
    "width"
  ],
  "img/crossorigin": [
    "anonymous",
    "use-credentials"
  ],
  "img/decoding": [
    "async",
    "auto",
    "sync"
  ],
  "img/loading": [
    "eager",
    "lazy"
  ],
  "import map": [
    "imports",
    "scopes"
  ],
  "import map parse result": [
    "error to rethrow",
    "import map",
    "settings object"
  ],
  "in": [
    "backgroundalpha",
    "backgroundimage",
    "fillpaint",
    "sourcealpha",
    "sourcegraphic",
    "strokepaint"
  ],
  "index": [
    "key path",
    "keys",
    "list of records",
    "multientry flag",
    "name",
    "records",
    "referenced",
    "referenced value",
    "references",
    "unique flag",
    "values"
  ],
  "index-handle": [
    "index",
    "name",
    "object store handle",
    "transaction"
  ],
  "initial-letter": [
    "<integer>",
    "<number>",
    "drop",
    "initial letter sink",
    "initial letter size",
    "normal",
    "raise"
  ],
  "initial-letter-align": [
    "alphabetic",
    "border-box",
    "hanging",
    "ideographic",
    "leading"
  ],
  "initial-letter-wrap": [
    "<length>",
    "<percentage>",
    "all",
    "first",
    "grid",
    "none"
  ],
  "inline-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "inline-sizing": [
    "normal",
    "stretch"
  ],
  "input": [
    "accept",
    "align",
    "alt",
    "autocomplete",
    "border",
    "button",
    "checkbox",
    "checked",
    "color",
    "date",
    "dirname",
    "disabled",
    "email",
    "file upload",
    "form",
    "hidden",
    "hspace",
    "image button",
    "ismap",
    "list",
    "local date and time",
    "max",
    "maxlength",
    "min",
    "minlength",
    "month",
    "multiple",
    "name",
    "number",
    "password",
    "pattern",
    "placeholder",
    "radio button",
    "range",
    "readonly",
    "required",
    "reset button",
    "search",
    "size",
    "src",
    "step",
    "submit button",
    "telephone",
    "text",
    "time",
    "title",
    "type",
    "url",
    "usemap",
    "value",
    "vspace",
    "week"
  ],
  "input-security": [
    "auto",
    "none"
  ],
  "input/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "input/type": [
    "button",
    "checkbox",
    "color",
    "date",
    "datetime-local",
    "email",
    "file",
    "hidden",
    "image",
    "month",
    "number",
    "password",
    "radio",
    "range",
    "reset",
    "search",
    "submit",
    "tel",
    "text",
    "time",
    "url",
    "week"
  ],
  "inputevent": [
    "datatransfer",
    "gettargetranges",
    "gettargetranges()",
    "inputevent.datatransfer",
    "inputevent.gettargetranges",
    "inputevent.gettargetranges()"
  ],
  "inputeventinit": [
    "datatransfer",
    "targetranges"
  ],
  "ins": [
    "cite",
    "datetime"
  ],
  "insecure requests policy": [
    "do not upgrade",
    "upgrade"
  ],
  "inset": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "inset-block-end": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "inset-block-start": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "inset-inline": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "inset-inline-end inset-block": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "inset-inline-start": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "installed app": [
    "fingerprints",
    "id",
    "relatedurls",
    "version"
  ],
  "interface": [
    "include",
    "inclusive inherited interfaces",
    "inherit"
  ],
  "intermediate memory breakdown entry": [
    "bytes",
    "realms",
    "types"
  ],
  "internal usage": [
    "attachment",
    "attachment-read",
    "constant",
    "input",
    "storage",
    "storage-read",
    "storage-write"
  ],
  "iteration": [
    "break",
    "continue",
    "while"
  ],
  "job": [
    "client",
    "containing job queue",
    "force bypass cache flag",
    "job promise",
    "job type",
    "list of equivalent jobs",
    "referrer",
    "scope url",
    "script url",
    "update via cache mode",
    "worker type"
  ],
  "justify-content": [
    "center",
    "end",
    "flex-end",
    "flex-start",
    "left",
    "normal",
    "right",
    "space-around",
    "space-between",
    "space-evenly",
    "start",
    "stretch"
  ],
  "justify-items": [
    "baseline",
    "first",
    "first baseline",
    "last",
    "last baseline",
    "left",
    "legacy",
    "right"
  ],
  "justify-self": [
    "auto",
    "baseline",
    "center",
    "end",
    "first",
    "first baseline",
    "flex-end",
    "flex-start",
    "last",
    "last baseline",
    "left",
    "normal",
    "right",
    "self-end",
    "self-start",
    "start",
    "stretch"
  ],
  "kana": [
    "full-size",
    "full-size kana",
    "small",
    "small kana"
  ],
  "key": [
    "type",
    "value"
  ],
  "key generator": [
    "current number"
  ],
  "key range": [
    "lower bound",
    "lower open flag",
    "upper bound",
    "upper open flag"
  ],
  "lab()": [
    "a",
    "alpha",
    "b",
    "l"
  ],
  "label": [
    "for"
  ],
  "layers": [
    "initialize the render state",
    "update the pending layers state"
  ],
  "layout API context": [
    "mode",
    "unique id",
    "work queue"
  ],
  "layout api work task": [
    "child break token",
    "layout child",
    "layout constraints",
    "promise",
    "task type"
  ],
  "layout definition": [
    "child input properties",
    "class constructor",
    "constructor valid flag",
    "input properties",
    "intrinsic sizes function",
    "intrinsic sizes generator function",
    "layout function",
    "layout generator function",
    "layout options"
  ],
  "lch()": [
    "alpha",
    "c",
    "h",
    "l"
  ],
  "leader()": [
    "<string>",
    "dotted",
    "solid",
    "space"
  ],
  "leading-trim": [
    "both",
    "end",
    "normal",
    "start"
  ],
  "left": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "legacy platform object": [
    "getownproperty"
  ],
  "legend": [
    "align"
  ],
  "letter-spacing": [
    "<length>",
    "normal"
  ],
  "li": [
    "type",
    "value"
  ],
  "limit": [
    "better",
    "default"
  ],
  "line": [
    "requiredextensions",
    "systemlanguage",
    "x1",
    "x2",
    "y1",
    "y2"
  ],
  "line-break": [
    "anywhere",
    "auto",
    "loose",
    "normal",
    "strict"
  ],
  "line-clamp": [
    "<integer>",
    "none"
  ],
  "line-gap-override!!descriptor": [
    "<percentage>",
    "normal"
  ],
  "line-grid": [
    "create",
    "match-parent"
  ],
  "line-height": [
    "<length>",
    "<number>",
    "<percentage>",
    "normal"
  ],
  "line-snap": [
    "baseline",
    "contain",
    "none"
  ],
  "linearGradient": [
    "gradienttransform",
    "gradientunits",
    "href",
    "spreadmethod",
    "x1",
    "x2",
    "xlink:href",
    "xlink:title",
    "y1",
    "y2"
  ],
  "link": [
    "as",
    "charset",
    "color",
    "crossorigin",
    "disabled",
    "header-integrity",
    "href",
    "hreflang",
    "imagesizes",
    "imagesrcset",
    "integrity",
    "media",
    "methods",
    "referrerpolicy",
    "rel",
    "rev",
    "sizes",
    "target",
    "title",
    "type",
    "urn",
    "variant-key",
    "variants"
  ],
  "link/crossorigin": [
    "anonymous",
    "use-credentials"
  ],
  "link/rel": [
    "allowed-alt-sxg",
    "alternate",
    "author",
    "canonical",
    "dns-prefetch",
    "help",
    "icon",
    "license",
    "manifest",
    "modulepreload",
    "next",
    "pingback",
    "preconnect",
    "prefetch",
    "preload",
    "prerender",
    "prev",
    "search",
    "stylesheet"
  ],
  "list": [
    "append",
    "clone",
    "contain",
    "empty",
    "exist",
    "extend",
    "for each",
    "insert",
    "is empty",
    "is not empty",
    "item",
    "iterate",
    "prepend",
    "remove",
    "replace",
    "size",
    "sort",
    "sort in ascending order",
    "sort in descending order",
    "sorting",
    "sorting in ascending order",
    "sorting in descending order"
  ],
  "list-style-image": [
    "<image>",
    "none"
  ],
  "list-style-position": [
    "inside",
    "outside"
  ],
  "list-style-type": [
    "<counter-style>",
    "<string>",
    "armenian",
    "circle",
    "decimal",
    "decimal-leading-zero",
    "disc",
    "georgian",
    "lower-alpha",
    "lower-greek",
    "lower-latin",
    "lower-roman",
    "none",
    "square",
    "upper-alpha",
    "upper-latin",
    "upper-roman"
  ],
  "listener": [
    "host",
    "port",
    "secure flag"
  ],
  "live range": [
    "clone the contents",
    "cloning the contents",
    "contained",
    "extract",
    "insert",
    "partially contained",
    "root"
  ],
  "local storage bucket": [
    "mode"
  ],
  "lock request": [
    "agent",
    "clientid",
    "grantable",
    "lock request queue",
    "lock request queue map",
    "mode",
    "name",
    "origin",
    "promise"
  ],
  "lock-concept": [
    "agent",
    "clientid",
    "held lock set",
    "mode",
    "name",
    "origin",
    "released promise",
    "waiting promise"
  ],
  "logical-page": [
    "recto",
    "verso"
  ],
  "logical-page-selector": [
    ":recto",
    ":verso"
  ],
  "manifest": [
    "background_color",
    "dir",
    "display",
    "icons",
    "lang",
    "name",
    "navigation scope",
    "navigation scope of a manifest",
    "orientation",
    "prefer_related_applications",
    "related_applications",
    "scope",
    "short_name",
    "shortcuts",
    "start_url",
    "theme_color",
    "within scope"
  ],
  "manifest image resource": [
    "purpose"
  ],
  "map": [
    "clear",
    "clone",
    "contain",
    "entry",
    "exist",
    "for each",
    "get",
    "get the keys",
    "get the value",
    "get the values",
    "getting the keys",
    "getting the values",
    "is empty",
    "is not empty",
    "iterate",
    "key",
    "name",
    "remove",
    "set",
    "set the value",
    "size",
    "sort",
    "sort in ascending order",
    "sort in descending order",
    "sorting",
    "sorting in ascending order",
    "sorting in descending order",
    "value"
  ],
  "margin": [
    "logical"
  ],
  "margin-break": [
    "auto",
    "discard",
    "keep"
  ],
  "margin-trim": [
    "all",
    "in-flow",
    "none"
  ],
  "marker": [
    "markerheight",
    "markerunits",
    "markerwidth",
    "orient",
    "refx",
    "refy"
  ],
  "marker-side": [
    "match-parent",
    "match-self"
  ],
  "marquee": [
    "behavior",
    "direction",
    "loop",
    "truespeed"
  ],
  "mask": [
    "height",
    "maskcontentunits",
    "maskunits",
    "requiredextensions",
    "systemlanguage",
    "width",
    "x",
    "y"
  ],
  "mask-border-mode": [
    "alpha",
    "luminance"
  ],
  "mask-border-slice": [
    "fill"
  ],
  "mask-clip": [
    "border-box",
    "content-box",
    "fill-box",
    "margin-box",
    "no-clip",
    "padding-box",
    "stroke-box",
    "view-box"
  ],
  "mask-composite": [
    "add",
    "exclude",
    "intersect",
    "subtract"
  ],
  "mask-image": [
    "<url>"
  ],
  "mask-mode": [
    "alpha",
    "auto",
    "luminance",
    "match-source"
  ],
  "mask-origin": [
    "border-box",
    "content-box",
    "fill-box",
    "margin-box",
    "padding-box",
    "stroke-box",
    "view-box"
  ],
  "mask-type": [
    "alpha",
    "luminance"
  ],
  "maskContentUnits": [
    "objectboundingbox",
    "userspaceonuse"
  ],
  "maskUnits": [
    "objectboundingbox",
    "userspaceonuse"
  ],
  "matrix": [
    "is 2d",
    "m11 element",
    "m12 element",
    "m13 element",
    "m14 element",
    "m21 element",
    "m22 element",
    "m23 element",
    "m24 element",
    "m31 element",
    "m32 element",
    "m33 element",
    "m34 element",
    "m41 element",
    "m42 element",
    "m43 element",
    "m44 element",
    "validate and fixup",
    "validate and fixup (2d)"
  ],
  "max-block-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "max-height": [
    "<length-percentage>",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "none",
    "stretch"
  ],
  "max-inline-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "max-lines": [
    "<integer>",
    "none"
  ],
  "max-width": [
    "<length-percentage>",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "none",
    "stretch"
  ],
  "mediaencryptedevent": [
    "initdata",
    "initdatatype"
  ],
  "mediaencryptedeventinit": [
    "initdata",
    "initdatatype"
  ],
  "mediakeymessageevent": [
    "message",
    "messagetype"
  ],
  "mediakeymessageeventinit": [
    "message",
    "messagetype"
  ],
  "mediakeymessagetype": [
    "individualization-request",
    "license-release",
    "license-renewal",
    "license-request"
  ],
  "mediakeys": [
    "createsession",
    "createsession()",
    "setservercertificate",
    "setservercertificate()"
  ],
  "mediakeysession": [
    "close",
    "close()",
    "closed",
    "expiration",
    "generaterequest",
    "generaterequest()",
    "keystatuses",
    "load",
    "load()",
    "onkeystatuseschange",
    "onmessage",
    "remove",
    "remove()",
    "sessionid",
    "update",
    "update()"
  ],
  "mediakeysessiontype": [
    "persistent-license",
    "temporary"
  ],
  "mediakeysrequirement": [
    "not-allowed",
    "optional",
    "required"
  ],
  "mediakeystatus": [
    "expired",
    "internal-error",
    "output-downscaled",
    "output-restricted",
    "released",
    "status-pending",
    "usable"
  ],
  "mediakeystatusmap": [
    "get",
    "get()",
    "has",
    "has()",
    "iterable",
    "size"
  ],
  "mediakeysystemaccess": [
    "createmediakeys",
    "createmediakeys()",
    "getconfiguration",
    "getconfiguration()",
    "keysystem"
  ],
  "mediakeysystemconfiguration": [
    "audiocapabilities",
    "distinctiveidentifier",
    "initdatatypes",
    "label",
    "persistentstate",
    "sessiontypes",
    "videocapabilities"
  ],
  "mediakeysystemmediacapability": [
    "contenttype",
    "robustness"
  ],
  "mediasource": [
    "activesourcebuffers",
    "addsourcebuffer",
    "clearliveseekablerange",
    "duration",
    "endofstream",
    "istypesupported",
    "onsourceclose",
    "onsourceended",
    "onsourceopen",
    "removesourcebuffer",
    "setliveseekablerange",
    "sourcebuffers"
  ],
  "mediastreamconstraints": [
    "peeridentity"
  ],
  "mediastreamtrack": [
    "isolated",
    "onisolationchange"
  ],
  "mediatrackcapabilities": [
    "deprojectiondistortioncoefficients",
    "depthfar",
    "depthnear",
    "depthtovideotransform",
    "focallengthx",
    "focallengthy",
    "principalpointx",
    "principalpointy",
    "projectiondistortioncoefficients",
    "videokind"
  ],
  "mediatrackconstraintset": [
    "deprojectiondistortioncoefficients",
    "depthfar",
    "depthnear",
    "depthtovideotransform",
    "focallengthx",
    "focallengthy",
    "principalpointx",
    "principalpointy",
    "projectiondistortioncoefficients",
    "videokind"
  ],
  "mediatracksettings": [
    "deprojectiondistortioncoefficients",
    "depthfar",
    "depthnear",
    "depthtovideotransform",
    "focallengthx",
    "focallengthy",
    "principalpointx",
    "principalpointy",
    "projectiondistortioncoefficients",
    "videokind"
  ],
  "mediatracksupportedconstraints": [
    "deprojectiondistortioncoefficients",
    "depthfar",
    "depthnear",
    "depthtovideotransform",
    "focallengthx",
    "focallengthy",
    "principalpointx",
    "principalpointy",
    "projectiondistortioncoefficients",
    "videokind"
  ],
  "memory attribution token": [
    "container",
    "cross-origin aggregated flag"
  ],
  "menu": [
    "compact",
    "label",
    "type"
  ],
  "meta": [
    "charset",
    "content",
    "http-equiv",
    "media",
    "name",
    "scheme"
  ],
  "meta/http-equiv": [
    "content-language",
    "content-security-policy",
    "content-type",
    "default-style",
    "refresh",
    "set-cookie",
    "x-ua-compatible"
  ],
  "meta/name": [
    "application-name",
    "author",
    "color-scheme",
    "description",
    "generator",
    "keywords",
    "referrer",
    "theme-color"
  ],
  "meter": [
    "high",
    "low",
    "max",
    "min",
    "optimum",
    "value"
  ],
  "method": [
    "normalize"
  ],
  "min-block-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "min-height": [
    "<length-percentage>",
    "auto",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "stretch"
  ],
  "min-inline-size": [
    "contain",
    "fit-content",
    "stretch"
  ],
  "min-intrinsic-size": [
    "legacy",
    "zero-if-extrinsic",
    "zero-if-scroll"
  ],
  "min-width": [
    "<length-percentage>",
    "auto",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "stretch"
  ],
  "modules": [
    "browsingcontext",
    "log",
    "script",
    "session"
  ],
  "mouseevent": [
    "mouseevent.movementx",
    "mouseevent.movementy",
    "movementx",
    "movementy"
  ],
  "mouseeventinit": [
    "movementX",
    "movementY"
  ],
  "mpath": [
    "href"
  ],
  "name table": [
    "names"
  ],
  "navigation params": [
    "prefetched subresource signed exchanges"
  ],
  "navigator": [
    "donottrack",
    "navigator.donottrack",
    "navigator.removetrackingexception",
    "navigator.removetrackingexception()",
    "navigator.storetrackingexception",
    "navigator.storetrackingexception()",
    "navigator.trackingexceptionexists",
    "navigator.trackingexceptionexists()",
    "removetrackingexception",
    "removetrackingexception()",
    "requestmediakeysystemaccess",
    "requestmediakeysystemaccess()",
    "storetrackingexception",
    "storetrackingexception()",
    "trackingexceptionexists",
    "trackingexceptionexists()"
  ],
  "no-composite": [
    "no-composite"
  ],
  "notification": [
    "action",
    "badge resource",
    "badge url",
    "body",
    "data",
    "direction",
    "icon resource",
    "icon url",
    "image resource",
    "image url",
    "language",
    "origin",
    "renotify preference",
    "require interaction preference",
    "service worker registration",
    "silent preference",
    "tag",
    "timestamp",
    "title",
    "vibration pattern"
  ],
  "nullable types": [
    "inner type"
  ],
  "object": [
    "align",
    "archive",
    "autocomplete",
    "border",
    "classid",
    "code",
    "codebase",
    "codetype",
    "data",
    "declare",
    "dirname",
    "disabled",
    "form",
    "height",
    "hspace",
    "name",
    "standby",
    "type",
    "typemustmatch",
    "usemap",
    "vspace",
    "width"
  ],
  "object-fit": [
    "contain",
    "cover",
    "fill",
    "none",
    "scale-down"
  ],
  "object-store": [
    "in-line keys",
    "key path",
    "list of records",
    "name",
    "out-of-line keys",
    "record"
  ],
  "object-store-handle": [
    "index set",
    "name",
    "object store",
    "transaction"
  ],
  "object/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "observable array attribute": [
    "backing list",
    "delete an indexed value",
    "set an indexed value"
  ],
  "observable array exotic object": [
    "set the indexed value",
    "set the length",
    "setting the indexed value",
    "setting the length"
  ],
  "obtain a connection": [
    "dedicated",
    "http3only"
  ],
  "offset path": [
    "initial direction",
    "initial position"
  ],
  "offset-path": [
    "ray()"
  ],
  "offset-rotate": [
    "auto",
    "reverse"
  ],
  "offsetpath": [
    "<size>",
    "contain",
    "initial direction",
    "initial position",
    "none",
    "path()",
    "ray()"
  ],
  "offsetpath-pathfunc": [
    "path()"
  ],
  "ol": [
    "compact",
    "reversed",
    "start",
    "type"
  ],
  "ol/type": [
    "1",
    "a",
    "i"
  ],
  "opaque framebuffer": [
    "session"
  ],
  "operator": [
    "arithmetic",
    "atop",
    "in",
    "lighter",
    "out",
    "over",
    "xor"
  ],
  "optgroup": [
    "disabled",
    "label"
  ],
  "option": [
    "disabled",
    "label",
    "name",
    "selected",
    "value"
  ],
  "optional argument": [
    "default value"
  ],
  "order": [
    "<integer>"
  ],
  "orientation": [
    "auto",
    "landscape",
    "portrait"
  ],
  "origin": [
    "domain",
    "host",
    "port",
    "prevent silent access flag",
    "requires user mediation",
    "scheme"
  ],
  "origin policy": [
    "content security policies",
    "feature policy",
    "ids"
  ],
  "origin policy manifest": [
    "content_security",
    "features",
    "ids"
  ],
  "origin policy manifest/content_security": [
    "policies",
    "policies_report_only"
  ],
  "origin policy manifest/features": [
    "policy"
  ],
  "origin-bound one-time code message": [
    "code",
    "embedded host",
    "explanatory text",
    "top-level host"
  ],
  "outline-color": [
    "invert"
  ],
  "output": [
    "autocomplete",
    "dirname",
    "disabled",
    "for",
    "form",
    "name"
  ],
  "output/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "overflow": [
    "auto",
    "clip",
    "hidden",
    "scroll",
    "visible"
  ],
  "overflow-anchor": [
    "auto",
    "none"
  ],
  "overflow-clip-margin": [
    "<length [0,∞]>",
    "<visual-box>"
  ],
  "overflow-wrap": [
    "anywhere",
    "break-word",
    "normal"
  ],
  "overflow-x": [
    "auto",
    "clip",
    "hidden",
    "scroll",
    "visible"
  ],
  "overflow-y": [
    "auto",
    "clip",
    "hidden",
    "scroll",
    "visible"
  ],
  "overscroll-behavior": [
    "auto",
    "contain",
    "none"
  ],
  "overscroll-behavior-block": [
    "auto",
    "contain",
    "none"
  ],
  "overscroll-behavior-inline": [
    "auto",
    "contain",
    "none"
  ],
  "overscroll-behavior-x": [
    "auto",
    "contain",
    "none"
  ],
  "overscroll-behavior-y": [
    "auto",
    "contain",
    "none"
  ],
  "p": [
    "align"
  ],
  "padding": [
    "logical"
  ],
  "page-break-after": [
    "always",
    "auto",
    "avoid",
    "left",
    "right"
  ],
  "page-break-before": [
    "always",
    "auto",
    "avoid",
    "left",
    "right"
  ],
  "page-break-inside": [
    "always",
    "auto",
    "avoid",
    "avoid-column",
    "avoid-page",
    "avoid-region",
    "left",
    "right"
  ],
  "page-orientation": [
    "rotate-left",
    "rotate-right",
    "upright"
  ],
  "paint definition": [
    "class constructor",
    "constructor valid flag",
    "input properties",
    "paint function",
    "paintrenderingcontext2dsettings object"
  ],
  "pair": [
    "item",
    "name"
  ],
  "parallel queue": [
    "enqueue steps",
    "enqueue the following steps"
  ],
  "param": [
    "name",
    "type",
    "value",
    "valuetype"
  ],
  "parsed copyto options": [
    "allocationsize",
    "computedlayouts"
  ],
  "parsed payment method manifest": [
    "default applications",
    "supported origins"
  ],
  "partitioned storage key": [
    "embedded site",
    "top-level site"
  ],
  "path": [
    "requiredextensions",
    "systemlanguage"
  ],
  "path()": [
    "<string>"
  ],
  "pattern": [
    "height",
    "href",
    "patterncontentunits",
    "patterntransform",
    "patternunits",
    "width",
    "x",
    "xlink:href",
    "xlink:title",
    "y"
  ],
  "pause-after": [
    "<time>",
    "medium",
    "none",
    "strong",
    "weak",
    "x-strong",
    "x-weak"
  ],
  "pause-before": [
    "<time>",
    "medium",
    "none",
    "strong",
    "weak",
    "x-strong",
    "x-weak"
  ],
  "payment handler": [
    "payment method changed algorithm"
  ],
  "peak brightness": [
    "high peak brightness"
  ],
  "pending abort request": [
    "promise",
    "reason",
    "was already erroring"
  ],
  "pending processor construction data": [
    "node reference",
    "transferred port"
  ],
  "performance": [
    "clearmarks",
    "clearmarks()",
    "clearmeasures",
    "clearmeasures()",
    "mark",
    "mark()",
    "measure",
    "measure()",
    "performance.clearmarks",
    "performance.clearmarks()",
    "performance.clearmeasures",
    "performance.clearmeasures()",
    "performance.mark",
    "performance.mark()",
    "performance.measure",
    "performance.measure()"
  ],
  "periodic sync registration": [
    "anchor time",
    "minimum interval",
    "service worker registration",
    "state",
    "tag"
  ],
  "periodic sync scheduler": [
    "time of last fire"
  ],
  "periodicsync event": [
    "in the background"
  ],
  "perspective": [
    "<length [0,∞]>",
    "none"
  ],
  "perspective-origin": [
    "<length>",
    "<percentage>",
    "bottom",
    "center",
    "left",
    "right",
    "top"
  ],
  "platform object": [
    "[[Detached]]"
  ],
  "point": [
    "w perspective",
    "x coordinate",
    "y coordinate",
    "z coordinate"
  ],
  "policy": [
    "directive set",
    "disposition",
    "self-origin",
    "source",
    "subsume",
    "subsumed by"
  ],
  "policy configuration": [
    "reporting endpoint",
    "value"
  ],
  "policy container": [
    "csp list",
    "embedder policy",
    "ip address space",
    "referrer policy"
  ],
  "polygon": [
    "points",
    "requiredextensions",
    "systemlanguage"
  ],
  "polyline": [
    "points",
    "requiredextensions",
    "systemlanguage"
  ],
  "portal": [
    "referrerpolicy",
    "src"
  ],
  "position": [
    "absolute",
    "fixed",
    "relative",
    "static",
    "sticky"
  ],
  "pre": [
    "width"
  ],
  "prescan a byte stream to determine its encoding": [
    "end condition"
  ],
  "primitiveUnits": [
    "objectboundingbox",
    "userspaceonuse"
  ],
  "print-color-adjust": [
    "economy",
    "exact"
  ],
  "processor construction data": [
    "name",
    "node",
    "options",
    "port"
  ],
  "progress": [
    "max",
    "value"
  ],
  "promise": [
    "react",
    "reacting"
  ],
  "propdef-footnote-display": [
    "block",
    "compact",
    "inline"
  ],
  "property": [
    "scoped",
    "scoped properties",
    "scoped property",
    "scoped to a sub-tree",
    "scoped to an element",
    "scoped to an element’s sub-tree",
    "scoped to the element",
    "scoped to the element’s sub-tree",
    "scoped to the sub-tree"
  ],
  "public key": [
    "algorithm"
  ],
  "public key credential source": [
    "id",
    "managing authenticator",
    "mutable item",
    "otherui",
    "privatekey",
    "rpid",
    "type",
    "userhandle"
  ],
  "pull-into descriptor": [
    "buffer",
    "buffer byte length",
    "byte length",
    "byte offset",
    "bytes filled",
    "element size",
    "reader type",
    "view constructor"
  ],
  "q": [
    "cite"
  ],
  "quadrilateral": [
    "point 1",
    "point 2",
    "point 3",
    "point 4"
  ],
  "query set state": [
    "available",
    "destroyed"
  ],
  "queue": [
    "clone",
    "contain",
    "dequeue",
    "empty",
    "enqueue",
    "exist",
    "is empty",
    "is not empty",
    "item",
    "size",
    "sort",
    "sort in ascending order",
    "sort in descending order",
    "sorting",
    "sorting in ascending order",
    "sorting in descending order"
  ],
  "quotes": [
    "[<string> <string>]+",
    "auto",
    "none"
  ],
  "radial-gradient()": [
    "<ending-shape>",
    "<position>",
    "<size>",
    "gradient center"
  ],
  "radialGradient": [
    "cx",
    "cy",
    "fr",
    "fx",
    "fy",
    "gradienttransform",
    "gradientunits",
    "href",
    "r",
    "spreadmethod",
    "xlink:href",
    "xlink:title"
  ],
  "range": [
    "collapsed",
    "end",
    "end node",
    "end offset",
    "select",
    "start",
    "start node",
    "start offset"
  ],
  "ray()": [
    "<angle>",
    "<size>",
    "contain"
  ],
  "read buffer": [
    "bytes",
    "dump",
    "read",
    "reader",
    "reading up to",
    "stream"
  ],
  "read request": [
    "chunk steps",
    "close steps",
    "error steps"
  ],
  "read-into request": [
    "chunk steps",
    "close steps",
    "error steps"
  ],
  "readable byte stream queue entry": [
    "buffer",
    "byte length",
    "byte offset"
  ],
  "readystate": [
    "closed",
    "ended",
    "open"
  ],
  "rect": [
    "requiredextensions",
    "systemlanguage"
  ],
  "rectangle": [
    "height dimension",
    "origin",
    "width dimension",
    "x coordinate",
    "y coordinate"
  ],
  "registered observer": [
    "observer",
    "options"
  ],
  "relevant global object": [
    "[[explicitlyGrantedAudioOutputDevices]]"
  ],
  "remoteplayback": [
    "cancelwatchavailability",
    "cancelwatchavailability()",
    "onconnect",
    "onconnecting",
    "ondisconnect",
    "prompt",
    "prompt()",
    "state",
    "watchavailability",
    "watchavailability()"
  ],
  "remoteplaybackstate": [
    "connected",
    "connecting",
    "disconnected"
  ],
  "repeat()": [
    "auto-fill",
    "auto-fit"
  ],
  "repeating-conic-gradient()": [
    "<angle>",
    "<position>",
    "gradient center"
  ],
  "repeating-radial-gradient()": [
    "<ending-shape>",
    "<position>",
    "<size>",
    "gradient center"
  ],
  "report": [
    "attempts",
    "body",
    "destination",
    "group",
    "timestamp",
    "type",
    "url",
    "user agent"
  ],
  "reporting": [
    "queue"
  ],
  "request": [
    "add a range header",
    "blocked",
    "body",
    "cache mode",
    "client",
    "clone",
    "connection queue",
    "credentials mode",
    "cryptographic nonce metadata",
    "current url",
    "destination",
    "determine the network partition key",
    "determining the network partition key",
    "done flag",
    "effective directive",
    "error",
    "header list",
    "history-navigation flag",
    "initiator",
    "integrity metadata",
    "keepalive",
    "method",
    "mode",
    "open request",
    "origin",
    "parser metadata",
    "placed",
    "policy container",
    "prevent no-cache cache-control header modification flag",
    "priority",
    "processed",
    "processed flag",
    "redirect count",
    "redirect mode",
    "referrer",
    "referrer policy",
    "reload-navigation flag",
    "replaces client id",
    "reserved client",
    "response tainting",
    "result",
    "service-workers mode",
    "source",
    "stashed exchange",
    "success",
    "tainted origin flag",
    "target ip address space",
    "textfragmenttoken",
    "timing allow failed flag",
    "transaction",
    "unsafe-request flag",
    "upgradeneeded",
    "url",
    "url list",
    "use-cors-preflight flag",
    "use-url-credentials flag",
    "user activation",
    "user-activation",
    "window"
  ],
  "request/destination": [
    "script-like"
  ],
  "response": [
    "aborted flag",
    "body",
    "cache state",
    "came from a signed exchange",
    "clone",
    "cors-exposed header-name list",
    "date",
    "did not come from a signed exchange",
    "header integrity value",
    "header list",
    "ip address space",
    "location url",
    "origin policy",
    "range-requested flag",
    "service worker timing info",
    "signed exchange outer header list",
    "status",
    "status message",
    "timing allow passed flag",
    "timing info",
    "type",
    "url",
    "url list"
  ],
  "rest-after": [
    "<time>",
    "medium",
    "none",
    "strong",
    "weak",
    "x-strong",
    "x-weak"
  ],
  "rest-before": [
    "<time>",
    "medium",
    "none",
    "strong",
    "weak",
    "x-strong",
    "x-weak"
  ],
  "result": [
    "<filter-primitive-reference>"
  ],
  "rgb()": [
    "alpha",
    "b",
    "g",
    "r"
  ],
  "right": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "rotate": [
    "none",
    "x",
    "y",
    "z"
  ],
  "row-gap": [
    "normal"
  ],
  "rtcconfiguration": [
    "peeridentity"
  ],
  "rtcerror": [
    "httprequeststatuscode"
  ],
  "rtcerrordetailtypeidp": [
    "idp-bad-script-failure",
    "idp-execution-failure",
    "idp-load-failure",
    "idp-need-login",
    "idp-timeout",
    "idp-tls-failure",
    "idp-token-expired",
    "idp-token-invalid"
  ],
  "rtcerrorinit": [
    "httprequeststatuscode"
  ],
  "rtcidentityassertion": [
    "idp",
    "name"
  ],
  "rtcidentityassertionresult": [
    "assertion",
    "idp"
  ],
  "rtcidentityprovider": [
    "generateassertion",
    "validateassertion"
  ],
  "rtcidentityproviderdetails": [
    "domain",
    "protocol"
  ],
  "rtcidentityproviderglobalscope": [
    "rtcidentityprovider"
  ],
  "rtcidentityprovideroptions": [
    "peeridentity",
    "protocol",
    "usernamehint"
  ],
  "rtcidentityproviderregistrar": [
    "register",
    "register()"
  ],
  "rtcidentityvalidationresult": [
    "contents",
    "identity"
  ],
  "rtcpeerconnection": [
    "getidentityassertion",
    "getidentityassertion()",
    "idperrorinfo",
    "idploginurl",
    "peeridentity",
    "setidentityprovider",
    "setidentityprovider()"
  ],
  "ruby-align": [
    "center",
    "space-around",
    "space-between",
    "start"
  ],
  "ruby-merge": [
    "auto",
    "merge",
    "separate"
  ],
  "ruby-overhang": [
    "auto",
    "none"
  ],
  "ruby-position": [
    "alternate",
    "inter-character",
    "inter-character annotation",
    "over",
    "under"
  ],
  "scalar value string": [
    "code point length",
    "length"
  ],
  "scale": [
    "none"
  ],
  "scheduler task": [
    "enqueue order",
    "older than"
  ],
  "scheduler task queue": [
    "first runnable task",
    "priority",
    "remove",
    "tasks"
  ],
  "script": [
    "\"parser-inserted\"",
    "async",
    "base url",
    "charset",
    "crossorigin",
    "defer",
    "error to rethrow",
    "event",
    "fetch options",
    "for",
    "href",
    "integrity",
    "language",
    "nomodule",
    "parse error",
    "record",
    "referrerpolicy",
    "settings object",
    "src",
    "type",
    "xlink:href",
    "xlink:title"
  ],
  "script resource": [
    "has ever been evaluated flag",
    "https state",
    "policy container",
    "referrer policy"
  ],
  "script/crossorigin": [
    "anonymous",
    "use-credentials"
  ],
  "scroll-anchoring": [
    "anchor node"
  ],
  "scroll-behavior": [
    "auto",
    "smooth"
  ],
  "scroll-padding": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-block": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-block-end": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-block-start": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-inline": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-inline-end": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-padding-inline-start": [
    "<length-percentage>",
    "auto"
  ],
  "scroll-snap-align": [
    "center",
    "end",
    "none",
    "start"
  ],
  "scroll-snap-stop": [
    "always",
    "normal"
  ],
  "scroll-snap-type": [
    "block",
    "both",
    "inline",
    "mandatory",
    "none",
    "proximity",
    "x",
    "y"
  ],
  "scrollbar-color": [
    "<color>",
    "auto",
    "dark",
    "light"
  ],
  "scrollbar-gutter": [
    "always",
    "auto",
    "both",
    "force",
    "match-parent",
    "mirror",
    "stable"
  ],
  "scrollbar-width": [
    "<length>",
    "auto",
    "none",
    "thin"
  ],
  "secondary view": [
    "secondary-views"
  ],
  "select": [
    "autocomplete",
    "dirname",
    "disabled",
    "drop-down box",
    "form",
    "list box",
    "multiple",
    "name",
    "required",
    "size"
  ],
  "select/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "selector": [
    "combinator",
    "subject",
    "subject of a selector"
  ],
  "service worker": [
    "classic scripts imported flag",
    "containing service worker registration",
    "functional events",
    "global object",
    "lifecycle events",
    "origin policy ids",
    "registration",
    "running",
    "script resource",
    "script resource map",
    "script url",
    "service worker events",
    "set of event types to handle",
    "set of extended events",
    "set of used scripts",
    "skip waiting flag",
    "start status",
    "state",
    "type"
  ],
  "service worker client": [
    "dedicated worker client",
    "discarded flag",
    "origin",
    "shared worker client",
    "window client",
    "worker client"
  ],
  "service worker registration": [
    "active background fetches",
    "active background fetches edit queue",
    "active worker",
    "content index entries",
    "entry edit queue",
    "installing worker",
    "last update check time",
    "navigation preload enabled flag",
    "navigation preload header value",
    "navigationpreloadmanager",
    "scope url",
    "stale",
    "task queues",
    "unregistered",
    "update via cache mode",
    "waiting worker"
  ],
  "service worker timing info": [
    "fetch event dispatch time",
    "start time"
  ],
  "session": [
    "create a bidirectional stream",
    "create an outgoing unidirectional stream",
    "establish",
    "receive a bidirectional stream",
    "receive a datagram",
    "receive an incoming unidirectional stream",
    "send a datagram",
    "terminate",
    "terminated"
  ],
  "set": [
    "append",
    "clone",
    "contain",
    "empty",
    "exist",
    "for each",
    "insert",
    "intersection",
    "is empty",
    "is not empty",
    "item",
    "iterate",
    "onbegin",
    "onend",
    "onrepeat",
    "prepend",
    "remove",
    "replace",
    "replacing",
    "requiredextensions",
    "size",
    "sort",
    "sort in ascending order",
    "sort in descending order",
    "sorting",
    "sorting in ascending order",
    "sorting in descending order",
    "subset",
    "superset",
    "systemlanguage",
    "to",
    "union"
  ],
  "shadow root": [
    "part element map"
  ],
  "shape()": [
    "<arc-command>",
    "<arc-size>",
    "<arc-sweep>",
    "<by-to>",
    "<coordinate-pair>",
    "<curve-command>",
    "<hv-line-command>",
    "<line-command>",
    "<move-command>",
    "<smooth-command>",
    "arc",
    "by",
    "ccw",
    "close",
    "curve",
    "cw",
    "hline",
    "large",
    "line",
    "move",
    "small",
    "smooth",
    "to",
    "vline"
  ],
  "shape-image-threshold": [
    "<number>"
  ],
  "shape-inside": [
    "<basic-shape>",
    "<url>",
    "auto",
    "display",
    "outside-shape"
  ],
  "shape-margin": [
    "<length-percentage>",
    "<length>",
    "<percentage>"
  ],
  "shape-outside": [
    "<basic-shape>",
    "<image>",
    "border-box",
    "content-box",
    "margin-box",
    "none",
    "padding-box"
  ],
  "shortcut item": [
    "description",
    "icons",
    "name",
    "short_name",
    "url"
  ],
  "signed exchange report": [
    "cert server ip list",
    "cert url list",
    "cert_fetch_error",
    "cert_parse_error",
    "cert_verification_error",
    "inner url",
    "invalid_integrity_header",
    "mi_error",
    "non_secure_distributor",
    "ok",
    "outer request",
    "outer response",
    "parse_error",
    "result",
    "server ip",
    "signature_verification_error"
  ],
  "single-animation-timeline": [
    "auto",
    "none"
  ],
  "skeleton joint": [
    "radius"
  ],
  "slot": [
    "assigned nodes",
    "name"
  ],
  "slottable": [
    "assigned",
    "assigned slot",
    "manual slot assignment",
    "name"
  ],
  "source": [
    "height",
    "media",
    "sizes",
    "src",
    "srcset",
    "type",
    "width"
  ],
  "source expression": [
    "intersection",
    "wildcard host",
    "wildcard port"
  ],
  "source list": [
    "allows all inline behavior",
    "intersection"
  ],
  "sourcebuffer": [
    "abort",
    "appendbuffer",
    "appendwindowend",
    "appendwindowstart",
    "audiotracks",
    "buffered",
    "mode",
    "onabort",
    "onerror",
    "onupdate",
    "onupdateend",
    "onupdatestart",
    "remove",
    "texttracks",
    "timestampoffset",
    "updating",
    "videotracks"
  ],
  "sourcebufferlist": [
    "length",
    "onaddsourcebuffer",
    "onremovesourcebuffer"
  ],
  "spatial-navigation-action": [
    "auto",
    "focus",
    "scroll"
  ],
  "spatial-navigation-contain": [
    "auto",
    "contain"
  ],
  "spatial-navigation-function": [
    "grid",
    "normal"
  ],
  "speak": [
    "always",
    "auto",
    "never"
  ],
  "speak-as": [
    "digits",
    "literal-punctuation",
    "no-punctuation",
    "normal",
    "spell-out"
  ],
  "stack": [
    "clone",
    "contain",
    "empty",
    "exist",
    "is empty",
    "is not empty",
    "item",
    "pop",
    "push",
    "size",
    "sort",
    "sort in ascending order",
    "sort in descending order",
    "sorting",
    "sorting in ascending order",
    "sorting in descending order"
  ],
  "step-easing-function": [
    "step-end",
    "step-start",
    "steps()"
  ],
  "steps()": [
    "end",
    "jump-both",
    "jump-end",
    "jump-none",
    "jump-start",
    "start"
  ],
  "stop": [
    "offset",
    "stop-color",
    "stop-opacity"
  ],
  "storage access flag set": [
    "has storage access flag",
    "was expressly denied storage access flag"
  ],
  "storage bottle": [
    "map",
    "proxy map reference set",
    "quota"
  ],
  "storage classes": [
    "function",
    "handle",
    "private",
    "storage",
    "uniform",
    "workgroup"
  ],
  "storage endpoint": [
    "identifier",
    "quota",
    "types"
  ],
  "storage proxy map": [
    "backing map"
  ],
  "stream": [
    "active",
    "audible",
    "bidirectional",
    "inactive",
    "inaudible",
    "incoming unidirectional",
    "outgoing unidirectional",
    "receive",
    "reset",
    "send",
    "send stop_sending"
  ],
  "stream-event": [
    "reset",
    "stop_sending"
  ],
  "string": [
    "code point length",
    "concatenate",
    "concatenation",
    "convert",
    "identical to",
    "is",
    "length",
    "percent-decode",
    "percent-encode after encoding",
    "position variable",
    "starts with",
    "utf-8 percent-encode"
  ],
  "string()": [
    "first",
    "first-except",
    "last",
    "start"
  ],
  "string-set": [
    "none"
  ],
  "stroke-align": [
    "center",
    "inset",
    "outset"
  ],
  "stroke-dash-corner": [
    "none"
  ],
  "stroke-dash-justify": [
    "compress",
    "dashes",
    "gaps",
    "none",
    "stretch"
  ],
  "stroke-dasharray": [
    "<length-percentage>+#",
    "none"
  ],
  "stroke-linecap": [
    "butt",
    "round",
    "square"
  ],
  "stroke-linejoin": [
    "arcs",
    "bevel",
    "crop",
    "fallback",
    "miter",
    "round"
  ],
  "stroke-miterlimit": [
    "<number>"
  ],
  "stroke-origin": [
    "border-box",
    "content-box",
    "fill-box",
    "match-parent",
    "padding-box",
    "stroke-box"
  ],
  "struct": [
    "item",
    "name"
  ],
  "style": [
    "media",
    "title",
    "type"
  ],
  "subscript-position-override!!descriptor": [
    "<percentage>",
    "from-font",
    "normal"
  ],
  "subscript-size-override!!descriptor": [
    "<percentage>",
    "from-font",
    "normal"
  ],
  "sum value": [
    "unit map",
    "value"
  ],
  "superscript-position-override!!descriptor": [
    "<percentage>",
    "from-font",
    "normal"
  ],
  "superscript-size-override!!descriptor": [
    "<percentage>",
    "from-font",
    "normal"
  ],
  "supported limits": [
    "maxBindGroups",
    "maxComputePerDimensionDispatchSize",
    "maxComputeWorkgroupInvocations",
    "maxComputeWorkgroupStorageSize",
    "maxDynamicStorageBuffersPerPipelineLayout",
    "maxDynamicUniformBuffersPerPipelineLayout",
    "maxInterStageShaderComponents",
    "maxSampledTexturesPerShaderStage",
    "maxSamplersPerShaderStage",
    "maxStorageBufferBindingSize",
    "maxStorageBuffersPerShaderStage",
    "maxStorageTexturesPerShaderStage",
    "maxTextureArrayLayers",
    "maxTextureDimension1D",
    "maxTextureDimension2D",
    "maxTextureDimension3D",
    "maxUniformBufferBindingSize",
    "maxUniformBuffersPerShaderStage",
    "maxVertexAttributes",
    "maxVertexBufferArrayStride",
    "maxVertexBuffers",
    "minStorageBufferOffsetAlignment",
    "minUniformBufferOffsetAlignment"
  ],
  "supported open() feature name": [
    "height",
    "left",
    "top",
    "width"
  ],
  "svg": [
    "preserveaspectratio",
    "requiredextensions",
    "systemlanguage",
    "viewbox",
    "zoomandpan"
  ],
  "switch": [
    "requiredextensions",
    "systemlanguage"
  ],
  "symbol": [
    "refx",
    "refy"
  ],
  "system": [
    "symbolic"
  ],
  "table": [
    "align",
    "bgcolor",
    "border",
    "bordercolor",
    "cellpadding",
    "cellspacing",
    "datapagesize",
    "frame",
    "height",
    "rules",
    "summary",
    "width"
  ],
  "table-layout": [
    "auto",
    "fixed"
  ],
  "task": [
    "end time",
    "script evaluation environment settings",
    "start time"
  ],
  "tbody": [
    "align",
    "char",
    "charoff",
    "height",
    "valign"
  ],
  "td": [
    "abbr",
    "align",
    "axis",
    "bgcolor",
    "char",
    "charoff",
    "colspan",
    "headers",
    "height",
    "nowrap",
    "rowspan",
    "scope",
    "valign",
    "width"
  ],
  "text": [
    "dx",
    "dy",
    "lengthadjust",
    "requiredextensions",
    "rotate",
    "systemlanguage",
    "textlength",
    "x",
    "y"
  ],
  "text-align": [
    "<string>",
    "alignment character",
    "center",
    "end",
    "justify",
    "justify-all",
    "left",
    "match-parent",
    "right",
    "start"
  ],
  "text-align-last": [
    "auto"
  ],
  "text-combine-upright": [
    "all",
    "digits <integer>?",
    "none"
  ],
  "text-decoration": [
    "blink",
    "line-through",
    "none",
    "overline",
    "underline"
  ],
  "text-decoration-line": [
    "blink",
    "grammar-error",
    "line-through",
    "none",
    "overline",
    "spelling-error",
    "underline"
  ],
  "text-decoration-skip": [
    "auto",
    "none"
  ],
  "text-decoration-skip-box": [
    "all",
    "none"
  ],
  "text-decoration-skip-ink": [
    "all",
    "auto",
    "none"
  ],
  "text-decoration-skip-inset": [
    "auto",
    "none"
  ],
  "text-decoration-skip-self": [
    "none",
    "objects"
  ],
  "text-decoration-skip-spaces": [
    "all",
    "end",
    "none",
    "start"
  ],
  "text-decoration-style": [
    "wavy"
  ],
  "text-decoration-thickness": [
    "<length>",
    "<percentage>",
    "auto",
    "from-font"
  ],
  "text-edge": [
    "alphabetic",
    "cap",
    "ex",
    "ideographic",
    "ideographic-ink",
    "leading",
    "text"
  ],
  "text-emphasis-position": [
    "left",
    "over",
    "right",
    "under"
  ],
  "text-emphasis-skip": [
    "narrow",
    "punctuation",
    "spaces",
    "symbols"
  ],
  "text-emphasis-style": [
    "<string>",
    "circle",
    "dot",
    "double-circle",
    "filled",
    "none",
    "sesame",
    "triangle"
  ],
  "text-group-align": [
    "center",
    "end",
    "left",
    "none",
    "right",
    "start"
  ],
  "text-indent": [
    "<length>",
    "<percentage>",
    "each-line",
    "hanging"
  ],
  "text-justify": [
    "auto",
    "distribute",
    "inter-character",
    "inter-word",
    "none"
  ],
  "text-orientation": [
    "mixed",
    "sideways",
    "sideways-right",
    "upright"
  ],
  "text-overflow": [
    "clip",
    "ellipsis",
    "fade",
    "fade()"
  ],
  "text-size-adjust": [
    "<percentage>",
    "auto",
    "none"
  ],
  "text-space-collapse": [
    "collapse",
    "discard",
    "preserve",
    "preserve-breaks",
    "preserve-spaces"
  ],
  "text-space-trim": [
    "discard-after",
    "discard-before",
    "trim-inner"
  ],
  "text-spacing": [
    "allow-end",
    "auto",
    "ideograph-alpha",
    "ideograph-numeric",
    "no-compress",
    "none",
    "normal",
    "punctuation",
    "space-adjacent",
    "space-end",
    "space-first",
    "space-start",
    "trim-adjacent",
    "trim-end",
    "trim-start"
  ],
  "text-text-emphasis": [
    "open"
  ],
  "text-text-emphasis-position": [
    "left",
    "over",
    "right",
    "under"
  ],
  "text-text-emphasis-style": [
    "<string>",
    "circle",
    "dot",
    "double-circle",
    "filled",
    "none",
    "sesame",
    "triangle"
  ],
  "text-transform": [
    "capitalize",
    "full-size-kana",
    "full-width",
    "lowercase",
    "none",
    "uppercase"
  ],
  "text-underline-offset": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "text-underline-position": [
    "auto",
    "from-font",
    "left",
    "right",
    "under"
  ],
  "text-wrap": [
    "balance",
    "nowrap",
    "pretty",
    "stable",
    "wrap"
  ],
  "textPath": [
    "href",
    "method",
    "path",
    "requiredextensions",
    "side",
    "spacing",
    "startoffset",
    "systemlanguage",
    "xlink:href",
    "xlink:title"
  ],
  "textarea": [
    "autocomplete",
    "cols",
    "dirname",
    "disabled",
    "form",
    "maxlength",
    "minlength",
    "name",
    "placeholder",
    "readonly",
    "required",
    "rows",
    "wrap"
  ],
  "textarea/autocomplete": [
    "additional-name",
    "address-level1",
    "address-level2",
    "address-level3",
    "address-level4",
    "address-line1",
    "address-line2",
    "address-line3",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "billing",
    "cc-additional-name",
    "cc-csc",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-family-name",
    "cc-given-name",
    "cc-name",
    "cc-number",
    "cc-type",
    "country",
    "country-name",
    "current-password",
    "email",
    "family-name",
    "fax",
    "given-name",
    "home",
    "honorific-prefix",
    "honorific-suffix",
    "impp",
    "language",
    "mobile",
    "name",
    "new-password",
    "nickname",
    "off",
    "on",
    "one-time-code",
    "organization",
    "organization-title",
    "pager",
    "photo",
    "postal-code",
    "section-",
    "sex",
    "shipping",
    "street-address",
    "tel",
    "tel-area-code",
    "tel-country-code",
    "tel-extension",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-national",
    "transaction-amount",
    "transaction-currency",
    "url",
    "username",
    "work"
  ],
  "textarea/wrap": [
    "hard",
    "soft"
  ],
  "texttrack": [
    "sourcebuffer"
  ],
  "th": [
    "abbr",
    "align",
    "axis",
    "bgcolor",
    "char",
    "charoff",
    "colspan",
    "headers",
    "height",
    "nowrap",
    "rowspan",
    "scope",
    "valign",
    "width"
  ],
  "th/scope": [
    "auto",
    "col",
    "colgroup",
    "row",
    "rowgroup"
  ],
  "time": [
    "datetime"
  ],
  "to I/O queue": [
    "convert"
  ],
  "top": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "top layer": [
    "add"
  ],
  "top-level browsing context": [
    "browsing session",
    "system focus"
  ],
  "tr": [
    "align",
    "bgcolor",
    "char",
    "charoff",
    "height",
    "valign"
  ],
  "track": [
    "[[frameCaptureRequested]]",
    "default",
    "ended",
    "kind",
    "label",
    "src",
    "srclang"
  ],
  "track update struct": [
    "frame count",
    "track index"
  ],
  "track/kind": [
    "captions",
    "chapters",
    "descriptions",
    "metadata",
    "subtitles"
  ],
  "trackingexdata": [
    "details",
    "explanation",
    "maxage",
    "name",
    "site",
    "targets"
  ],
  "trackingexresult": [
    "issitewide"
  ],
  "transaction": [
    "abort",
    "aborted",
    "aborting",
    "active",
    "cleanup event loop",
    "cleanup indexed database transactions",
    "commit",
    "committed",
    "committing",
    "complete",
    "connection",
    "created",
    "durability hint",
    "error",
    "finished",
    "inactive",
    "lifetime",
    "mode",
    "overlap",
    "overlapping scope",
    "read-only transaction",
    "read/write transaction",
    "request list",
    "scope",
    "start",
    "started",
    "state"
  ],
  "transform": [
    "matrix()",
    "rotate()",
    "scale()",
    "scalex()",
    "scaley()",
    "skew()",
    "skewx()",
    "skewy()",
    "translate()",
    "translatex()",
    "translatey()"
  ],
  "transform-box": [
    "border-box",
    "content-box",
    "fill-box",
    "stroke-box",
    "view-box"
  ],
  "transform-origin": [
    "bottom",
    "center",
    "left",
    "right",
    "top"
  ],
  "transformation": [
    "transformationmatrix",
    "videodeviceid"
  ],
  "transient registered observer": [
    "source"
  ],
  "transition": [
    "cancel",
    "combined duration",
    "complete",
    "end time",
    "end value",
    "reversing shortening factor",
    "reversing-adjusted start value",
    "start time",
    "start value"
  ],
  "transition-property": [
    "all",
    "none"
  ],
  "transitionevent": [
    "transitioncancel",
    "transitionend",
    "transitionrun",
    "transitionstart"
  ],
  "translate": [
    "none"
  ],
  "traversal": [
    "active flag",
    "filter",
    "root",
    "whattoshow"
  ],
  "tree": [
    "ancestor",
    "child",
    "children",
    "descendant",
    "first child",
    "following",
    "inclusive ancestor",
    "inclusive descendant",
    "inclusive sibling",
    "index",
    "last child",
    "next sibling",
    "parent",
    "participate",
    "participate in a tree",
    "participates in a tree",
    "preceding",
    "previous sibling",
    "root",
    "sibling"
  ],
  "tspan": [
    "requiredextensions",
    "systemlanguage"
  ],
  "tuple": [
    "item",
    "name"
  ],
  "type": [
    "discrete",
    "gamma",
    "huerotate",
    "identity",
    "linear",
    "luminancetoalpha",
    "matrix",
    "saturate",
    "table"
  ],
  "ul": [
    "compact",
    "type"
  ],
  "unicode-bidi": [
    "bidi-override",
    "embed",
    "isolate",
    "isolate-override",
    "normal",
    "plaintext"
  ],
  "union": [
    "flattened member types",
    "member types"
  ],
  "unknown": [
    "requiredextensions",
    "systemlanguage"
  ],
  "url": [
    "blob url entry",
    "cannot-be-a-base-url",
    "createobjecturl",
    "equal",
    "fragment",
    "host",
    "origin",
    "password",
    "path",
    "port",
    "query",
    "scheme",
    "set the password",
    "set the username",
    "username"
  ],
  "url()": [
    "local url flag"
  ],
  "url/equals": [
    "exclude fragments"
  ],
  "use": [
    "href",
    "requiredextensions",
    "systemlanguage",
    "xlink:href",
    "xlink:title"
  ],
  "user agent": [
    "brand",
    "brands",
    "equivalence class",
    "full version",
    "mobileness",
    "model",
    "platform architecture",
    "platform bitness",
    "platform brand",
    "platform version",
    "significant version",
    "storage shed"
  ],
  "user contact": [
    "addresses",
    "contacts source",
    "emails",
    "icons",
    "names",
    "numbers"
  ],
  "user-select": [
    "all",
    "auto",
    "contain",
    "none",
    "text"
  ],
  "user-zoom": [
    "fixed",
    "zoom"
  ],
  "value pair": [
    "key",
    "value"
  ],
  "value-with-size": [
    "size",
    "value"
  ],
  "vertical-align": [
    "<length>",
    "<percentage>",
    "alphabetic",
    "auto",
    "baseline",
    "bottom",
    "center",
    "central",
    "first",
    "ideographic",
    "last",
    "mathematical",
    "middle",
    "sub",
    "super",
    "text-bottom",
    "text-top",
    "top"
  ],
  "video": [
    "autoplay",
    "controls",
    "crossorigin",
    "height",
    "loop",
    "muted",
    "playsinline",
    "poster",
    "preload",
    "requiredextensions",
    "src",
    "systemlanguage",
    "width"
  ],
  "video/crossorigin": [
    "anonymous",
    "use-credentials"
  ],
  "video/preload": [
    "auto",
    "metadata",
    "none"
  ],
  "videokindenum": [
    "color",
    "depth"
  ],
  "videotrack": [
    "sourcebuffer"
  ],
  "view": [
    "active",
    "current viewport scale",
    "eye",
    "projection matrix",
    "requested viewport scale",
    "viewport modifiable"
  ],
  "viewport-fit": [
    "auto",
    "contain",
    "cover"
  ],
  "viewport-length": [
    "<length>",
    "<percentage>",
    "auto"
  ],
  "violation": [
    "column number",
    "disposition",
    "effective directive",
    "element",
    "global object",
    "line number",
    "policy",
    "referrer",
    "resource",
    "sample",
    "source file",
    "status",
    "url"
  ],
  "visibility": [
    "collapse",
    "hidden",
    "visible"
  ],
  "voice-balance": [
    "<number>",
    "center",
    "left",
    "leftwards",
    "right",
    "rightwards"
  ],
  "voice-duration": [
    "<time>",
    "auto"
  ],
  "voice-family": [
    "<age>",
    "<family-name>",
    "<gender>",
    "<integer>",
    "child",
    "female",
    "male",
    "neutral",
    "old",
    "preserve",
    "young"
  ],
  "voice-pitch": [
    "<frequency>",
    "<percentage>",
    "<semitones>",
    "absolute",
    "high",
    "low",
    "medium",
    "semitone",
    "x-high",
    "x-low"
  ],
  "voice-range": [
    "<percentage>",
    "<semitones>",
    "absolute",
    "high",
    "low",
    "medium",
    "x-high",
    "x-low"
  ],
  "voice-rate": [
    "<percentage>",
    "fast",
    "medium",
    "normal",
    "slow",
    "x-fast",
    "x-slow"
  ],
  "voice-stress": [
    "moderate",
    "none",
    "normal",
    "reduced",
    "strong"
  ],
  "voice-volume": [
    "<decibel>",
    "loud",
    "medium",
    "silent",
    "soft",
    "x-loud",
    "x-soft"
  ],
  "white-space": [
    "break-spaces",
    "normal",
    "nowrap",
    "pre",
    "pre-line",
    "pre-wrap"
  ],
  "width": [
    "<length-percentage>",
    "auto",
    "contain",
    "fit-content",
    "fit-content(<length-percentage>)",
    "max-content",
    "min-content",
    "stretch"
  ],
  "will-change": [
    "<custom-ident>",
    "auto",
    "contents",
    "scroll-position"
  ],
  "window": [
    "cancelidlecallback",
    "cancelidlecallback()",
    "requestidlecallback",
    "requestidlecallback()"
  ],
  "word-boundary-detection": [
    "<lang>",
    "auto(<lang>)",
    "manual",
    "normal"
  ],
  "word-boundary-expansion": [
    "ideographic-space",
    "none",
    "space"
  ],
  "word-break": [
    "break-all",
    "break-word",
    "keep-all",
    "normal"
  ],
  "word-spacing": [
    "<length>",
    "normal"
  ],
  "wrap-after": [
    "auto",
    "avoid",
    "avoid-flex",
    "avoid-line",
    "flex",
    "line"
  ],
  "wrap-before": [
    "auto",
    "avoid",
    "avoid-flex",
    "avoid-line",
    "flex",
    "line"
  ],
  "wrap-flow": [
    "auto",
    "both",
    "clear",
    "end",
    "maximum",
    "minimum",
    "start"
  ],
  "wrap-inside": [
    "auto",
    "avoid"
  ],
  "wrap-through": [
    "none",
    "wrap"
  ],
  "writing-mode": [
    "horizontal-tb",
    "sideways-lr",
    "sideways-rl",
    "vertical-lr",
    "vertical-rl"
  ],
  "writing-system": [
    "chinese",
    "japanese",
    "known",
    "korean",
    "unknown"
  ],
  "z-index": [
    "auto"
  ],
  "zoom": [
    "auto"
  ]
}